{"hash":"d76ced80c9172af6848a14ce6327080a80e67298","fesm2022":[{"exports":["ALERTS_PROVIDERS","API_PROVIDERS","AlertsService","AngularAdapter","AngularPlugin","ApiService","CLOUDWATCH_PROVIDERS","CloudWatchService","CoreAlertsService","CoreCloudWatchService","FRIGG_PROVIDER_CONFIG","FRIGG_UI_CONFIG","FriggAlertsPanelComponent","FriggIntegrationCardComponent","FriggLoadingSpinnerComponent","FriggModalComponent","FriggToastComponent","FriggToastContainerComponent","FriggUiModule","TOAST_PROVIDERS","ToastManager","ToastService","apiServiceFactory","configureFriggApi","createAngularPlugin","provideFriggUi"],"facadeModuleId":"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/friggframework-ui-angular.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/toast.service.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/api.service.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/alerts.service.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/cloudwatch.service.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/toast/toast.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/toast/toast-container.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/loading/loading-spinner.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/modal/modal.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/integration/integration-card.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/alerts/alerts-panel.component.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/plugins/angular-plugin.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/index.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/index.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/lib/frigg-ui.module.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/lib/providers.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/public-api.mjs","/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/friggframework-ui-angular.mjs"],"name":"friggframework-ui-angular","type":"chunk","dynamicImports":[],"fileName":"friggframework-ui-angular.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","EventEmitter","Output","Input","ChangeDetectionStrategy","Component","ViewChild","ApplicationRef","InjectionToken","NgModule","makeEnvironmentProviders"],"rxjs":["BehaviorSubject","Subject","throwError","from","Observable","merge","interval","combineLatest","timer","of"],"rxjs/operators":["map","distinctUntilChanged","tap","catchError","shareReplay","startWith","switchMap","takeUntil"],"@friggframework/ui-core":["ToastManager","ApiClient","AlertsService","CloudWatchService","FrameworkAdapter","FrameworkPlugin","HOOKS","ADAPTERS","COMPONENTS"],"@angular/common/http":["HttpHeaders","*","HttpClientModule","HttpClient"],"@angular/animations":["trigger","state","transition","style","animate"],"@angular/common":["CommonModule","*"]},"imports":["@angular/core","rxjs","rxjs/operators","@friggframework/ui-core","@angular/common/http","@angular/animations","@angular/common"],"modules":{"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/toast.service.mjs":{"code":"/**\n * Angular Toast Service\n * Wraps ui-core ToastManager with RxJS observables for Angular integration\n */\nclass ToastService {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n        // Initialize toast manager\n        this.toastManager = new ToastManager();\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(this.toastManager.getState());\n        this.toastAddedSubject = new Subject();\n        this.toastRemovedSubject = new Subject();\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.toasts$ = this.state$.pipe(map(state => state.toasts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.toastAdded$ = this.toastAddedSubject.asObservable();\n        this.toastRemoved$ = this.toastRemovedSubject.asObservable();\n        this.activeToastCount$ = this.toasts$.pipe(map(toasts => toasts.filter(t => t.open).length), distinctUntilChanged());\n        // Subscribe to toast manager updates\n        this.setupSubscription();\n    }\n    setupSubscription() {\n        // Track previous state for comparison\n        let previousToasts = this.toastManager.getState().toasts;\n        this.unsubscribe = this.toastManager.subscribe((state) => {\n            this.ngZone.run(() => {\n                // Detect added toasts\n                const currentToasts = state.toasts;\n                const addedToasts = currentToasts.filter(current => !previousToasts.find((prev) => prev.id === current.id));\n                // Detect removed toasts\n                const removedToasts = previousToasts.filter((prev) => !currentToasts.find(current => current.id === prev.id));\n                // Emit events\n                addedToasts.forEach(toast => this.toastAddedSubject.next(toast));\n                removedToasts.forEach((toast) => this.toastRemovedSubject.next(toast.id));\n                // Update state\n                this.stateSubject.next(state);\n                previousToasts = currentToasts;\n            });\n        });\n    }\n    /**\n     * Show a toast notification\n     */\n    show(options) {\n        const toastResult = this.toastManager.toast({\n            ...options,\n            variant: options.variant || 'default',\n            duration: options.duration || 5000\n        });\n        return {\n            ...options,\n            id: toastResult.id,\n            dismiss: () => this.dismiss(toastResult.id),\n            update: (props) => this.update(toastResult.id, props)\n        };\n    }\n    /**\n     * Show success toast\n     */\n    success(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'success'\n        });\n    }\n    /**\n     * Show error toast\n     */\n    error(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'error',\n            duration: options?.duration || 7000 // Errors stay longer\n        });\n    }\n    /**\n     * Show warning toast\n     */\n    warning(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'warning'\n        });\n    }\n    /**\n     * Show info toast\n     */\n    info(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'info'\n        });\n    }\n    /**\n     * Show loading toast with promise\n     */\n    async promise(promise, messages) {\n        const toast = this.show({\n            title: messages.loading,\n            variant: 'default'\n        });\n        try {\n            const result = await promise;\n            this.update(toast.id, {\n                title: typeof messages.success === 'function'\n                    ? messages.success(result)\n                    : messages.success,\n                variant: 'success'\n            });\n            setTimeout(() => this.dismiss(toast.id), 3000);\n            return result;\n        }\n        catch (error) {\n            this.update(toast.id, {\n                title: typeof messages.error === 'function'\n                    ? messages.error(error)\n                    : messages.error,\n                variant: 'error'\n            });\n            setTimeout(() => this.dismiss(toast.id), 5000);\n            throw error;\n        }\n    }\n    /**\n     * Update an existing toast\n     */\n    update(toastId, updates) {\n        const currentState = this.toastManager.getState();\n        const toast = currentState.toasts.find((t) => t.id === toastId);\n        if (toast) {\n            // Use the toast manager's update function\n            const toastRef = { id: toastId, update: (props) => { } };\n            this.toastManager.toast(Object.assign({}, toast, updates, { id: toastId }));\n        }\n    }\n    /**\n     * Dismiss a specific toast\n     */\n    dismiss(toastId) {\n        this.toastManager.dismiss(toastId);\n    }\n    /**\n     * Dismiss all toasts\n     */\n    dismissAll() {\n        this.toastManager.dismissAll();\n    }\n    /**\n     * Clear all toasts immediately\n     */\n    clear() {\n        this.toastManager.clear();\n    }\n    /**\n     * Get current toast state\n     */\n    getState() {\n        return this.toastManager.getState();\n    }\n    /**\n     * Get a specific toast by ID\n     */\n    getToast(toastId) {\n        return this.getState().toasts.find(t => t.id === toastId);\n    }\n    /**\n     * Check if any toasts are active\n     */\n    hasActiveToasts() {\n        return this.getState().toasts.some(t => t.open);\n    }\n    /**\n     * Clean up subscriptions\n     */\n    ngOnDestroy() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n        this.toastAddedSubject.complete();\n        this.toastRemovedSubject.complete();\n        this.stateSubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }] });","originalLength":24121,"removedExports":[],"renderedExports":["ToastService"],"renderedLength":6553},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/api.service.mjs":{"code":"/**\n * Angular API Service\n * Wraps ui-core ApiClient with Angular HttpClient and RxJS observables\n */\nclass ApiService {\n    constructor(http) {\n        this.http = http;\n        // Initialize with empty config\n        const initialConfig = {\n            baseUrl: '',\n            jwt: undefined\n        };\n        this.configSubject = new BehaviorSubject(initialConfig);\n        this.authTokenSubject = new BehaviorSubject(null);\n        this.config$ = this.configSubject.asObservable();\n        this.authToken$ = this.authTokenSubject.asObservable();\n        this.isAuthenticated$ = this.authToken$.pipe(map(token => !!token));\n        // Create initial API client\n        this.apiClient = new ApiClient(initialConfig.baseUrl, initialConfig.jwt);\n    }\n    /**\n     * Initialize the API service with configuration\n     */\n    initialize(config) {\n        this.apiClient = new ApiClient(config.baseUrl, config.jwt);\n        this.configSubject.next(config);\n        if (config.jwt) {\n            this.authTokenSubject.next(config.jwt);\n        }\n    }\n    /**\n     * Update the base URL\n     */\n    setBaseUrl(baseUrl) {\n        const currentConfig = this.configSubject.value;\n        const newConfig = { ...currentConfig, baseUrl };\n        this.apiClient = new ApiClient(baseUrl, currentConfig.jwt);\n        this.configSubject.next(newConfig);\n    }\n    /**\n     * Update the JWT token\n     */\n    setAuthToken(jwt) {\n        const currentConfig = this.configSubject.value;\n        const newConfig = { ...currentConfig, jwt: jwt || undefined };\n        this.apiClient = new ApiClient(currentConfig.baseUrl, jwt || undefined);\n        this.configSubject.next(newConfig);\n        this.authTokenSubject.next(jwt);\n    }\n    /**\n     * Get current headers with auth token\n     */\n    getHeaders() {\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        const token = this.authTokenSubject.value;\n        if (token) {\n            headers['Authorization'] = `Bearer ${token}`;\n        }\n        return new HttpHeaders(headers);\n    }\n    /**\n     * Handle HTTP errors\n     */\n    handleError(error) {\n        let errorMessage = 'An error occurred';\n        if (error.error instanceof ErrorEvent) {\n            // Client-side error\n            errorMessage = `Error: ${error.error.message}`;\n        }\n        else {\n            // Server-side error\n            errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n            if (error.status === 401) {\n                // Unauthorized - clear token\n                this.setAuthToken(null);\n            }\n        }\n        console.error(errorMessage);\n        return throwError(() => new Error(errorMessage));\n    }\n    /**\n     * Login user\n     */\n    login(username, password) {\n        return from(this.apiClient.login(username, password)).pipe(tap((response) => {\n            if (response.token) {\n                this.setAuthToken(response.token);\n            }\n        }), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Create new user\n     */\n    createUser(username, password) {\n        return from(this.apiClient.createUser(username, password)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Logout user\n     */\n    logout() {\n        this.setAuthToken(null);\n    }\n    /**\n     * List all integrations\n     */\n    listIntegrations() {\n        return from(this.apiClient.listIntegrations()).pipe(map(response => response || []), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get authorize requirements\n     */\n    getAuthorizeRequirements(entityType, connectingEntityType) {\n        return from(this.apiClient.getAuthorizeRequirements(entityType, connectingEntityType)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Authorize entity\n     */\n    authorize(entityType, authData) {\n        return from(this.apiClient.authorize(entityType, authData)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Create integration\n     */\n    createIntegration(entity1, entity2, config) {\n        return from(this.apiClient.createIntegration(entity1, entity2, config)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Update integration\n     */\n    updateIntegration(integrationId, config) {\n        return from(this.apiClient.updateIntegration(integrationId, config)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Delete integration\n     */\n    deleteIntegration(integrationId) {\n        return from(this.apiClient.deleteIntegration(integrationId)).pipe(map(() => void 0), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get integration config options\n     */\n    getIntegrationConfigOptions(integrationId) {\n        return from(this.apiClient.getIntegrationConfigOptions(integrationId)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get sample data\n     */\n    getSampleData(integrationId) {\n        return from(this.apiClient.getSampleData(integrationId)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get user actions\n     */\n    getUserActions(integrationId, actionType) {\n        return from(this.apiClient.getUserActions(integrationId, actionType)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get user action options\n     */\n    getUserActionOptions(integrationId, selectedUserAction, data) {\n        return from(this.apiClient.getUserActionOptions(integrationId, selectedUserAction, data)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Submit user action\n     */\n    submitUserAction(integrationId, selectedUserAction, data) {\n        return from(this.apiClient.submitUserAction(integrationId, selectedUserAction, data)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic GET request\n     */\n    get(endpoint) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.get(url, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic POST request\n     */\n    post(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.post(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic PUT request\n     */\n    put(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.put(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic PATCH request\n     */\n    patch(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.patch(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic DELETE request\n     */\n    delete(endpoint) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.delete(url, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Refresh options\n     */\n    refreshOptions(params) {\n        return from(this.apiClient.refreshOptions(params)).pipe(catchError(this.handleError.bind(this)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i1.HttpClient }] });","originalLength":30650,"removedExports":[],"renderedExports":["ApiService"],"renderedLength":7961},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/alerts.service.mjs":{"code":"/**\n * Angular Alerts Service\n * Wraps ui-core AlertsService with RxJS observables for real-time alert management\n */\nclass AlertsService {\n    // Static constants\n    static { this.SEVERITY = AlertsService$1.SEVERITY; }\n    static { this.STATUS = AlertsService$1.STATUS; }\n    constructor(ngZone, apiService) {\n        this.ngZone = ngZone;\n        this.apiService = apiService;\n        // Initialize core service\n        this.coreAlertsService = new AlertsService$1(this.apiService);\n        // Initialize state\n        const initialState = {\n            alerts: [],\n            loading: false,\n            error: null,\n            lastFetch: null\n        };\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(initialState);\n        this.alertAddedSubject = new Subject();\n        this.alertUpdatedSubject = new Subject();\n        this.alertRemovedSubject = new Subject();\n        this.refreshSubject = new Subject();\n        this.subscriptions = new Map();\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.alerts$ = this.state$.pipe(map(state => state.alerts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.loading$ = this.state$.pipe(map(state => state.loading), distinctUntilChanged());\n        this.error$ = this.state$.pipe(map(state => state.error), distinctUntilChanged());\n        this.alertAdded$ = this.alertAddedSubject.asObservable();\n        this.alertUpdated$ = this.alertUpdatedSubject.asObservable();\n        this.alertRemoved$ = this.alertRemovedSubject.asObservable();\n        // Computed observables\n        this.activeAlerts$ = this.alerts$.pipe(map(alerts => alerts.filter(a => a.status === 'active')), shareReplay(1));\n        this.criticalAlerts$ = this.alerts$.pipe(map(alerts => alerts.filter(a => a.severity === 'critical' && a.status === 'active')), shareReplay(1));\n        this.alertCounts$ = this.alerts$.pipe(map(alerts => ({\n            total: alerts.length,\n            active: alerts.filter(a => a.status === 'active').length,\n            critical: alerts.filter(a => a.severity === 'critical' && a.status === 'active').length,\n            high: alerts.filter(a => a.severity === 'high' && a.status === 'active').length,\n            medium: alerts.filter(a => a.severity === 'medium' && a.status === 'active').length,\n            low: alerts.filter(a => a.severity === 'low' && a.status === 'active').length\n        })), shareReplay(1));\n    }\n    /**\n     * Fetch alerts for an integration\n     */\n    fetchAlerts(integrationId, filters) {\n        this.updateState({ loading: true, error: null });\n        return new Observable(observer => {\n            this.coreAlertsService.getAlerts(integrationId, filters)\n                .then(alerts => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        alerts: alerts,\n                        loading: false,\n                        lastFetch: new Date()\n                    });\n                    observer.next(alerts);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        loading: false,\n                        error\n                    });\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Set up auto-refresh for alerts\n     */\n    setupAutoRefresh(integrationId, intervalMs = 30000) {\n        return merge(this.refreshSubject, interval(intervalMs)).pipe(startWith(0), switchMap(() => this.fetchAlerts(integrationId)));\n    }\n    /**\n     * Manually refresh alerts\n     */\n    refresh() {\n        this.refreshSubject.next();\n    }\n    /**\n     * Subscribe to real-time alerts for an integration\n     */\n    subscribeToAlerts(integrationId) {\n        return new Observable(observer => {\n            const unsubscribe = this.coreAlertsService.subscribe(integrationId, (alert) => {\n                this.ngZone.run(() => {\n                    // Update local state\n                    const currentState = this.stateSubject.value;\n                    const existingIndex = currentState.alerts.findIndex(a => a.id === alert.id);\n                    if (existingIndex >= 0) {\n                        // Update existing alert\n                        const updatedAlerts = [...currentState.alerts];\n                        updatedAlerts[existingIndex] = alert;\n                        this.updateState({ alerts: updatedAlerts });\n                        this.alertUpdatedSubject.next(alert);\n                    }\n                    else {\n                        // Add new alert\n                        this.updateState({ alerts: [alert, ...currentState.alerts] });\n                        this.alertAddedSubject.next(alert);\n                    }\n                    observer.next(alert);\n                });\n            });\n            // Store subscription for cleanup\n            this.subscriptions.set(integrationId, unsubscribe);\n            // Return cleanup function\n            return () => {\n                unsubscribe();\n                this.subscriptions.delete(integrationId);\n            };\n        });\n    }\n    /**\n     * Acknowledge an alert\n     */\n    acknowledgeAlert(alertId, userId) {\n        return new Observable(observer => {\n            this.coreAlertsService.acknowledgeAlert(alertId, userId)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Resolve an alert\n     */\n    resolveAlert(alertId, userId, resolution) {\n        return new Observable(observer => {\n            this.coreAlertsService.resolveAlert(alertId, userId, resolution)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Create a new alert\n     */\n    createAlert(alertData) {\n        return new Observable(observer => {\n            this.coreAlertsService.createAlert(alertData)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    const currentState = this.stateSubject.value;\n                    this.updateState({ alerts: [alert, ...currentState.alerts] });\n                    this.alertAddedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Update an alert\n     */\n    updateAlert(alertId, updates) {\n        return new Observable(observer => {\n            this.coreAlertsService.updateAlert(alertId, updates)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Delete an alert\n     */\n    deleteAlert(alertId) {\n        return new Observable(observer => {\n            this.coreAlertsService.deleteAlert(alertId)\n                .then(() => {\n                this.ngZone.run(() => {\n                    const currentState = this.stateSubject.value;\n                    this.updateState({\n                        alerts: currentState.alerts.filter(a => a.id !== alertId)\n                    });\n                    this.alertRemovedSubject.next(alertId);\n                    observer.next();\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Filter alerts by severity\n     */\n    filterBySeverity(severity) {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.filterAlertsBySeverity(alerts, severity)));\n    }\n    /**\n     * Filter alerts by status\n     */\n    filterByStatus(status) {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.filterAlertsByStatus(alerts, status)));\n    }\n    /**\n     * Get alerts grouped by severity\n     */\n    getAlertsGroupedBySeverity() {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.groupAlertsBySeverity(alerts)));\n    }\n    /**\n     * Sort alerts by timestamp\n     */\n    sortAlertsByTimestamp(order = 'desc') {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.sortAlertsByTimestamp(alerts, order)));\n    }\n    /**\n     * Update state\n     */\n    updateState(updates) {\n        const currentState = this.stateSubject.value;\n        this.stateSubject.next({ ...currentState, ...updates });\n    }\n    /**\n     * Update a single alert in state\n     */\n    updateAlertInState(alert) {\n        const currentState = this.stateSubject.value;\n        const alerts = currentState.alerts.map(a => a.id === alert.id ? alert : a);\n        this.updateState({ alerts });\n    }\n    /**\n     * Clean up subscriptions\n     */\n    ngOnDestroy() {\n        // Unsubscribe from all real-time subscriptions\n        this.subscriptions.forEach(unsubscribe => unsubscribe());\n        this.subscriptions.clear();\n        // Complete subjects\n        this.alertAddedSubject.complete();\n        this.alertUpdatedSubject.complete();\n        this.alertRemovedSubject.complete();\n        this.refreshSubject.complete();\n        this.stateSubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, deps: [{ token: i0.NgZone }, { token: ApiService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: ApiService }] });","originalLength":42180,"removedExports":[],"renderedExports":["AlertsService"],"renderedLength":11253},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/cloudwatch.service.mjs":{"code":"/**\n * Angular CloudWatch Service\n * Wraps ui-core CloudWatchService with RxJS observables for monitoring metrics\n */\nclass CloudWatchService {\n    constructor(ngZone, apiService) {\n        this.ngZone = ngZone;\n        this.apiService = apiService;\n        // Initialize core service\n        this.coreCloudWatchService = new CloudWatchService$1(this.apiService);\n        // Initialize state\n        const initialState = {\n            metrics: null,\n            alerts: [],\n            logs: [],\n            loading: false,\n            error: null,\n            lastFetch: null\n        };\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(initialState);\n        this.refreshSubject = new Subject();\n        this.metricsQuerySubject = new BehaviorSubject(null);\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.metrics$ = this.state$.pipe(map(state => state.metrics), distinctUntilChanged());\n        this.alerts$ = this.state$.pipe(map(state => state.alerts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.logs$ = this.state$.pipe(map(state => state.logs), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.loading$ = this.state$.pipe(map(state => state.loading), distinctUntilChanged());\n        this.error$ = this.state$.pipe(map(state => state.error), distinctUntilChanged());\n        // Set up computed observables\n        this.setupComputedObservables();\n    }\n    setupComputedObservables() {\n        // Metrics summary\n        this.summary$ = this.metrics$.pipe(map(metrics => {\n            if (!metrics) {\n                return {\n                    avgLatency: 0,\n                    totalRequests: 0,\n                    errorRate: 0,\n                    uptime: 100,\n                    currentCPU: 0,\n                    currentMemory: 0,\n                    activeConnections: 0,\n                    throughput: 0\n                };\n            }\n            return {\n                avgLatency: this.coreCloudWatchService.calculateAverage(metrics.latency),\n                totalRequests: metrics.requestCount.reduce((sum, point) => sum + point.value, 0),\n                errorRate: this.coreCloudWatchService.calculateErrorRate(metrics.errorCount, metrics.requestCount),\n                uptime: this.coreCloudWatchService.calculateUptime(metrics.healthChecks),\n                currentCPU: this.coreCloudWatchService.getLatestValue(metrics.cpuUtilization),\n                currentMemory: this.coreCloudWatchService.getLatestValue(metrics.memoryUtilization),\n                activeConnections: this.coreCloudWatchService.getLatestValue(metrics.activeConnections),\n                throughput: this.coreCloudWatchService.getLatestValue(metrics.throughput)\n            };\n        }), shareReplay(1));\n        // Latency trend\n        this.latencyTrend$ = this.metrics$.pipe(map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.latency) : 0), shareReplay(1));\n        // Error trend\n        this.errorTrend$ = this.metrics$.pipe(map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.errorCount) : 0), shareReplay(1));\n        // Health status\n        this.healthStatus$ = combineLatest([\n            this.summary$,\n            this.alerts$\n        ]).pipe(map(([summary, alerts]) => {\n            const activeAlerts = alerts.filter(a => a.status === 'active');\n            if (activeAlerts.length > 5 || summary.errorRate > 10 || summary.uptime < 90) {\n                return 'critical';\n            }\n            else if (activeAlerts.length > 0 || summary.errorRate > 5 || summary.uptime < 95) {\n                return 'degraded';\n            }\n            return 'healthy';\n        }), shareReplay(1));\n    }\n    /**\n     * Fetch metrics for an integration\n     */\n    fetchMetrics(query) {\n        this.updateState({ loading: true, error: null });\n        this.metricsQuerySubject.next(query);\n        return new Observable(observer => {\n            this.coreCloudWatchService.getMetrics(query)\n                .then(metrics => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        metrics: metrics,\n                        loading: false,\n                        lastFetch: new Date()\n                    });\n                    observer.next(metrics);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        loading: false,\n                        error\n                    });\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Set up auto-refresh for metrics\n     */\n    setupAutoRefresh(intervalMs = 60000) {\n        return combineLatest([\n            merge(this.refreshSubject, interval(intervalMs)).pipe(startWith(0)),\n            this.metricsQuerySubject\n        ]).pipe(switchMap(([_, query]) => {\n            if (!query) {\n                return [];\n            }\n            return this.fetchMetrics(query);\n        }));\n    }\n    /**\n     * Manually refresh metrics\n     */\n    refresh() {\n        this.refreshSubject.next();\n    }\n    /**\n     * Fetch alerts for an integration\n     */\n    fetchAlerts(integrationId) {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getAlerts(integrationId)\n                .then(alerts => {\n                this.ngZone.run(() => {\n                    this.updateState({ alerts: alerts });\n                    observer.next(alerts);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Fetch logs for an integration\n     */\n    fetchLogs(integrationId, startTime, endTime, logLevel = 'INFO') {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getLogs({\n                integrationId,\n                startTime,\n                endTime,\n                logLevel\n            })\n                .then(logs => {\n                this.ngZone.run(() => {\n                    this.updateState({ logs: logs });\n                    observer.next(logs);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Fetch custom metrics\n     */\n    fetchCustomMetrics(integrationId, metricNames) {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getCustomMetrics(integrationId, metricNames)\n                .then(metrics => {\n                this.ngZone.run(() => {\n                    observer.next(metrics);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Get time series data for a specific metric\n     */\n    getMetricTimeSeries(metricName) {\n        return this.metrics$.pipe(map(metrics => {\n            if (!metrics || !metrics[metricName]) {\n                return [];\n            }\n            return this.coreCloudWatchService.formatTimeSeries(metrics[metricName]);\n        }));\n    }\n    /**\n     * Calculate metric statistics\n     */\n    getMetricStats(metricName) {\n        return this.getMetricTimeSeries(metricName).pipe(map(dataPoints => {\n            if (dataPoints.length === 0) {\n                return { min: 0, max: 0, avg: 0, current: 0 };\n            }\n            const values = dataPoints.map(p => p.value);\n            return {\n                min: Math.min(...values),\n                max: Math.max(...values),\n                avg: this.coreCloudWatchService.calculateAverage(dataPoints),\n                current: this.coreCloudWatchService.getLatestValue(dataPoints)\n            };\n        }));\n    }\n    /**\n     * Set alert threshold for a metric\n     */\n    setAlertThreshold(metric, threshold, condition) {\n        // This would typically call a backend API to set up CloudWatch alarms\n        console.log(`Setting alert: ${metric} ${condition} ${threshold}`);\n    }\n    /**\n     * Clear all data\n     */\n    clear() {\n        this.updateState({\n            metrics: null,\n            alerts: [],\n            logs: [],\n            error: null,\n            lastFetch: null\n        });\n        this.metricsQuerySubject.next(null);\n    }\n    /**\n     * Update state\n     */\n    updateState(updates) {\n        const currentState = this.stateSubject.value;\n        this.stateSubject.next({ ...currentState, ...updates });\n    }\n    /**\n     * Clean up\n     */\n    ngOnDestroy() {\n        this.refreshSubject.complete();\n        this.stateSubject.complete();\n        this.metricsQuerySubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, deps: [{ token: i0.NgZone }, { token: ApiService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: ApiService }] });","originalLength":38242,"removedExports":[],"renderedExports":["CloudWatchService"],"renderedLength":9884},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/toast/toast.component.mjs":{"code":"/**\n * Angular Toast Component\n * Displays toast notifications with animations and auto-dismiss\n */\nclass FriggToastComponent {\n    constructor() {\n        this.variant = 'default';\n        this.duration = 5000;\n        this.dismiss = new EventEmitter();\n        this.click = new EventEmitter();\n        this.animationState = 'visible';\n        this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n        // Auto-dismiss after duration\n        if (this.duration > 0) {\n            timer(this.duration)\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(() => {\n                this.close();\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    handleClick() {\n        this.click.emit();\n    }\n    handleAction(event) {\n        event.stopPropagation();\n        if (this.action) {\n            this.action.onClick();\n        }\n    }\n    handleClose(event) {\n        event.stopPropagation();\n        this.close();\n    }\n    close() {\n        this.animationState = 'hidden';\n        setTimeout(() => {\n            this.dismiss.emit();\n        }, 200);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggToastComponent, isStandalone: true, selector: \"frigg-toast\", inputs: { id: \"id\", title: \"title\", description: \"description\", variant: \"variant\", duration: \"duration\", action: \"action\" }, outputs: { dismiss: \"dismiss\", click: \"click\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-toast\"\n      [class.frigg-toast--success]=\"variant === 'success'\"\n      [class.frigg-toast--error]=\"variant === 'error'\"\n      [class.frigg-toast--warning]=\"variant === 'warning'\"\n      [class.frigg-toast--info]=\"variant === 'info'\"\n      [@slideIn]=\"animationState\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-toast__icon\">\n        <svg *ngIf=\"variant === 'success'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'error'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'warning'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'info'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"!variant || variant === 'default'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      \n      <div class=\"frigg-toast__content\">\n        <div class=\"frigg-toast__title\" *ngIf=\"title\">{{ title }}</div>\n        <div class=\"frigg-toast__description\" *ngIf=\"description\">{{ description }}</div>\n      </div>\n      \n      <div class=\"frigg-toast__actions\">\n        <button \n          *ngIf=\"action\" \n          class=\"frigg-toast__action\"\n          (click)=\"handleAction($event)\"\n        >\n          {{ action.label }}\n        </button>\n        <button \n          class=\"frigg-toast__close\"\n          (click)=\"handleClose($event)\"\n          aria-label=\"Close\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-toast{display:flex;align-items:flex-start;gap:12px;min-width:300px;max-width:500px;padding:16px;background:#fff;border-radius:8px;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d;cursor:pointer;transition:all .2s ease}.frigg-toast:hover{box-shadow:0 20px 25px -5px #0000001a,0 10px 10px -5px #0000000a}.frigg-toast__icon{flex-shrink:0;width:20px;height:20px;color:#6b7280}.frigg-toast--success .frigg-toast__icon{color:#10b981}.frigg-toast--error .frigg-toast__icon{color:#ef4444}.frigg-toast--warning .frigg-toast__icon{color:#f59e0b}.frigg-toast--info .frigg-toast__icon{color:#3b82f6}.frigg-toast__content{flex:1;min-width:0}.frigg-toast__title{font-weight:600;font-size:14px;line-height:20px;color:#111827}.frigg-toast__description{margin-top:4px;font-size:14px;line-height:20px;color:#6b7280}.frigg-toast__actions{display:flex;align-items:center;gap:8px;flex-shrink:0}.frigg-toast__action{padding:4px 8px;background:transparent;border:1px solid #E5E7EB;border-radius:4px;font-size:12px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-toast__action:hover{background:#f3f4f6;border-color:#d1d5db}.frigg-toast__close{padding:4px;background:transparent;border:none;border-radius:4px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-toast__close:hover{background:#f3f4f6;color:#374151}.frigg-toast__close svg{width:16px;height:16px}@media (prefers-color-scheme: dark){.frigg-toast{background:#1f2937;color:#fff}.frigg-toast__title{color:#fff}.frigg-toast__description{color:#d1d5db}.frigg-toast__action{border-color:#374151;color:#d1d5db}.frigg-toast__action:hover{background:#374151;border-color:#4b5563;color:#fff}.frigg-toast__close{color:#9ca3af}.frigg-toast__close:hover{background:#374151;color:#fff}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('slideIn', [\n                state('void', style({\n                    transform: 'translateX(100%)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'translateX(0)',\n                    opacity: 1\n                })),\n                state('hidden', style({\n                    transform: 'translateX(100%)',\n                    opacity: 0\n                })),\n                transition('void => visible', [\n                    animate('300ms ease-out')\n                ]),\n                transition('visible => hidden', [\n                    animate('200ms ease-in')\n                ])\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-toast', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-toast\"\n      [class.frigg-toast--success]=\"variant === 'success'\"\n      [class.frigg-toast--error]=\"variant === 'error'\"\n      [class.frigg-toast--warning]=\"variant === 'warning'\"\n      [class.frigg-toast--info]=\"variant === 'info'\"\n      [@slideIn]=\"animationState\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-toast__icon\">\n        <svg *ngIf=\"variant === 'success'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'error'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'warning'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'info'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"!variant || variant === 'default'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      \n      <div class=\"frigg-toast__content\">\n        <div class=\"frigg-toast__title\" *ngIf=\"title\">{{ title }}</div>\n        <div class=\"frigg-toast__description\" *ngIf=\"description\">{{ description }}</div>\n      </div>\n      \n      <div class=\"frigg-toast__actions\">\n        <button \n          *ngIf=\"action\" \n          class=\"frigg-toast__action\"\n          (click)=\"handleAction($event)\"\n        >\n          {{ action.label }}\n        </button>\n        <button \n          class=\"frigg-toast__close\"\n          (click)=\"handleClose($event)\"\n          aria-label=\"Close\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  `, animations: [\n                        trigger('slideIn', [\n                            state('void', style({\n                                transform: 'translateX(100%)',\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                transform: 'translateX(0)',\n                                opacity: 1\n                            })),\n                            state('hidden', style({\n                                transform: 'translateX(100%)',\n                                opacity: 0\n                            })),\n                            transition('void => visible', [\n                                animate('300ms ease-out')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('200ms ease-in')\n                            ])\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-toast{display:flex;align-items:flex-start;gap:12px;min-width:300px;max-width:500px;padding:16px;background:#fff;border-radius:8px;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d;cursor:pointer;transition:all .2s ease}.frigg-toast:hover{box-shadow:0 20px 25px -5px #0000001a,0 10px 10px -5px #0000000a}.frigg-toast__icon{flex-shrink:0;width:20px;height:20px;color:#6b7280}.frigg-toast--success .frigg-toast__icon{color:#10b981}.frigg-toast--error .frigg-toast__icon{color:#ef4444}.frigg-toast--warning .frigg-toast__icon{color:#f59e0b}.frigg-toast--info .frigg-toast__icon{color:#3b82f6}.frigg-toast__content{flex:1;min-width:0}.frigg-toast__title{font-weight:600;font-size:14px;line-height:20px;color:#111827}.frigg-toast__description{margin-top:4px;font-size:14px;line-height:20px;color:#6b7280}.frigg-toast__actions{display:flex;align-items:center;gap:8px;flex-shrink:0}.frigg-toast__action{padding:4px 8px;background:transparent;border:1px solid #E5E7EB;border-radius:4px;font-size:12px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-toast__action:hover{background:#f3f4f6;border-color:#d1d5db}.frigg-toast__close{padding:4px;background:transparent;border:none;border-radius:4px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-toast__close:hover{background:#f3f4f6;color:#374151}.frigg-toast__close svg{width:16px;height:16px}@media (prefers-color-scheme: dark){.frigg-toast{background:#1f2937;color:#fff}.frigg-toast__title{color:#fff}.frigg-toast__description{color:#d1d5db}.frigg-toast__action{border-color:#374151;color:#d1d5db}.frigg-toast__action:hover{background:#374151;border-color:#4b5563;color:#fff}.frigg-toast__close{color:#9ca3af}.frigg-toast__close:hover{background:#374151;color:#fff}}\\n\"] }]\n        }], propDecorators: { id: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], variant: [{\n                type: Input\n            }], duration: [{\n                type: Input\n            }], action: [{\n                type: Input\n            }], dismiss: [{\n                type: Output\n            }], click: [{\n                type: Output\n            }] } });","originalLength":29574,"removedExports":[],"renderedExports":["FriggToastComponent"],"renderedLength":13928},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/toast/toast-container.component.mjs":{"code":"/**\n * Angular Toast Container Component\n * Manages and displays multiple toast notifications\n */\nclass FriggToastContainerComponent {\n    constructor(toastService, cdr) {\n        this.toastService = toastService;\n        this.cdr = cdr;\n        this.toasts = [];\n        this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n        // Subscribe to toast changes\n        this.toastService.toasts$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(toasts => {\n            this.toasts = toasts.filter(t => t.open !== false);\n            this.cdr.markForCheck();\n        });\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    trackByToastId(index, toast) {\n        return toast.id;\n    }\n    handleDismiss(toastId) {\n        this.toastService.dismiss(toastId);\n    }\n    handleClick(toast) {\n        // Optional: Handle toast click\n        console.log('Toast clicked:', toast);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastContainerComponent, deps: [{ token: ToastService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggToastContainerComponent, isStandalone: true, selector: \"frigg-toast-container\", ngImport: i0, template: `\n    <div class=\"frigg-toast-container\" [class.frigg-toast-container--empty]=\"toasts.length === 0\">\n      <frigg-toast\n        *ngFor=\"let toast of toasts; trackBy: trackByToastId\"\n        [id]=\"toast.id\"\n        [title]=\"toast.title\"\n        [description]=\"toast.description\"\n        [variant]=\"toast.variant || 'default'\"\n        [duration]=\"toast.duration || 5000\"\n        [action]=\"toast.action\"\n        (dismiss)=\"handleDismiss(toast.id)\"\n        (click)=\"handleClick(toast)\"\n      ></frigg-toast>\n    </div>\n  `, isInline: true, styles: [\".frigg-toast-container{position:fixed;top:20px;right:20px;z-index:9999;display:flex;flex-direction:column;gap:12px;pointer-events:none}.frigg-toast-container--empty{display:none}.frigg-toast-container frigg-toast{pointer-events:auto}@media (max-width: 640px){.frigg-toast-container{top:10px;right:10px;left:10px}}@keyframes slideInRight{0%{transform:translate(100%);opacity:0}to{transform:translate(0);opacity:1}}frigg-toast{animation:slideInRight .3s ease-out}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: FriggToastComponent, selector: \"frigg-toast\", inputs: [\"id\", \"title\", \"description\", \"variant\", \"duration\", \"action\"], outputs: [\"dismiss\", \"click\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastContainerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-toast-container', standalone: true, imports: [CommonModule, FriggToastComponent], template: `\n    <div class=\"frigg-toast-container\" [class.frigg-toast-container--empty]=\"toasts.length === 0\">\n      <frigg-toast\n        *ngFor=\"let toast of toasts; trackBy: trackByToastId\"\n        [id]=\"toast.id\"\n        [title]=\"toast.title\"\n        [description]=\"toast.description\"\n        [variant]=\"toast.variant || 'default'\"\n        [duration]=\"toast.duration || 5000\"\n        [action]=\"toast.action\"\n        (dismiss)=\"handleDismiss(toast.id)\"\n        (click)=\"handleClick(toast)\"\n      ></frigg-toast>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-toast-container{position:fixed;top:20px;right:20px;z-index:9999;display:flex;flex-direction:column;gap:12px;pointer-events:none}.frigg-toast-container--empty{display:none}.frigg-toast-container frigg-toast{pointer-events:auto}@media (max-width: 640px){.frigg-toast-container{top:10px;right:10px;left:10px}}@keyframes slideInRight{0%{transform:translate(100%);opacity:0}to{transform:translate(0);opacity:1}}frigg-toast{animation:slideInRight .3s ease-out}\\n\"] }]\n        }], ctorParameters: () => [{ type: ToastService }, { type: i0.ChangeDetectorRef }] });","originalLength":10719,"removedExports":[],"renderedExports":["FriggToastContainerComponent"],"renderedLength":4280},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/loading/loading-spinner.component.mjs":{"code":"/**\n * Angular Loading Spinner Component\n * Displays a customizable loading spinner\n */\nclass FriggLoadingSpinnerComponent {\n    constructor() {\n        this.size = 'medium';\n        this.inline = false;\n        this.overlay = false;\n        this.label = 'Loading';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggLoadingSpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggLoadingSpinnerComponent, isStandalone: true, selector: \"frigg-loading-spinner\", inputs: { size: \"size\", text: \"text\", inline: \"inline\", overlay: \"overlay\", label: \"label\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-loading-spinner\"\n      [class.frigg-loading-spinner--small]=\"size === 'small'\"\n      [class.frigg-loading-spinner--large]=\"size === 'large'\"\n      [class.frigg-loading-spinner--inline]=\"inline\"\n      [class.frigg-loading-spinner--overlay]=\"overlay\"\n    >\n      <div class=\"frigg-loading-spinner__container\" *ngIf=\"!overlay\">\n        <svg \n          class=\"frigg-loading-spinner__svg\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\"\n          [attr.aria-label]=\"label\"\n        >\n          <circle \n            class=\"frigg-loading-spinner__circle-bg\"\n            cx=\"12\" \n            cy=\"12\" \n            r=\"10\" \n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n          />\n          <path \n            class=\"frigg-loading-spinner__circle\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n          />\n        </svg>\n        <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n      </div>\n      \n      <div class=\"frigg-loading-spinner__overlay\" *ngIf=\"overlay\">\n        <div class=\"frigg-loading-spinner__overlay-content\">\n          <svg \n            class=\"frigg-loading-spinner__svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\"\n            [attr.aria-label]=\"label\"\n          >\n            <circle \n              class=\"frigg-loading-spinner__circle-bg\"\n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n            />\n            <path \n              class=\"frigg-loading-spinner__circle\"\n              d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n          <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-loading-spinner{display:flex;align-items:center;justify-content:center}.frigg-loading-spinner__container{display:flex;flex-direction:column;align-items:center;gap:8px}.frigg-loading-spinner__svg{width:32px;height:32px;animation:spin 1s linear infinite;color:#3b82f6}.frigg-loading-spinner--small .frigg-loading-spinner__svg{width:20px;height:20px}.frigg-loading-spinner--large .frigg-loading-spinner__svg{width:48px;height:48px}.frigg-loading-spinner__circle-bg{opacity:.2}.frigg-loading-spinner__circle{opacity:1}.frigg-loading-spinner__text{font-size:14px;color:#6b7280;text-align:center}.frigg-loading-spinner--inline{display:inline-flex}.frigg-loading-spinner--inline .frigg-loading-spinner__container{flex-direction:row}.frigg-loading-spinner--overlay{position:fixed;inset:0;z-index:9998}.frigg-loading-spinner__overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;background:#fffffff2;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-loading-spinner__overlay-content{display:flex;flex-direction:column;align-items:center;gap:12px}@media (prefers-color-scheme: dark){.frigg-loading-spinner__svg{color:#60a5fa}.frigg-loading-spinner__text{color:#d1d5db}.frigg-loading-spinner__overlay{background:#111827f2}}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggLoadingSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-loading-spinner', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-loading-spinner\"\n      [class.frigg-loading-spinner--small]=\"size === 'small'\"\n      [class.frigg-loading-spinner--large]=\"size === 'large'\"\n      [class.frigg-loading-spinner--inline]=\"inline\"\n      [class.frigg-loading-spinner--overlay]=\"overlay\"\n    >\n      <div class=\"frigg-loading-spinner__container\" *ngIf=\"!overlay\">\n        <svg \n          class=\"frigg-loading-spinner__svg\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\"\n          [attr.aria-label]=\"label\"\n        >\n          <circle \n            class=\"frigg-loading-spinner__circle-bg\"\n            cx=\"12\" \n            cy=\"12\" \n            r=\"10\" \n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n          />\n          <path \n            class=\"frigg-loading-spinner__circle\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n          />\n        </svg>\n        <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n      </div>\n      \n      <div class=\"frigg-loading-spinner__overlay\" *ngIf=\"overlay\">\n        <div class=\"frigg-loading-spinner__overlay-content\">\n          <svg \n            class=\"frigg-loading-spinner__svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\"\n            [attr.aria-label]=\"label\"\n          >\n            <circle \n              class=\"frigg-loading-spinner__circle-bg\"\n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n            />\n            <path \n              class=\"frigg-loading-spinner__circle\"\n              d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n          <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n        </div>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-loading-spinner{display:flex;align-items:center;justify-content:center}.frigg-loading-spinner__container{display:flex;flex-direction:column;align-items:center;gap:8px}.frigg-loading-spinner__svg{width:32px;height:32px;animation:spin 1s linear infinite;color:#3b82f6}.frigg-loading-spinner--small .frigg-loading-spinner__svg{width:20px;height:20px}.frigg-loading-spinner--large .frigg-loading-spinner__svg{width:48px;height:48px}.frigg-loading-spinner__circle-bg{opacity:.2}.frigg-loading-spinner__circle{opacity:1}.frigg-loading-spinner__text{font-size:14px;color:#6b7280;text-align:center}.frigg-loading-spinner--inline{display:inline-flex}.frigg-loading-spinner--inline .frigg-loading-spinner__container{flex-direction:row}.frigg-loading-spinner--overlay{position:fixed;inset:0;z-index:9998}.frigg-loading-spinner__overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;background:#fffffff2;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-loading-spinner__overlay-content{display:flex;flex-direction:column;align-items:center;gap:12px}@media (prefers-color-scheme: dark){.frigg-loading-spinner__svg{color:#60a5fa}.frigg-loading-spinner__text{color:#d1d5db}.frigg-loading-spinner__overlay{background:#111827f2}}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\n        }], propDecorators: { size: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], inline: [{\n                type: Input\n            }], overlay: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }] } });","originalLength":16437,"removedExports":[],"renderedExports":["FriggLoadingSpinnerComponent"],"renderedLength":8334},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/modal/modal.component.mjs":{"code":"/**\n * Angular Modal Component\n * Displays content in a modal overlay with customizable options\n */\nclass FriggModalComponent {\n    constructor() {\n        this.isOpen = false;\n        this.size = 'medium';\n        this.showCloseButton = true;\n        this.showFooter = false;\n        this.closeOnEscape = true;\n        this.closeOnBackdrop = true;\n        this.close = new EventEmitter();\n        this.handleEscapeKey = (event) => {\n            if (event.key === 'Escape' && this.isOpen) {\n                this.handleClose();\n            }\n        };\n    }\n    ngOnInit() {\n        if (this.closeOnEscape) {\n            document.addEventListener('keydown', this.handleEscapeKey);\n        }\n    }\n    ngOnDestroy() {\n        document.removeEventListener('keydown', this.handleEscapeKey);\n    }\n    ngAfterViewInit() {\n        // Focus trap management\n        if (this.isOpen && this.modalContent) {\n            this.trapFocus();\n        }\n    }\n    handleBackdropClick(event) {\n        if (this.closeOnBackdrop && event.target === event.currentTarget) {\n            this.handleClose();\n        }\n    }\n    handleClose() {\n        this.close.emit();\n    }\n    trapFocus() {\n        // Simple focus trap implementation\n        const focusableElements = this.modalContent?.nativeElement.querySelectorAll('a[href], button, textarea, input[type=\"text\"], input[type=\"radio\"], input[type=\"checkbox\"], select');\n        const firstFocusable = focusableElements?.[0];\n        const lastFocusable = focusableElements?.[focusableElements.length - 1];\n        if (firstFocusable) {\n            firstFocusable.focus();\n        }\n        // Tab cycling logic would go here\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggModalComponent, isStandalone: true, selector: \"frigg-modal\", inputs: { isOpen: \"isOpen\", title: \"title\", size: \"size\", showCloseButton: \"showCloseButton\", showFooter: \"showFooter\", closeOnEscape: \"closeOnEscape\", closeOnBackdrop: \"closeOnBackdrop\" }, outputs: { close: \"close\" }, viewQueries: [{ propertyName: \"modalContent\", first: true, predicate: [\"modalContent\"], descendants: true }], ngImport: i0, template: `\n    <div \n      class=\"frigg-modal\"\n      [class.frigg-modal--open]=\"isOpen\"\n      [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      (click)=\"handleBackdropClick($event)\"\n    >\n      <div \n        class=\"frigg-modal__backdrop\"\n        [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      ></div>\n      \n      <div \n        class=\"frigg-modal__container\"\n        [class.frigg-modal__container--small]=\"size === 'small'\"\n        [class.frigg-modal__container--large]=\"size === 'large'\"\n        [class.frigg-modal__container--fullscreen]=\"size === 'fullscreen'\"\n        [@slideUp]=\"isOpen ? 'visible' : 'hidden'\"\n        #modalContent\n      >\n        <div class=\"frigg-modal__header\" *ngIf=\"title || showCloseButton\">\n          <h2 class=\"frigg-modal__title\" *ngIf=\"title\">{{ title }}</h2>\n          <button \n            *ngIf=\"showCloseButton\"\n            class=\"frigg-modal__close\"\n            (click)=\"handleClose()\"\n            aria-label=\"Close modal\"\n          >\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"frigg-modal__body\">\n          <ng-content></ng-content>\n        </div>\n        \n        <div class=\"frigg-modal__footer\" *ngIf=\"showFooter\">\n          <ng-content select=\"[modal-footer]\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-modal{position:fixed;inset:0;z-index:10000;display:none;align-items:center;justify-content:center;padding:20px}.frigg-modal--open{display:flex}.frigg-modal__backdrop{position:absolute;inset:0;background:#00000080;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-modal__container{position:relative;max-width:600px;width:100%;max-height:90vh;display:flex;flex-direction:column;background:#fff;border-radius:12px;box-shadow:0 25px 50px -12px #00000040;overflow:hidden}.frigg-modal__container--small{max-width:400px}.frigg-modal__container--large{max-width:800px}.frigg-modal__container--fullscreen{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}.frigg-modal__header{display:flex;align-items:center;justify-content:space-between;padding:20px 24px;border-bottom:1px solid #E5E7EB}.frigg-modal__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-modal__close{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:none;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-modal__close:hover{background:#f3f4f6;color:#374151}.frigg-modal__close svg{width:20px;height:20px}.frigg-modal__body{flex:1;padding:24px;overflow-y:auto}.frigg-modal__footer{padding:16px 24px;border-top:1px solid #E5E7EB;display:flex;justify-content:flex-end;gap:12px}@media (max-width: 640px){.frigg-modal{padding:0}.frigg-modal__container{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}}@media (prefers-color-scheme: dark){.frigg-modal__backdrop{background:#000c}.frigg-modal__container{background:#1f2937}.frigg-modal__header{border-bottom-color:#374151}.frigg-modal__title{color:#fff}.frigg-modal__close{color:#9ca3af}.frigg-modal__close:hover{background:#374151;color:#fff}.frigg-modal__footer{border-top-color:#374151}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('fadeIn', [\n                state('hidden', style({\n                    opacity: 0\n                })),\n                state('visible', style({\n                    opacity: 1\n                })),\n                transition('hidden => visible', [\n                    animate('200ms ease-out')\n                ]),\n                transition('visible => hidden', [\n                    animate('150ms ease-in')\n                ])\n            ]),\n            trigger('slideUp', [\n                state('hidden', style({\n                    transform: 'translateY(20px) scale(0.95)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'translateY(0) scale(1)',\n                    opacity: 1\n                })),\n                transition('hidden => visible', [\n                    animate('300ms cubic-bezier(0.16, 1, 0.3, 1)')\n                ]),\n                transition('visible => hidden', [\n                    animate('200ms cubic-bezier(0.7, 0, 0.84, 0)')\n                ])\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-modal', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-modal\"\n      [class.frigg-modal--open]=\"isOpen\"\n      [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      (click)=\"handleBackdropClick($event)\"\n    >\n      <div \n        class=\"frigg-modal__backdrop\"\n        [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      ></div>\n      \n      <div \n        class=\"frigg-modal__container\"\n        [class.frigg-modal__container--small]=\"size === 'small'\"\n        [class.frigg-modal__container--large]=\"size === 'large'\"\n        [class.frigg-modal__container--fullscreen]=\"size === 'fullscreen'\"\n        [@slideUp]=\"isOpen ? 'visible' : 'hidden'\"\n        #modalContent\n      >\n        <div class=\"frigg-modal__header\" *ngIf=\"title || showCloseButton\">\n          <h2 class=\"frigg-modal__title\" *ngIf=\"title\">{{ title }}</h2>\n          <button \n            *ngIf=\"showCloseButton\"\n            class=\"frigg-modal__close\"\n            (click)=\"handleClose()\"\n            aria-label=\"Close modal\"\n          >\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"frigg-modal__body\">\n          <ng-content></ng-content>\n        </div>\n        \n        <div class=\"frigg-modal__footer\" *ngIf=\"showFooter\">\n          <ng-content select=\"[modal-footer]\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `, animations: [\n                        trigger('fadeIn', [\n                            state('hidden', style({\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                opacity: 1\n                            })),\n                            transition('hidden => visible', [\n                                animate('200ms ease-out')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('150ms ease-in')\n                            ])\n                        ]),\n                        trigger('slideUp', [\n                            state('hidden', style({\n                                transform: 'translateY(20px) scale(0.95)',\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                transform: 'translateY(0) scale(1)',\n                                opacity: 1\n                            })),\n                            transition('hidden => visible', [\n                                animate('300ms cubic-bezier(0.16, 1, 0.3, 1)')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('200ms cubic-bezier(0.7, 0, 0.84, 0)')\n                            ])\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-modal{position:fixed;inset:0;z-index:10000;display:none;align-items:center;justify-content:center;padding:20px}.frigg-modal--open{display:flex}.frigg-modal__backdrop{position:absolute;inset:0;background:#00000080;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-modal__container{position:relative;max-width:600px;width:100%;max-height:90vh;display:flex;flex-direction:column;background:#fff;border-radius:12px;box-shadow:0 25px 50px -12px #00000040;overflow:hidden}.frigg-modal__container--small{max-width:400px}.frigg-modal__container--large{max-width:800px}.frigg-modal__container--fullscreen{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}.frigg-modal__header{display:flex;align-items:center;justify-content:space-between;padding:20px 24px;border-bottom:1px solid #E5E7EB}.frigg-modal__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-modal__close{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:none;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-modal__close:hover{background:#f3f4f6;color:#374151}.frigg-modal__close svg{width:20px;height:20px}.frigg-modal__body{flex:1;padding:24px;overflow-y:auto}.frigg-modal__footer{padding:16px 24px;border-top:1px solid #E5E7EB;display:flex;justify-content:flex-end;gap:12px}@media (max-width: 640px){.frigg-modal{padding:0}.frigg-modal__container{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}}@media (prefers-color-scheme: dark){.frigg-modal__backdrop{background:#000c}.frigg-modal__container{background:#1f2937}.frigg-modal__header{border-bottom-color:#374151}.frigg-modal__title{color:#fff}.frigg-modal__close{color:#9ca3af}.frigg-modal__close:hover{background:#374151;color:#fff}.frigg-modal__footer{border-top-color:#374151}}\\n\"] }]\n        }], propDecorators: { isOpen: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], showFooter: [{\n                type: Input\n            }], closeOnEscape: [{\n                type: Input\n            }], closeOnBackdrop: [{\n                type: Input\n            }], close: [{\n                type: Output\n            }], modalContent: [{\n                type: ViewChild,\n                args: ['modalContent', { static: false }]\n            }] } });","originalLength":28628,"removedExports":[],"renderedExports":["FriggModalComponent"],"renderedLength":12854},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/integration/integration-card.component.mjs":{"code":"/**\n * Angular Integration Card Component\n * Displays integration information in a card format\n */\nclass FriggIntegrationCardComponent {\n    constructor() {\n        this.showMetrics = true;\n        this.showActions = true;\n        this.clickable = false;\n        this.actionsDisabled = false;\n        this.click = new EventEmitter();\n        this.configure = new EventEmitter();\n        this.view = new EventEmitter();\n        this.sync = new EventEmitter();\n    }\n    handleClick() {\n        if (this.clickable) {\n            this.click.emit(this.integration);\n        }\n    }\n    handleConfigure(event) {\n        event.stopPropagation();\n        this.configure.emit(this.integration);\n    }\n    handleView(event) {\n        event.stopPropagation();\n        this.view.emit(this.integration);\n    }\n    handleSync(event) {\n        event.stopPropagation();\n        this.sync.emit(this.integration);\n    }\n    getStatusText(status) {\n        const statusMap = {\n            active: 'Active',\n            inactive: 'Inactive',\n            error: 'Error',\n            pending: 'Pending'\n        };\n        return statusMap[status] || status;\n    }\n    getRelativeTime(date) {\n        const now = new Date();\n        const diff = now.getTime() - new Date(date).getTime();\n        const minutes = Math.floor(diff / 60000);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0)\n            return `${days}d ago`;\n        if (hours > 0)\n            return `${hours}h ago`;\n        if (minutes > 0)\n            return `${minutes}m ago`;\n        return 'Just now';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggIntegrationCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggIntegrationCardComponent, isStandalone: true, selector: \"frigg-integration-card\", inputs: { integration: \"integration\", showMetrics: \"showMetrics\", showActions: \"showActions\", clickable: \"clickable\", actionsDisabled: \"actionsDisabled\" }, outputs: { click: \"click\", configure: \"configure\", view: \"view\", sync: \"sync\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-integration-card\"\n      [class.frigg-integration-card--active]=\"integration.status === 'active'\"\n      [class.frigg-integration-card--error]=\"integration.status === 'error'\"\n      [class.frigg-integration-card--clickable]=\"clickable\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-integration-card__header\">\n        <div class=\"frigg-integration-card__entities\">\n          <div \n            *ngFor=\"let entity of integration.entities; let i = index\"\n            class=\"frigg-integration-card__entity\"\n          >\n            <img \n              *ngIf=\"entity.icon\" \n              [src]=\"entity.icon\" \n              [alt]=\"entity.name\"\n              class=\"frigg-integration-card__entity-icon\"\n            >\n            <span class=\"frigg-integration-card__entity-name\">{{ entity.name }}</span>\n            <svg \n              *ngIf=\"i < integration.entities.length - 1\"\n              class=\"frigg-integration-card__arrow\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path fill-rule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n        \n        <div class=\"frigg-integration-card__status\">\n          <span \n            class=\"frigg-integration-card__status-badge\"\n            [class.frigg-integration-card__status-badge--active]=\"integration.status === 'active'\"\n            [class.frigg-integration-card__status-badge--error]=\"integration.status === 'error'\"\n            [class.frigg-integration-card__status-badge--pending]=\"integration.status === 'pending'\"\n          >\n            {{ getStatusText(integration.status) }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__content\">\n        <h3 class=\"frigg-integration-card__title\">{{ integration.name }}</h3>\n        <p class=\"frigg-integration-card__description\" *ngIf=\"integration.description\">\n          {{ integration.description }}\n        </p>\n      </div>\n\n      <div class=\"frigg-integration-card__metrics\" *ngIf=\"showMetrics && integration.metrics\">\n        <div class=\"frigg-integration-card__metric\">\n          <span class=\"frigg-integration-card__metric-label\">Synced Records</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ integration.metrics.syncedRecords || 0 | number }}\n          </span>\n        </div>\n        <div class=\"frigg-integration-card__metric\" *ngIf=\"integration.lastSync\">\n          <span class=\"frigg-integration-card__metric-label\">Last Sync</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ getRelativeTime(integration.lastSync) }}\n          </span>\n        </div>\n        <div \n          class=\"frigg-integration-card__metric\" \n          *ngIf=\"integration.metrics.errors && integration.metrics.errors > 0\"\n        >\n          <span class=\"frigg-integration-card__metric-label\">Errors</span>\n          <span class=\"frigg-integration-card__metric-value frigg-integration-card__metric-value--error\">\n            {{ integration.metrics.errors }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__actions\" *ngIf=\"showActions\">\n        <button \n          class=\"frigg-integration-card__action\"\n          (click)=\"handleConfigure($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Configure\n        </button>\n        <button \n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleView($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          View Details\n        </button>\n        <button \n          *ngIf=\"integration.status === 'active'\"\n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleSync($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Sync Now\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-integration-card{background:#fff;border:1px solid #E5E7EB;border-radius:12px;padding:20px;transition:all .2s ease}.frigg-integration-card--clickable{cursor:pointer}.frigg-integration-card--clickable:hover{border-color:#d1d5db;box-shadow:0 4px 6px -1px #0000001a,0 2px 4px -1px #0000000f}.frigg-integration-card--active{border-color:#10b981}.frigg-integration-card--error{border-color:#ef4444;background:#fef2f2}.frigg-integration-card__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.frigg-integration-card__entities{display:flex;align-items:center;gap:12px}.frigg-integration-card__entity{display:flex;align-items:center;gap:8px}.frigg-integration-card__entity-icon{width:24px;height:24px;border-radius:4px}.frigg-integration-card__entity-name{font-size:14px;font-weight:500;color:#374151}.frigg-integration-card__arrow{width:16px;height:16px;color:#9ca3af}.frigg-integration-card__status-badge{display:inline-flex;align-items:center;padding:4px 12px;border-radius:9999px;font-size:12px;font-weight:500;background:#f3f4f6;color:#6b7280}.frigg-integration-card__status-badge--active{background:#d1fae5;color:#065f46}.frigg-integration-card__status-badge--error{background:#fee2e2;color:#991b1b}.frigg-integration-card__status-badge--pending{background:#fef3c7;color:#92400e}.frigg-integration-card__content{margin-bottom:16px}.frigg-integration-card__title{font-size:16px;font-weight:600;color:#111827;margin:0 0 8px}.frigg-integration-card__description{font-size:14px;color:#6b7280;margin:0}.frigg-integration-card__metrics{display:flex;gap:24px;padding:16px 0;border-top:1px solid #E5E7EB;border-bottom:1px solid #E5E7EB;margin-bottom:16px}.frigg-integration-card__metric{display:flex;flex-direction:column;gap:4px}.frigg-integration-card__metric-label{font-size:12px;color:#6b7280}.frigg-integration-card__metric-value{font-size:16px;font-weight:600;color:#111827}.frigg-integration-card__metric-value--error{color:#ef4444}.frigg-integration-card__actions{display:flex;gap:12px}.frigg-integration-card__action{padding:8px 16px;border-radius:6px;font-size:14px;font-weight:500;cursor:pointer;transition:all .2s ease;background:#3b82f6;color:#fff;border:1px solid #3B82F6}.frigg-integration-card__action:hover{background:#2563eb;border-color:#2563eb}.frigg-integration-card__action:disabled{opacity:.5;cursor:not-allowed}.frigg-integration-card__action--secondary{background:#fff;color:#374151;border-color:#d1d5db}.frigg-integration-card__action--secondary:hover{background:#f9fafb;border-color:#9ca3af}@media (prefers-color-scheme: dark){.frigg-integration-card{background:#1f2937;border-color:#374151}.frigg-integration-card--error{background:#7f1d1d}.frigg-integration-card__entity-name{color:#d1d5db}.frigg-integration-card__title{color:#fff}.frigg-integration-card__description{color:#9ca3af}.frigg-integration-card__metrics{border-color:#374151}.frigg-integration-card__metric-label{color:#9ca3af}.frigg-integration-card__metric-value{color:#fff}.frigg-integration-card__action--secondary{background:#374151;color:#fff;border-color:#4b5563}.frigg-integration-card__action--secondary:hover{background:#4b5563;border-color:#6b7280}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: i1$1.DecimalPipe, name: \"number\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggIntegrationCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-integration-card', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-integration-card\"\n      [class.frigg-integration-card--active]=\"integration.status === 'active'\"\n      [class.frigg-integration-card--error]=\"integration.status === 'error'\"\n      [class.frigg-integration-card--clickable]=\"clickable\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-integration-card__header\">\n        <div class=\"frigg-integration-card__entities\">\n          <div \n            *ngFor=\"let entity of integration.entities; let i = index\"\n            class=\"frigg-integration-card__entity\"\n          >\n            <img \n              *ngIf=\"entity.icon\" \n              [src]=\"entity.icon\" \n              [alt]=\"entity.name\"\n              class=\"frigg-integration-card__entity-icon\"\n            >\n            <span class=\"frigg-integration-card__entity-name\">{{ entity.name }}</span>\n            <svg \n              *ngIf=\"i < integration.entities.length - 1\"\n              class=\"frigg-integration-card__arrow\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path fill-rule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n        \n        <div class=\"frigg-integration-card__status\">\n          <span \n            class=\"frigg-integration-card__status-badge\"\n            [class.frigg-integration-card__status-badge--active]=\"integration.status === 'active'\"\n            [class.frigg-integration-card__status-badge--error]=\"integration.status === 'error'\"\n            [class.frigg-integration-card__status-badge--pending]=\"integration.status === 'pending'\"\n          >\n            {{ getStatusText(integration.status) }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__content\">\n        <h3 class=\"frigg-integration-card__title\">{{ integration.name }}</h3>\n        <p class=\"frigg-integration-card__description\" *ngIf=\"integration.description\">\n          {{ integration.description }}\n        </p>\n      </div>\n\n      <div class=\"frigg-integration-card__metrics\" *ngIf=\"showMetrics && integration.metrics\">\n        <div class=\"frigg-integration-card__metric\">\n          <span class=\"frigg-integration-card__metric-label\">Synced Records</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ integration.metrics.syncedRecords || 0 | number }}\n          </span>\n        </div>\n        <div class=\"frigg-integration-card__metric\" *ngIf=\"integration.lastSync\">\n          <span class=\"frigg-integration-card__metric-label\">Last Sync</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ getRelativeTime(integration.lastSync) }}\n          </span>\n        </div>\n        <div \n          class=\"frigg-integration-card__metric\" \n          *ngIf=\"integration.metrics.errors && integration.metrics.errors > 0\"\n        >\n          <span class=\"frigg-integration-card__metric-label\">Errors</span>\n          <span class=\"frigg-integration-card__metric-value frigg-integration-card__metric-value--error\">\n            {{ integration.metrics.errors }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__actions\" *ngIf=\"showActions\">\n        <button \n          class=\"frigg-integration-card__action\"\n          (click)=\"handleConfigure($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Configure\n        </button>\n        <button \n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleView($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          View Details\n        </button>\n        <button \n          *ngIf=\"integration.status === 'active'\"\n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleSync($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Sync Now\n        </button>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-integration-card{background:#fff;border:1px solid #E5E7EB;border-radius:12px;padding:20px;transition:all .2s ease}.frigg-integration-card--clickable{cursor:pointer}.frigg-integration-card--clickable:hover{border-color:#d1d5db;box-shadow:0 4px 6px -1px #0000001a,0 2px 4px -1px #0000000f}.frigg-integration-card--active{border-color:#10b981}.frigg-integration-card--error{border-color:#ef4444;background:#fef2f2}.frigg-integration-card__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.frigg-integration-card__entities{display:flex;align-items:center;gap:12px}.frigg-integration-card__entity{display:flex;align-items:center;gap:8px}.frigg-integration-card__entity-icon{width:24px;height:24px;border-radius:4px}.frigg-integration-card__entity-name{font-size:14px;font-weight:500;color:#374151}.frigg-integration-card__arrow{width:16px;height:16px;color:#9ca3af}.frigg-integration-card__status-badge{display:inline-flex;align-items:center;padding:4px 12px;border-radius:9999px;font-size:12px;font-weight:500;background:#f3f4f6;color:#6b7280}.frigg-integration-card__status-badge--active{background:#d1fae5;color:#065f46}.frigg-integration-card__status-badge--error{background:#fee2e2;color:#991b1b}.frigg-integration-card__status-badge--pending{background:#fef3c7;color:#92400e}.frigg-integration-card__content{margin-bottom:16px}.frigg-integration-card__title{font-size:16px;font-weight:600;color:#111827;margin:0 0 8px}.frigg-integration-card__description{font-size:14px;color:#6b7280;margin:0}.frigg-integration-card__metrics{display:flex;gap:24px;padding:16px 0;border-top:1px solid #E5E7EB;border-bottom:1px solid #E5E7EB;margin-bottom:16px}.frigg-integration-card__metric{display:flex;flex-direction:column;gap:4px}.frigg-integration-card__metric-label{font-size:12px;color:#6b7280}.frigg-integration-card__metric-value{font-size:16px;font-weight:600;color:#111827}.frigg-integration-card__metric-value--error{color:#ef4444}.frigg-integration-card__actions{display:flex;gap:12px}.frigg-integration-card__action{padding:8px 16px;border-radius:6px;font-size:14px;font-weight:500;cursor:pointer;transition:all .2s ease;background:#3b82f6;color:#fff;border:1px solid #3B82F6}.frigg-integration-card__action:hover{background:#2563eb;border-color:#2563eb}.frigg-integration-card__action:disabled{opacity:.5;cursor:not-allowed}.frigg-integration-card__action--secondary{background:#fff;color:#374151;border-color:#d1d5db}.frigg-integration-card__action--secondary:hover{background:#f9fafb;border-color:#9ca3af}@media (prefers-color-scheme: dark){.frigg-integration-card{background:#1f2937;border-color:#374151}.frigg-integration-card--error{background:#7f1d1d}.frigg-integration-card__entity-name{color:#d1d5db}.frigg-integration-card__title{color:#fff}.frigg-integration-card__description{color:#9ca3af}.frigg-integration-card__metrics{border-color:#374151}.frigg-integration-card__metric-label{color:#9ca3af}.frigg-integration-card__metric-value{color:#fff}.frigg-integration-card__action--secondary{background:#374151;color:#fff;border-color:#4b5563}.frigg-integration-card__action--secondary:hover{background:#4b5563;border-color:#6b7280}}\\n\"] }]\n        }], propDecorators: { integration: [{\n                type: Input\n            }], showMetrics: [{\n                type: Input\n            }], showActions: [{\n                type: Input\n            }], clickable: [{\n                type: Input\n            }], actionsDisabled: [{\n                type: Input\n            }], click: [{\n                type: Output\n            }], configure: [{\n                type: Output\n            }], view: [{\n                type: Output\n            }], sync: [{\n                type: Output\n            }] } });","originalLength":37358,"removedExports":[],"renderedExports":["FriggIntegrationCardComponent"],"renderedLength":18129},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/alerts/alerts-panel.component.mjs":{"code":"/**\n * Angular Alerts Panel Component\n * Displays and manages integration alerts with real-time updates\n */\nclass FriggAlertsPanelComponent {\n    constructor(alertsService, cdr) {\n        this.alertsService = alertsService;\n        this.cdr = cdr;\n        this.limit = 20;\n        this.autoRefresh = true;\n        this.refreshInterval = 30000;\n        this.showLoadMore = true;\n        this.currentUserId = 'system';\n        this.alerts = [];\n        this.filteredAlerts = [];\n        this.loading = false;\n        this.hasMore = false;\n        this.activeFilter = 'All';\n        this.filters = ['All', 'Active', 'Critical', 'Acknowledged'];\n        this.destroy$ = new Subject();\n        this.offset = 0;\n    }\n    ngOnInit() {\n        // Subscribe to alerts\n        this.alertsService.alerts$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(alerts => {\n            this.alerts = alerts;\n            this.applyFilter();\n            this.cdr.markForCheck();\n        });\n        // Subscribe to loading state\n        this.alertsService.loading$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(loading => {\n            this.loading = loading;\n            this.cdr.markForCheck();\n        });\n        // Initial load\n        this.loadAlerts();\n        // Set up auto-refresh if enabled\n        if (this.autoRefresh) {\n            this.alertsService.setupAutoRefresh(this.integrationId, this.refreshInterval)\n                .pipe(takeUntil(this.destroy$))\n                .subscribe();\n        }\n        // Subscribe to real-time alerts\n        this.alertsService.subscribeToAlerts(this.integrationId)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe();\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    loadAlerts() {\n        this.alertsService.fetchAlerts(this.integrationId, {\n            limit: this.limit,\n            offset: this.offset\n        }).subscribe(alerts => {\n            this.hasMore = alerts.length === this.limit;\n        });\n    }\n    loadMore() {\n        this.offset += this.limit;\n        this.loadAlerts();\n    }\n    refresh() {\n        this.offset = 0;\n        this.alertsService.refresh();\n    }\n    setFilter(filter) {\n        this.activeFilter = filter;\n        this.applyFilter();\n    }\n    applyFilter() {\n        switch (this.activeFilter) {\n            case 'Active':\n                this.filteredAlerts = this.alerts.filter(a => a.status === 'active');\n                break;\n            case 'Critical':\n                this.filteredAlerts = this.alerts.filter(a => a.severity === 'critical');\n                break;\n            case 'Acknowledged':\n                this.filteredAlerts = this.alerts.filter(a => a.status === 'acknowledged');\n                break;\n            default:\n                this.filteredAlerts = this.alerts;\n        }\n    }\n    getFilterCount(filter) {\n        switch (filter) {\n            case 'Active':\n                return this.alerts.filter(a => a.status === 'active').length;\n            case 'Critical':\n                return this.alerts.filter(a => a.severity === 'critical').length;\n            case 'Acknowledged':\n                return this.alerts.filter(a => a.status === 'acknowledged').length;\n            default:\n                return this.alerts.length;\n        }\n    }\n    acknowledgeAlert(alert) {\n        this.alertsService.acknowledgeAlert(alert.id, this.currentUserId).subscribe();\n    }\n    resolveAlert(alert) {\n        const resolution = prompt('Enter resolution details:');\n        if (resolution) {\n            this.alertsService.resolveAlert(alert.id, this.currentUserId, resolution).subscribe();\n        }\n    }\n    trackByAlertId(index, alert) {\n        return alert.id;\n    }\n    getRelativeTime(timestamp) {\n        const now = new Date();\n        const alertTime = new Date(timestamp);\n        const diff = now.getTime() - alertTime.getTime();\n        const minutes = Math.floor(diff / 60000);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0)\n            return `${days}d ago`;\n        if (hours > 0)\n            return `${hours}h ago`;\n        if (minutes > 0)\n            return `${minutes}m ago`;\n        return 'Just now';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggAlertsPanelComponent, deps: [{ token: AlertsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggAlertsPanelComponent, isStandalone: true, selector: \"frigg-alerts-panel\", inputs: { integrationId: \"integrationId\", limit: \"limit\", autoRefresh: \"autoRefresh\", refreshInterval: \"refreshInterval\", showLoadMore: \"showLoadMore\", currentUserId: \"currentUserId\" }, ngImport: i0, template: `\n    <div class=\"frigg-alerts-panel\">\n      <div class=\"frigg-alerts-panel__header\">\n        <h2 class=\"frigg-alerts-panel__title\">Alerts</h2>\n        <div class=\"frigg-alerts-panel__actions\">\n          <button \n            class=\"frigg-alerts-panel__filter\"\n            [class.frigg-alerts-panel__filter--active]=\"activeFilter === filter\"\n            *ngFor=\"let filter of filters\"\n            (click)=\"setFilter(filter)\"\n          >\n            {{ filter }}\n            <span class=\"frigg-alerts-panel__filter-count\" *ngIf=\"getFilterCount(filter) > 0\">\n              {{ getFilterCount(filter) }}\n            </span>\n          </button>\n          <button \n            class=\"frigg-alerts-panel__refresh\"\n            (click)=\"refresh()\"\n            [disabled]=\"loading\"\n          >\n            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__content\">\n        <frigg-loading-spinner \n          *ngIf=\"loading && !alerts.length\"\n          [text]=\"'Loading alerts...'\"\n        ></frigg-loading-spinner>\n\n        <div \n          class=\"frigg-alerts-panel__empty\" \n          *ngIf=\"!loading && filteredAlerts.length === 0\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n          </svg>\n          <p>No alerts found</p>\n        </div>\n\n        <div class=\"frigg-alerts-panel__list\" *ngIf=\"filteredAlerts.length > 0\">\n          <div \n            *ngFor=\"let alert of filteredAlerts; trackBy: trackByAlertId\"\n            class=\"frigg-alerts-panel__alert\"\n            [class.frigg-alerts-panel__alert--critical]=\"alert.severity === 'critical'\"\n            [class.frigg-alerts-panel__alert--high]=\"alert.severity === 'high'\"\n            [class.frigg-alerts-panel__alert--medium]=\"alert.severity === 'medium'\"\n            [class.frigg-alerts-panel__alert--low]=\"alert.severity === 'low'\"\n            [class.frigg-alerts-panel__alert--acknowledged]=\"alert.status === 'acknowledged'\"\n          >\n            <div class=\"frigg-alerts-panel__alert-icon\">\n              <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            \n            <div class=\"frigg-alerts-panel__alert-content\">\n              <h3 class=\"frigg-alerts-panel__alert-title\">{{ alert.title }}</h3>\n              <p class=\"frigg-alerts-panel__alert-description\">{{ alert.description }}</p>\n              <div class=\"frigg-alerts-panel__alert-meta\">\n                <span class=\"frigg-alerts-panel__alert-time\">\n                  {{ getRelativeTime(alert.timestamp) }}\n                </span>\n                <span class=\"frigg-alerts-panel__alert-severity\">\n                  {{ alert.severity }}\n                </span>\n              </div>\n            </div>\n\n            <div class=\"frigg-alerts-panel__alert-actions\">\n              <button \n                *ngIf=\"alert.status === 'active'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"acknowledgeAlert(alert)\"\n                title=\"Acknowledge\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n              <button \n                *ngIf=\"alert.status !== 'resolved'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"resolveAlert(alert)\"\n                title=\"Resolve\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__footer\" *ngIf=\"showLoadMore && hasMore\">\n        <button \n          class=\"frigg-alerts-panel__load-more\"\n          (click)=\"loadMore()\"\n          [disabled]=\"loading\"\n        >\n          Load More\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-alerts-panel{background:#fff;border:1px solid #E5E7EB;border-radius:12px;overflow:hidden}.frigg-alerts-panel__header{display:flex;justify-content:space-between;align-items:center;padding:16px 20px;border-bottom:1px solid #E5E7EB}.frigg-alerts-panel__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-alerts-panel__actions{display:flex;gap:8px}.frigg-alerts-panel__filter{display:flex;align-items:center;gap:4px;padding:6px 12px;background:transparent;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__filter:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__filter--active{background:#3b82f6;border-color:#3b82f6;color:#fff}.frigg-alerts-panel__filter-count{padding:2px 6px;background:#0000001a;border-radius:9999px;font-size:12px;font-weight:500}.frigg-alerts-panel__refresh{display:flex;align-items:center;justify-content:center;width:36px;height:36px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__refresh:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__refresh:disabled{opacity:.5;cursor:not-allowed}.frigg-alerts-panel__refresh svg{width:20px;height:20px}.frigg-alerts-panel__content{min-height:200px;max-height:600px;overflow-y:auto}.frigg-alerts-panel__empty{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:60px 20px;color:#9ca3af}.frigg-alerts-panel__empty svg{width:48px;height:48px;margin-bottom:16px}.frigg-alerts-panel__list{padding:0}.frigg-alerts-panel__alert{display:flex;gap:16px;padding:16px 20px;border-bottom:1px solid #E5E7EB;transition:background .2s ease}.frigg-alerts-panel__alert:hover{background:#f9fafb}.frigg-alerts-panel__alert:last-child{border-bottom:none}.frigg-alerts-panel__alert--acknowledged{opacity:.7}.frigg-alerts-panel__alert-icon{flex-shrink:0;width:40px;height:40px;display:flex;align-items:center;justify-content:center;border-radius:8px;background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--critical .frigg-alerts-panel__alert-icon{background:#fee2e2;color:#dc2626}.frigg-alerts-panel__alert--high .frigg-alerts-panel__alert-icon{background:#ffedd5;color:#ea580c}.frigg-alerts-panel__alert--medium .frigg-alerts-panel__alert-icon{background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--low .frigg-alerts-panel__alert-icon{background:#dbeafe;color:#2563eb}.frigg-alerts-panel__alert-icon svg{width:20px;height:20px}.frigg-alerts-panel__alert-content{flex:1;min-width:0}.frigg-alerts-panel__alert-title{font-size:14px;font-weight:600;color:#111827;margin:0 0 4px}.frigg-alerts-panel__alert-description{font-size:14px;color:#6b7280;margin:0 0 8px}.frigg-alerts-panel__alert-meta{display:flex;gap:16px;font-size:12px;color:#9ca3af}.frigg-alerts-panel__alert-severity{text-transform:uppercase;font-weight:500}.frigg-alerts-panel__alert-actions{display:flex;gap:8px;align-items:center}.frigg-alerts-panel__alert-action{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__alert-action:hover{background:#fff;border-color:#d1d5db;color:#374151}.frigg-alerts-panel__alert-action svg{width:16px;height:16px}.frigg-alerts-panel__footer{padding:16px 20px;border-top:1px solid #E5E7EB;text-align:center}.frigg-alerts-panel__load-more{padding:8px 24px;background:#fff;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__load-more:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__load-more:disabled{opacity:.5;cursor:not-allowed}@media (prefers-color-scheme: dark){.frigg-alerts-panel{background:#1f2937;border-color:#374151}.frigg-alerts-panel__header{border-color:#374151}.frigg-alerts-panel__title{color:#fff}.frigg-alerts-panel__filter{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__filter:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__refresh{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__refresh:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__alert{border-color:#374151}.frigg-alerts-panel__alert:hover{background:#374151}.frigg-alerts-panel__alert-title{color:#fff}.frigg-alerts-panel__alert-description{color:#d1d5db}.frigg-alerts-panel__alert-action{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__alert-action:hover{background:#4b5563;border-color:#6b7280;color:#fff}.frigg-alerts-panel__footer{border-color:#374151}.frigg-alerts-panel__load-more{background:#374151;border-color:#4b5563;color:#fff}.frigg-alerts-panel__load-more:hover{background:#4b5563;border-color:#6b7280}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: FriggLoadingSpinnerComponent, selector: \"frigg-loading-spinner\", inputs: [\"size\", \"text\", \"inline\", \"overlay\", \"label\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggAlertsPanelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-alerts-panel', standalone: true, imports: [CommonModule, FriggLoadingSpinnerComponent], template: `\n    <div class=\"frigg-alerts-panel\">\n      <div class=\"frigg-alerts-panel__header\">\n        <h2 class=\"frigg-alerts-panel__title\">Alerts</h2>\n        <div class=\"frigg-alerts-panel__actions\">\n          <button \n            class=\"frigg-alerts-panel__filter\"\n            [class.frigg-alerts-panel__filter--active]=\"activeFilter === filter\"\n            *ngFor=\"let filter of filters\"\n            (click)=\"setFilter(filter)\"\n          >\n            {{ filter }}\n            <span class=\"frigg-alerts-panel__filter-count\" *ngIf=\"getFilterCount(filter) > 0\">\n              {{ getFilterCount(filter) }}\n            </span>\n          </button>\n          <button \n            class=\"frigg-alerts-panel__refresh\"\n            (click)=\"refresh()\"\n            [disabled]=\"loading\"\n          >\n            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__content\">\n        <frigg-loading-spinner \n          *ngIf=\"loading && !alerts.length\"\n          [text]=\"'Loading alerts...'\"\n        ></frigg-loading-spinner>\n\n        <div \n          class=\"frigg-alerts-panel__empty\" \n          *ngIf=\"!loading && filteredAlerts.length === 0\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n          </svg>\n          <p>No alerts found</p>\n        </div>\n\n        <div class=\"frigg-alerts-panel__list\" *ngIf=\"filteredAlerts.length > 0\">\n          <div \n            *ngFor=\"let alert of filteredAlerts; trackBy: trackByAlertId\"\n            class=\"frigg-alerts-panel__alert\"\n            [class.frigg-alerts-panel__alert--critical]=\"alert.severity === 'critical'\"\n            [class.frigg-alerts-panel__alert--high]=\"alert.severity === 'high'\"\n            [class.frigg-alerts-panel__alert--medium]=\"alert.severity === 'medium'\"\n            [class.frigg-alerts-panel__alert--low]=\"alert.severity === 'low'\"\n            [class.frigg-alerts-panel__alert--acknowledged]=\"alert.status === 'acknowledged'\"\n          >\n            <div class=\"frigg-alerts-panel__alert-icon\">\n              <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            \n            <div class=\"frigg-alerts-panel__alert-content\">\n              <h3 class=\"frigg-alerts-panel__alert-title\">{{ alert.title }}</h3>\n              <p class=\"frigg-alerts-panel__alert-description\">{{ alert.description }}</p>\n              <div class=\"frigg-alerts-panel__alert-meta\">\n                <span class=\"frigg-alerts-panel__alert-time\">\n                  {{ getRelativeTime(alert.timestamp) }}\n                </span>\n                <span class=\"frigg-alerts-panel__alert-severity\">\n                  {{ alert.severity }}\n                </span>\n              </div>\n            </div>\n\n            <div class=\"frigg-alerts-panel__alert-actions\">\n              <button \n                *ngIf=\"alert.status === 'active'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"acknowledgeAlert(alert)\"\n                title=\"Acknowledge\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n              <button \n                *ngIf=\"alert.status !== 'resolved'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"resolveAlert(alert)\"\n                title=\"Resolve\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__footer\" *ngIf=\"showLoadMore && hasMore\">\n        <button \n          class=\"frigg-alerts-panel__load-more\"\n          (click)=\"loadMore()\"\n          [disabled]=\"loading\"\n        >\n          Load More\n        </button>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-alerts-panel{background:#fff;border:1px solid #E5E7EB;border-radius:12px;overflow:hidden}.frigg-alerts-panel__header{display:flex;justify-content:space-between;align-items:center;padding:16px 20px;border-bottom:1px solid #E5E7EB}.frigg-alerts-panel__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-alerts-panel__actions{display:flex;gap:8px}.frigg-alerts-panel__filter{display:flex;align-items:center;gap:4px;padding:6px 12px;background:transparent;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__filter:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__filter--active{background:#3b82f6;border-color:#3b82f6;color:#fff}.frigg-alerts-panel__filter-count{padding:2px 6px;background:#0000001a;border-radius:9999px;font-size:12px;font-weight:500}.frigg-alerts-panel__refresh{display:flex;align-items:center;justify-content:center;width:36px;height:36px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__refresh:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__refresh:disabled{opacity:.5;cursor:not-allowed}.frigg-alerts-panel__refresh svg{width:20px;height:20px}.frigg-alerts-panel__content{min-height:200px;max-height:600px;overflow-y:auto}.frigg-alerts-panel__empty{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:60px 20px;color:#9ca3af}.frigg-alerts-panel__empty svg{width:48px;height:48px;margin-bottom:16px}.frigg-alerts-panel__list{padding:0}.frigg-alerts-panel__alert{display:flex;gap:16px;padding:16px 20px;border-bottom:1px solid #E5E7EB;transition:background .2s ease}.frigg-alerts-panel__alert:hover{background:#f9fafb}.frigg-alerts-panel__alert:last-child{border-bottom:none}.frigg-alerts-panel__alert--acknowledged{opacity:.7}.frigg-alerts-panel__alert-icon{flex-shrink:0;width:40px;height:40px;display:flex;align-items:center;justify-content:center;border-radius:8px;background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--critical .frigg-alerts-panel__alert-icon{background:#fee2e2;color:#dc2626}.frigg-alerts-panel__alert--high .frigg-alerts-panel__alert-icon{background:#ffedd5;color:#ea580c}.frigg-alerts-panel__alert--medium .frigg-alerts-panel__alert-icon{background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--low .frigg-alerts-panel__alert-icon{background:#dbeafe;color:#2563eb}.frigg-alerts-panel__alert-icon svg{width:20px;height:20px}.frigg-alerts-panel__alert-content{flex:1;min-width:0}.frigg-alerts-panel__alert-title{font-size:14px;font-weight:600;color:#111827;margin:0 0 4px}.frigg-alerts-panel__alert-description{font-size:14px;color:#6b7280;margin:0 0 8px}.frigg-alerts-panel__alert-meta{display:flex;gap:16px;font-size:12px;color:#9ca3af}.frigg-alerts-panel__alert-severity{text-transform:uppercase;font-weight:500}.frigg-alerts-panel__alert-actions{display:flex;gap:8px;align-items:center}.frigg-alerts-panel__alert-action{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__alert-action:hover{background:#fff;border-color:#d1d5db;color:#374151}.frigg-alerts-panel__alert-action svg{width:16px;height:16px}.frigg-alerts-panel__footer{padding:16px 20px;border-top:1px solid #E5E7EB;text-align:center}.frigg-alerts-panel__load-more{padding:8px 24px;background:#fff;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__load-more:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__load-more:disabled{opacity:.5;cursor:not-allowed}@media (prefers-color-scheme: dark){.frigg-alerts-panel{background:#1f2937;border-color:#374151}.frigg-alerts-panel__header{border-color:#374151}.frigg-alerts-panel__title{color:#fff}.frigg-alerts-panel__filter{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__filter:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__refresh{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__refresh:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__alert{border-color:#374151}.frigg-alerts-panel__alert:hover{background:#374151}.frigg-alerts-panel__alert-title{color:#fff}.frigg-alerts-panel__alert-description{color:#d1d5db}.frigg-alerts-panel__alert-action{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__alert-action:hover{background:#4b5563;border-color:#6b7280;color:#fff}.frigg-alerts-panel__footer{border-color:#374151}.frigg-alerts-panel__load-more{background:#374151;border-color:#4b5563;color:#fff}.frigg-alerts-panel__load-more:hover{background:#4b5563;border-color:#6b7280}}\\n\"] }]\n        }], ctorParameters: () => [{ type: AlertsService }, { type: i0.ChangeDetectorRef }], propDecorators: { integrationId: [{\n                type: Input\n            }], limit: [{\n                type: Input\n            }], autoRefresh: [{\n                type: Input\n            }], refreshInterval: [{\n                type: Input\n            }], showLoadMore: [{\n                type: Input\n            }], currentUserId: [{\n                type: Input\n            }] } });","originalLength":56599,"removedExports":[],"renderedExports":["FriggAlertsPanelComponent"],"renderedLength":25954},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/plugins/angular-plugin.mjs":{"code":"/**\n * Angular plugin adapter for @friggframework/ui-core\n * Implements FrameworkPlugin interface for Angular-specific functionality\n */\n/**\n * Angular-specific adapter for framework integration\n */\nclass AngularAdapter extends FrameworkAdapter {\n    constructor(injector, ngZone) {\n        super('angular');\n        this.injector = injector;\n        this.ngZone = ngZone;\n    }\n    // Angular reactive state management using RxJS\n    createState(initialState) {\n        return new BehaviorSubject(initialState);\n    }\n    // Angular effect using RxJS subscriptions\n    createEffect(callback, dependencies) {\n        if (dependencies && dependencies.length > 0) {\n            // Combine dependencies and subscribe\n            const subscription = dependencies[0].subscribe(() => {\n                this.ngZone.run(() => callback());\n            });\n            return () => subscription.unsubscribe();\n        }\n        // Run immediately in Angular zone\n        this.ngZone.run(() => callback());\n        return () => { };\n    }\n    // Angular component creation helper\n    createElement(type, props = {}, children = []) {\n        return {\n            type,\n            props,\n            children,\n            framework: 'angular'\n        };\n    }\n    // Angular event binding\n    bindEvent(element, event, handler) {\n        if (element && element.addEventListener) {\n            // Run event handler in Angular zone\n            const wrappedHandler = (e) => {\n                this.ngZone.run(() => handler(e));\n            };\n            element.addEventListener(event, wrappedHandler);\n            return () => element.removeEventListener(event, wrappedHandler);\n        }\n        return () => { };\n    }\n    // Angular-specific computed values using RxJS\n    createComputed(getter, dependencies = []) {\n        if (dependencies.length === 0) {\n            return of(getter()).pipe(shareReplay(1));\n        }\n        // Create derived observable\n        return dependencies[0].pipe(map(() => getter()), distinctUntilChanged(), shareReplay(1));\n    }\n    // Angular change detection trigger\n    detectChanges() {\n        const appRef = this.injector.get(ApplicationRef);\n        appRef.tick();\n    }\n    // Create Angular-compatible Subject\n    createSubject() {\n        return new Subject();\n    }\n    // Run code outside Angular zone (for performance)\n    runOutsideAngular(fn) {\n        return this.ngZone.runOutsideAngular(fn);\n    }\n    // Run code inside Angular zone\n    runInAngular(fn) {\n        return this.ngZone.run(fn);\n    }\n}\n/**\n * Angular Framework Plugin for ui-core\n */\nclass AngularPlugin extends FrameworkPlugin {\n    constructor(injector, ngZone) {\n        super('angular', '17.x');\n        this.injector = injector;\n        this.ngZone = ngZone;\n    }\n    // Initialize the plugin\n    initialize() {\n        this.adapter = new AngularAdapter(this.injector, this.ngZone);\n        this.setupHooks();\n        this.setupAdapters();\n    }\n    setupHooks() {\n        // State management hook using RxJS\n        this.registerHook(HOOKS.STATE_MANAGER, (initialState) => {\n            return this.adapter.createState(initialState);\n        });\n        // Effect management hook using Angular zones\n        this.registerHook(HOOKS.EFFECT_MANAGER, (callback, dependencies) => {\n            return this.adapter.createEffect(callback, dependencies);\n        });\n        // Event management hook\n        this.registerHook(HOOKS.EVENT_MANAGER, (element, event, handler) => {\n            return this.adapter.bindEvent(element, event, handler);\n        });\n        // Component renderer hook for dynamic components\n        this.registerHook(HOOKS.COMPONENT_RENDERER, (type, props, children) => {\n            return this.adapter.createElement(type, props, children);\n        });\n        // HTTP client hook - delegate to Angular HttpClient via services\n        this.registerHook(HOOKS.HTTP_CLIENT, (config) => {\n            // This will be handled by Angular's HttpClient service\n            return null;\n        });\n    }\n    setupAdapters() {\n        // State adapter for RxJS observables\n        this.registerAdapter(ADAPTERS.STATE, {\n            create: (initialState) => this.adapter.createState(initialState),\n            behaviorSubject: (value) => new BehaviorSubject(value),\n            subject: () => new Subject(),\n            observable: (value) => of(value),\n            from: (promise) => from(promise),\n            // Helper to convert observable to signal (for Angular 16+)\n            toSignal: (observable) => {\n                // This would use Angular's toSignal function if available\n                return observable;\n            }\n        });\n        // Effects adapter for Angular lifecycle\n        this.registerAdapter(ADAPTERS.EFFECTS, {\n            // Run effect in Angular zone\n            effect: (callback, dependencies) => this.adapter.createEffect(callback, dependencies),\n            // Run outside Angular for performance\n            runOutsideAngular: (fn) => this.adapter.runOutsideAngular(fn),\n            // Trigger change detection\n            detectChanges: () => this.adapter.detectChanges(),\n            // Subscribe to observable\n            subscribe: (observable, callback) => {\n                const subscription = observable.subscribe(value => {\n                    this.ngZone.run(() => callback(value));\n                });\n                return () => subscription.unsubscribe();\n            }\n        });\n        // Events adapter\n        this.registerAdapter(ADAPTERS.EVENTS, {\n            bind: (element, event, handler) => this.adapter.bindEvent(element, event, handler),\n            emit: (subject, value) => {\n                this.ngZone.run(() => subject.next(value));\n            },\n            // Create custom event emitter\n            createEmitter: () => new Subject()\n        });\n        // Angular-specific dependency injection adapter\n        this.registerAdapter('injection', {\n            get: (token) => this.injector.get(token),\n            has: (token) => {\n                try {\n                    this.injector.get(token);\n                    return true;\n                }\n                catch {\n                    return false;\n                }\n            },\n            create: (token, options) => {\n                // Use injector to create instance\n                return this.injector.get(token, options);\n            }\n        });\n        // RxJS operators adapter\n        this.registerAdapter('rxjs', {\n            operators: {\n                map,\n                distinctUntilChanged,\n                shareReplay,\n                // Add more operators as needed\n            },\n            // Helper to create pipeable operators\n            pipe: (...operators) => (source) => source.pipe(...operators)\n        });\n    }\n    // Angular-specific initialization\n    init(core) {\n        // Store reference to ui-core instance\n        this.core = core;\n        // Set up Angular-specific components\n        this.setupComponents();\n        console.log('Angular plugin initialized with ui-core');\n    }\n    setupComponents() {\n        // Register Angular component references\n        // These will be implemented as actual Angular components\n        this.registerComponent(COMPONENTS$1.TOAST, 'FriggToastComponent');\n        this.registerComponent(COMPONENTS$1.MODAL, 'FriggModalComponent');\n        this.registerComponent(COMPONENTS$1.LOADING_SPINNER, 'FriggLoadingSpinnerComponent');\n        this.registerComponent(COMPONENTS$1.BUTTON, 'FriggButtonComponent');\n        this.registerComponent(COMPONENTS$1.INPUT, 'FriggInputComponent');\n        this.registerComponent(COMPONENTS$1.TABLE, 'FriggTableComponent');\n        this.registerComponent(COMPONENTS$1.FORM, 'FriggFormComponent');\n    }\n    // Angular-specific cleanup\n    destroy(core) {\n        console.log('Angular plugin destroyed');\n    }\n    // Get Angular adapter\n    getAngularAdapter() {\n        if (!this.adapter) {\n            this.initialize();\n        }\n        return this.adapter;\n    }\n    // Helper to create Observable from ui-core service\n    createObservableFromService(service, transformFn) {\n        const subject = new BehaviorSubject(transformFn ? transformFn(service.getState()) : service.getState());\n        // Subscribe to service updates\n        const unsubscribe = service.subscribe((state) => {\n            this.ngZone.run(() => {\n                subject.next(transformFn ? transformFn(state) : state);\n            });\n        });\n        // Return observable with cleanup\n        return new Observable(observer => {\n            const subscription = subject.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                unsubscribe();\n            };\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, deps: [{ token: i0.Injector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: i0.NgZone }] });\n// Export factory function for Angular module\nfunction createAngularPlugin(injector, ngZone) {\n    const plugin = new AngularPlugin(injector, ngZone);\n    plugin.initialize();\n    return plugin;\n}","originalLength":33433,"removedExports":[],"renderedExports":["AngularAdapter","AngularPlugin","createAngularPlugin"],"renderedLength":9680},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/services/index.mjs":{"code":"/**\n * Angular services for @friggframework/ui-angular\n * Export all services for easy import\n */","originalLength":928,"removedExports":[],"renderedExports":[],"renderedLength":97},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/components/index.mjs":{"code":"/**\n * Angular components for @friggframework/ui-angular\n * Export all components for easy import\n */\n// Toast components","originalLength":1729,"removedExports":[],"renderedExports":[],"renderedLength":121},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/lib/frigg-ui.module.mjs":{"code":"/**\n * Angular Module for Frigg UI\n * Provides all components and services in a single module\n */\nconst FRIGG_UI_CONFIG = new InjectionToken('FRIGG_UI_CONFIG');\n// All components that should be exported\nconst COMPONENTS = [\n    FriggToastComponent,\n    FriggToastContainerComponent,\n    FriggLoadingSpinnerComponent,\n    FriggModalComponent,\n    FriggIntegrationCardComponent,\n    FriggAlertsPanelComponent\n];\nclass FriggUiModule {\n    /**\n     * Configure the module with providers\n     */\n    static forRoot(config) {\n        return {\n            ngModule: FriggUiModule,\n            providers: [\n                {\n                    provide: FRIGG_UI_CONFIG,\n                    useValue: config || {}\n                },\n                ToastService,\n                ApiService,\n                AlertsService,\n                CloudWatchService,\n                {\n                    provide: AngularPlugin,\n                    useFactory: createAngularPlugin,\n                    deps: ['$injector', 'ngZone']\n                }\n            ]\n        };\n    }\n    /**\n     * Import module without providers (for feature modules)\n     */\n    static forChild() {\n        return {\n            ngModule: FriggUiModule,\n            providers: []\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, imports: [CommonModule,\n            HttpClientModule, FriggToastComponent,\n            FriggToastContainerComponent,\n            FriggLoadingSpinnerComponent,\n            FriggModalComponent,\n            FriggIntegrationCardComponent,\n            FriggAlertsPanelComponent], exports: [FriggToastComponent,\n            FriggToastContainerComponent,\n            FriggLoadingSpinnerComponent,\n            FriggModalComponent,\n            FriggIntegrationCardComponent,\n            FriggAlertsPanelComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, imports: [CommonModule,\n            HttpClientModule, COMPONENTS // Import standalone components\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        CommonModule,\n                        HttpClientModule,\n                        ...COMPONENTS // Import standalone components\n                    ],\n                    exports: [\n                        ...COMPONENTS // Export all components\n                    ]\n                }]\n        }] });","originalLength":8952,"removedExports":[],"renderedExports":["FRIGG_UI_CONFIG","FriggUiModule"],"renderedLength":2881},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/lib/providers.mjs":{"code":"/**\n * Angular providers for standalone usage\n * Provides configuration for applications using standalone components\n */\nconst FRIGG_PROVIDER_CONFIG = new InjectionToken('FRIGG_PROVIDER_CONFIG');\n/**\n * Factory function to initialize ApiService with configuration\n */\nfunction apiServiceFactory(http, config) {\n    const service = new ApiService(http);\n    if (config.apiBaseUrl) {\n        service.setBaseUrl(config.apiBaseUrl);\n    }\n    if (config.authToken) {\n        service.setAuthToken(config.authToken);\n    }\n    return service;\n}\n/**\n * Provide Frigg UI services for standalone components\n */\nfunction provideFriggUi(config) {\n    return makeEnvironmentProviders([\n        {\n            provide: FRIGG_PROVIDER_CONFIG,\n            useValue: config || {}\n        },\n        ToastService,\n        {\n            provide: ApiService,\n            useFactory: apiServiceFactory,\n            deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n        },\n        AlertsService,\n        CloudWatchService,\n        {\n            provide: AngularPlugin,\n            useFactory: createAngularPlugin,\n            deps: ['$injector', 'ngZone']\n        }\n    ]);\n}\n/**\n * Individual service providers for selective imports\n */\nconst TOAST_PROVIDERS = [\n    ToastService\n];\nconst API_PROVIDERS = [\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\nconst ALERTS_PROVIDERS = [\n    AlertsService,\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\nconst CLOUDWATCH_PROVIDERS = [\n    CloudWatchService,\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\n/**\n * Helper function to configure API service in application\n */\nfunction configureFriggApi(baseUrl, authToken) {\n    return [\n        {\n            provide: FRIGG_PROVIDER_CONFIG,\n            useValue: { apiBaseUrl: baseUrl, authToken }\n        },\n        {\n            provide: ApiService,\n            useFactory: apiServiceFactory,\n            deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n        }\n    ];\n}","originalLength":9054,"removedExports":[],"renderedExports":["FRIGG_PROVIDER_CONFIG","apiServiceFactory","provideFriggUi","TOAST_PROVIDERS","API_PROVIDERS","ALERTS_PROVIDERS","CLOUDWATCH_PROVIDERS","configureFriggApi"],"renderedLength":2190},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/public-api.mjs":{"code":"/**\n * Public API Surface of @friggframework/ui-angular\n * This file defines all exports for the Angular package\n */\n// Services","originalLength":3891,"removedExports":[],"renderedExports":[],"renderedLength":128},"/Users/sean/Documents/GitHub/frigg/packages/ui/angular/dist/esm2022/friggframework-ui-angular.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":504,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Output, Input, ChangeDetectionStrategy, Component, ViewChild, ApplicationRef, InjectionToken, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { BehaviorSubject, Subject, throwError, from, Observable, merge, interval, combineLatest, timer, of } from 'rxjs';\nimport { map, distinctUntilChanged, tap, catchError, shareReplay, startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { ToastManager, ApiClient, AlertsService as AlertsService$1, CloudWatchService as CloudWatchService$1, FrameworkAdapter, FrameworkPlugin, HOOKS, ADAPTERS, COMPONENTS as COMPONENTS$1 } from '@friggframework/ui-core';\nexport { AlertsService as CoreAlertsService, CloudWatchService as CoreCloudWatchService, ToastManager } from '@friggframework/ui-core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpClientModule, HttpClient } from '@angular/common/http';\nimport { trigger, state, transition, style, animate } from '@angular/animations';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Angular Toast Service\n * Wraps ui-core ToastManager with RxJS observables for Angular integration\n */\nclass ToastService {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n        // Initialize toast manager\n        this.toastManager = new ToastManager();\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(this.toastManager.getState());\n        this.toastAddedSubject = new Subject();\n        this.toastRemovedSubject = new Subject();\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.toasts$ = this.state$.pipe(map(state => state.toasts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.toastAdded$ = this.toastAddedSubject.asObservable();\n        this.toastRemoved$ = this.toastRemovedSubject.asObservable();\n        this.activeToastCount$ = this.toasts$.pipe(map(toasts => toasts.filter(t => t.open).length), distinctUntilChanged());\n        // Subscribe to toast manager updates\n        this.setupSubscription();\n    }\n    setupSubscription() {\n        // Track previous state for comparison\n        let previousToasts = this.toastManager.getState().toasts;\n        this.unsubscribe = this.toastManager.subscribe((state) => {\n            this.ngZone.run(() => {\n                // Detect added toasts\n                const currentToasts = state.toasts;\n                const addedToasts = currentToasts.filter(current => !previousToasts.find((prev) => prev.id === current.id));\n                // Detect removed toasts\n                const removedToasts = previousToasts.filter((prev) => !currentToasts.find(current => current.id === prev.id));\n                // Emit events\n                addedToasts.forEach(toast => this.toastAddedSubject.next(toast));\n                removedToasts.forEach((toast) => this.toastRemovedSubject.next(toast.id));\n                // Update state\n                this.stateSubject.next(state);\n                previousToasts = currentToasts;\n            });\n        });\n    }\n    /**\n     * Show a toast notification\n     */\n    show(options) {\n        const toastResult = this.toastManager.toast({\n            ...options,\n            variant: options.variant || 'default',\n            duration: options.duration || 5000\n        });\n        return {\n            ...options,\n            id: toastResult.id,\n            dismiss: () => this.dismiss(toastResult.id),\n            update: (props) => this.update(toastResult.id, props)\n        };\n    }\n    /**\n     * Show success toast\n     */\n    success(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'success'\n        });\n    }\n    /**\n     * Show error toast\n     */\n    error(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'error',\n            duration: options?.duration || 7000 // Errors stay longer\n        });\n    }\n    /**\n     * Show warning toast\n     */\n    warning(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'warning'\n        });\n    }\n    /**\n     * Show info toast\n     */\n    info(title, description, options) {\n        return this.show({\n            ...options,\n            title,\n            description,\n            variant: 'info'\n        });\n    }\n    /**\n     * Show loading toast with promise\n     */\n    async promise(promise, messages) {\n        const toast = this.show({\n            title: messages.loading,\n            variant: 'default'\n        });\n        try {\n            const result = await promise;\n            this.update(toast.id, {\n                title: typeof messages.success === 'function'\n                    ? messages.success(result)\n                    : messages.success,\n                variant: 'success'\n            });\n            setTimeout(() => this.dismiss(toast.id), 3000);\n            return result;\n        }\n        catch (error) {\n            this.update(toast.id, {\n                title: typeof messages.error === 'function'\n                    ? messages.error(error)\n                    : messages.error,\n                variant: 'error'\n            });\n            setTimeout(() => this.dismiss(toast.id), 5000);\n            throw error;\n        }\n    }\n    /**\n     * Update an existing toast\n     */\n    update(toastId, updates) {\n        const currentState = this.toastManager.getState();\n        const toast = currentState.toasts.find((t) => t.id === toastId);\n        if (toast) {\n            // Use the toast manager's update function\n            const toastRef = { id: toastId, update: (props) => { } };\n            this.toastManager.toast(Object.assign({}, toast, updates, { id: toastId }));\n        }\n    }\n    /**\n     * Dismiss a specific toast\n     */\n    dismiss(toastId) {\n        this.toastManager.dismiss(toastId);\n    }\n    /**\n     * Dismiss all toasts\n     */\n    dismissAll() {\n        this.toastManager.dismissAll();\n    }\n    /**\n     * Clear all toasts immediately\n     */\n    clear() {\n        this.toastManager.clear();\n    }\n    /**\n     * Get current toast state\n     */\n    getState() {\n        return this.toastManager.getState();\n    }\n    /**\n     * Get a specific toast by ID\n     */\n    getToast(toastId) {\n        return this.getState().toasts.find(t => t.id === toastId);\n    }\n    /**\n     * Check if any toasts are active\n     */\n    hasActiveToasts() {\n        return this.getState().toasts.some(t => t.open);\n    }\n    /**\n     * Clean up subscriptions\n     */\n    ngOnDestroy() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n        this.toastAddedSubject.complete();\n        this.toastRemovedSubject.complete();\n        this.stateSubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ToastService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }] });\n\n/**\n * Angular API Service\n * Wraps ui-core ApiClient with Angular HttpClient and RxJS observables\n */\nclass ApiService {\n    constructor(http) {\n        this.http = http;\n        // Initialize with empty config\n        const initialConfig = {\n            baseUrl: '',\n            jwt: undefined\n        };\n        this.configSubject = new BehaviorSubject(initialConfig);\n        this.authTokenSubject = new BehaviorSubject(null);\n        this.config$ = this.configSubject.asObservable();\n        this.authToken$ = this.authTokenSubject.asObservable();\n        this.isAuthenticated$ = this.authToken$.pipe(map(token => !!token));\n        // Create initial API client\n        this.apiClient = new ApiClient(initialConfig.baseUrl, initialConfig.jwt);\n    }\n    /**\n     * Initialize the API service with configuration\n     */\n    initialize(config) {\n        this.apiClient = new ApiClient(config.baseUrl, config.jwt);\n        this.configSubject.next(config);\n        if (config.jwt) {\n            this.authTokenSubject.next(config.jwt);\n        }\n    }\n    /**\n     * Update the base URL\n     */\n    setBaseUrl(baseUrl) {\n        const currentConfig = this.configSubject.value;\n        const newConfig = { ...currentConfig, baseUrl };\n        this.apiClient = new ApiClient(baseUrl, currentConfig.jwt);\n        this.configSubject.next(newConfig);\n    }\n    /**\n     * Update the JWT token\n     */\n    setAuthToken(jwt) {\n        const currentConfig = this.configSubject.value;\n        const newConfig = { ...currentConfig, jwt: jwt || undefined };\n        this.apiClient = new ApiClient(currentConfig.baseUrl, jwt || undefined);\n        this.configSubject.next(newConfig);\n        this.authTokenSubject.next(jwt);\n    }\n    /**\n     * Get current headers with auth token\n     */\n    getHeaders() {\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        const token = this.authTokenSubject.value;\n        if (token) {\n            headers['Authorization'] = `Bearer ${token}`;\n        }\n        return new HttpHeaders(headers);\n    }\n    /**\n     * Handle HTTP errors\n     */\n    handleError(error) {\n        let errorMessage = 'An error occurred';\n        if (error.error instanceof ErrorEvent) {\n            // Client-side error\n            errorMessage = `Error: ${error.error.message}`;\n        }\n        else {\n            // Server-side error\n            errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n            if (error.status === 401) {\n                // Unauthorized - clear token\n                this.setAuthToken(null);\n            }\n        }\n        console.error(errorMessage);\n        return throwError(() => new Error(errorMessage));\n    }\n    /**\n     * Login user\n     */\n    login(username, password) {\n        return from(this.apiClient.login(username, password)).pipe(tap((response) => {\n            if (response.token) {\n                this.setAuthToken(response.token);\n            }\n        }), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Create new user\n     */\n    createUser(username, password) {\n        return from(this.apiClient.createUser(username, password)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Logout user\n     */\n    logout() {\n        this.setAuthToken(null);\n    }\n    /**\n     * List all integrations\n     */\n    listIntegrations() {\n        return from(this.apiClient.listIntegrations()).pipe(map(response => response || []), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get authorize requirements\n     */\n    getAuthorizeRequirements(entityType, connectingEntityType) {\n        return from(this.apiClient.getAuthorizeRequirements(entityType, connectingEntityType)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Authorize entity\n     */\n    authorize(entityType, authData) {\n        return from(this.apiClient.authorize(entityType, authData)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Create integration\n     */\n    createIntegration(entity1, entity2, config) {\n        return from(this.apiClient.createIntegration(entity1, entity2, config)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Update integration\n     */\n    updateIntegration(integrationId, config) {\n        return from(this.apiClient.updateIntegration(integrationId, config)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Delete integration\n     */\n    deleteIntegration(integrationId) {\n        return from(this.apiClient.deleteIntegration(integrationId)).pipe(map(() => void 0), catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get integration config options\n     */\n    getIntegrationConfigOptions(integrationId) {\n        return from(this.apiClient.getIntegrationConfigOptions(integrationId)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get sample data\n     */\n    getSampleData(integrationId) {\n        return from(this.apiClient.getSampleData(integrationId)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get user actions\n     */\n    getUserActions(integrationId, actionType) {\n        return from(this.apiClient.getUserActions(integrationId, actionType)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Get user action options\n     */\n    getUserActionOptions(integrationId, selectedUserAction, data) {\n        return from(this.apiClient.getUserActionOptions(integrationId, selectedUserAction, data)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Submit user action\n     */\n    submitUserAction(integrationId, selectedUserAction, data) {\n        return from(this.apiClient.submitUserAction(integrationId, selectedUserAction, data)).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic GET request\n     */\n    get(endpoint) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.get(url, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic POST request\n     */\n    post(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.post(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic PUT request\n     */\n    put(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.put(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic PATCH request\n     */\n    patch(endpoint, data) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.patch(url, data, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Generic DELETE request\n     */\n    delete(endpoint) {\n        const url = `${this.configSubject.value.baseUrl}${endpoint}`;\n        return this.http.delete(url, { headers: this.getHeaders() }).pipe(catchError(this.handleError.bind(this)));\n    }\n    /**\n     * Refresh options\n     */\n    refreshOptions(params) {\n        return from(this.apiClient.refreshOptions(params)).pipe(catchError(this.handleError.bind(this)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: ApiService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i1.HttpClient }] });\n\n/**\n * Angular Alerts Service\n * Wraps ui-core AlertsService with RxJS observables for real-time alert management\n */\nclass AlertsService {\n    // Static constants\n    static { this.SEVERITY = AlertsService$1.SEVERITY; }\n    static { this.STATUS = AlertsService$1.STATUS; }\n    constructor(ngZone, apiService) {\n        this.ngZone = ngZone;\n        this.apiService = apiService;\n        // Initialize core service\n        this.coreAlertsService = new AlertsService$1(this.apiService);\n        // Initialize state\n        const initialState = {\n            alerts: [],\n            loading: false,\n            error: null,\n            lastFetch: null\n        };\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(initialState);\n        this.alertAddedSubject = new Subject();\n        this.alertUpdatedSubject = new Subject();\n        this.alertRemovedSubject = new Subject();\n        this.refreshSubject = new Subject();\n        this.subscriptions = new Map();\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.alerts$ = this.state$.pipe(map(state => state.alerts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.loading$ = this.state$.pipe(map(state => state.loading), distinctUntilChanged());\n        this.error$ = this.state$.pipe(map(state => state.error), distinctUntilChanged());\n        this.alertAdded$ = this.alertAddedSubject.asObservable();\n        this.alertUpdated$ = this.alertUpdatedSubject.asObservable();\n        this.alertRemoved$ = this.alertRemovedSubject.asObservable();\n        // Computed observables\n        this.activeAlerts$ = this.alerts$.pipe(map(alerts => alerts.filter(a => a.status === 'active')), shareReplay(1));\n        this.criticalAlerts$ = this.alerts$.pipe(map(alerts => alerts.filter(a => a.severity === 'critical' && a.status === 'active')), shareReplay(1));\n        this.alertCounts$ = this.alerts$.pipe(map(alerts => ({\n            total: alerts.length,\n            active: alerts.filter(a => a.status === 'active').length,\n            critical: alerts.filter(a => a.severity === 'critical' && a.status === 'active').length,\n            high: alerts.filter(a => a.severity === 'high' && a.status === 'active').length,\n            medium: alerts.filter(a => a.severity === 'medium' && a.status === 'active').length,\n            low: alerts.filter(a => a.severity === 'low' && a.status === 'active').length\n        })), shareReplay(1));\n    }\n    /**\n     * Fetch alerts for an integration\n     */\n    fetchAlerts(integrationId, filters) {\n        this.updateState({ loading: true, error: null });\n        return new Observable(observer => {\n            this.coreAlertsService.getAlerts(integrationId, filters)\n                .then(alerts => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        alerts: alerts,\n                        loading: false,\n                        lastFetch: new Date()\n                    });\n                    observer.next(alerts);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        loading: false,\n                        error\n                    });\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Set up auto-refresh for alerts\n     */\n    setupAutoRefresh(integrationId, intervalMs = 30000) {\n        return merge(this.refreshSubject, interval(intervalMs)).pipe(startWith(0), switchMap(() => this.fetchAlerts(integrationId)));\n    }\n    /**\n     * Manually refresh alerts\n     */\n    refresh() {\n        this.refreshSubject.next();\n    }\n    /**\n     * Subscribe to real-time alerts for an integration\n     */\n    subscribeToAlerts(integrationId) {\n        return new Observable(observer => {\n            const unsubscribe = this.coreAlertsService.subscribe(integrationId, (alert) => {\n                this.ngZone.run(() => {\n                    // Update local state\n                    const currentState = this.stateSubject.value;\n                    const existingIndex = currentState.alerts.findIndex(a => a.id === alert.id);\n                    if (existingIndex >= 0) {\n                        // Update existing alert\n                        const updatedAlerts = [...currentState.alerts];\n                        updatedAlerts[existingIndex] = alert;\n                        this.updateState({ alerts: updatedAlerts });\n                        this.alertUpdatedSubject.next(alert);\n                    }\n                    else {\n                        // Add new alert\n                        this.updateState({ alerts: [alert, ...currentState.alerts] });\n                        this.alertAddedSubject.next(alert);\n                    }\n                    observer.next(alert);\n                });\n            });\n            // Store subscription for cleanup\n            this.subscriptions.set(integrationId, unsubscribe);\n            // Return cleanup function\n            return () => {\n                unsubscribe();\n                this.subscriptions.delete(integrationId);\n            };\n        });\n    }\n    /**\n     * Acknowledge an alert\n     */\n    acknowledgeAlert(alertId, userId) {\n        return new Observable(observer => {\n            this.coreAlertsService.acknowledgeAlert(alertId, userId)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Resolve an alert\n     */\n    resolveAlert(alertId, userId, resolution) {\n        return new Observable(observer => {\n            this.coreAlertsService.resolveAlert(alertId, userId, resolution)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Create a new alert\n     */\n    createAlert(alertData) {\n        return new Observable(observer => {\n            this.coreAlertsService.createAlert(alertData)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    const currentState = this.stateSubject.value;\n                    this.updateState({ alerts: [alert, ...currentState.alerts] });\n                    this.alertAddedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Update an alert\n     */\n    updateAlert(alertId, updates) {\n        return new Observable(observer => {\n            this.coreAlertsService.updateAlert(alertId, updates)\n                .then(alert => {\n                this.ngZone.run(() => {\n                    this.updateAlertInState(alert);\n                    this.alertUpdatedSubject.next(alert);\n                    observer.next(alert);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Delete an alert\n     */\n    deleteAlert(alertId) {\n        return new Observable(observer => {\n            this.coreAlertsService.deleteAlert(alertId)\n                .then(() => {\n                this.ngZone.run(() => {\n                    const currentState = this.stateSubject.value;\n                    this.updateState({\n                        alerts: currentState.alerts.filter(a => a.id !== alertId)\n                    });\n                    this.alertRemovedSubject.next(alertId);\n                    observer.next();\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Filter alerts by severity\n     */\n    filterBySeverity(severity) {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.filterAlertsBySeverity(alerts, severity)));\n    }\n    /**\n     * Filter alerts by status\n     */\n    filterByStatus(status) {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.filterAlertsByStatus(alerts, status)));\n    }\n    /**\n     * Get alerts grouped by severity\n     */\n    getAlertsGroupedBySeverity() {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.groupAlertsBySeverity(alerts)));\n    }\n    /**\n     * Sort alerts by timestamp\n     */\n    sortAlertsByTimestamp(order = 'desc') {\n        return this.alerts$.pipe(map(alerts => this.coreAlertsService.sortAlertsByTimestamp(alerts, order)));\n    }\n    /**\n     * Update state\n     */\n    updateState(updates) {\n        const currentState = this.stateSubject.value;\n        this.stateSubject.next({ ...currentState, ...updates });\n    }\n    /**\n     * Update a single alert in state\n     */\n    updateAlertInState(alert) {\n        const currentState = this.stateSubject.value;\n        const alerts = currentState.alerts.map(a => a.id === alert.id ? alert : a);\n        this.updateState({ alerts });\n    }\n    /**\n     * Clean up subscriptions\n     */\n    ngOnDestroy() {\n        // Unsubscribe from all real-time subscriptions\n        this.subscriptions.forEach(unsubscribe => unsubscribe());\n        this.subscriptions.clear();\n        // Complete subjects\n        this.alertAddedSubject.complete();\n        this.alertUpdatedSubject.complete();\n        this.alertRemovedSubject.complete();\n        this.refreshSubject.complete();\n        this.stateSubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, deps: [{ token: i0.NgZone }, { token: ApiService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AlertsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: ApiService }] });\n\n/**\n * Angular CloudWatch Service\n * Wraps ui-core CloudWatchService with RxJS observables for monitoring metrics\n */\nclass CloudWatchService {\n    constructor(ngZone, apiService) {\n        this.ngZone = ngZone;\n        this.apiService = apiService;\n        // Initialize core service\n        this.coreCloudWatchService = new CloudWatchService$1(this.apiService);\n        // Initialize state\n        const initialState = {\n            metrics: null,\n            alerts: [],\n            logs: [],\n            loading: false,\n            error: null,\n            lastFetch: null\n        };\n        // Initialize subjects\n        this.stateSubject = new BehaviorSubject(initialState);\n        this.refreshSubject = new Subject();\n        this.metricsQuerySubject = new BehaviorSubject(null);\n        // Set up observables\n        this.state$ = this.stateSubject.asObservable();\n        this.metrics$ = this.state$.pipe(map(state => state.metrics), distinctUntilChanged());\n        this.alerts$ = this.state$.pipe(map(state => state.alerts), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.logs$ = this.state$.pipe(map(state => state.logs), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        this.loading$ = this.state$.pipe(map(state => state.loading), distinctUntilChanged());\n        this.error$ = this.state$.pipe(map(state => state.error), distinctUntilChanged());\n        // Set up computed observables\n        this.setupComputedObservables();\n    }\n    setupComputedObservables() {\n        // Metrics summary\n        this.summary$ = this.metrics$.pipe(map(metrics => {\n            if (!metrics) {\n                return {\n                    avgLatency: 0,\n                    totalRequests: 0,\n                    errorRate: 0,\n                    uptime: 100,\n                    currentCPU: 0,\n                    currentMemory: 0,\n                    activeConnections: 0,\n                    throughput: 0\n                };\n            }\n            return {\n                avgLatency: this.coreCloudWatchService.calculateAverage(metrics.latency),\n                totalRequests: metrics.requestCount.reduce((sum, point) => sum + point.value, 0),\n                errorRate: this.coreCloudWatchService.calculateErrorRate(metrics.errorCount, metrics.requestCount),\n                uptime: this.coreCloudWatchService.calculateUptime(metrics.healthChecks),\n                currentCPU: this.coreCloudWatchService.getLatestValue(metrics.cpuUtilization),\n                currentMemory: this.coreCloudWatchService.getLatestValue(metrics.memoryUtilization),\n                activeConnections: this.coreCloudWatchService.getLatestValue(metrics.activeConnections),\n                throughput: this.coreCloudWatchService.getLatestValue(metrics.throughput)\n            };\n        }), shareReplay(1));\n        // Latency trend\n        this.latencyTrend$ = this.metrics$.pipe(map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.latency) : 0), shareReplay(1));\n        // Error trend\n        this.errorTrend$ = this.metrics$.pipe(map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.errorCount) : 0), shareReplay(1));\n        // Health status\n        this.healthStatus$ = combineLatest([\n            this.summary$,\n            this.alerts$\n        ]).pipe(map(([summary, alerts]) => {\n            const activeAlerts = alerts.filter(a => a.status === 'active');\n            if (activeAlerts.length > 5 || summary.errorRate > 10 || summary.uptime < 90) {\n                return 'critical';\n            }\n            else if (activeAlerts.length > 0 || summary.errorRate > 5 || summary.uptime < 95) {\n                return 'degraded';\n            }\n            return 'healthy';\n        }), shareReplay(1));\n    }\n    /**\n     * Fetch metrics for an integration\n     */\n    fetchMetrics(query) {\n        this.updateState({ loading: true, error: null });\n        this.metricsQuerySubject.next(query);\n        return new Observable(observer => {\n            this.coreCloudWatchService.getMetrics(query)\n                .then(metrics => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        metrics: metrics,\n                        loading: false,\n                        lastFetch: new Date()\n                    });\n                    observer.next(metrics);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    this.updateState({\n                        loading: false,\n                        error\n                    });\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Set up auto-refresh for metrics\n     */\n    setupAutoRefresh(intervalMs = 60000) {\n        return combineLatest([\n            merge(this.refreshSubject, interval(intervalMs)).pipe(startWith(0)),\n            this.metricsQuerySubject\n        ]).pipe(switchMap(([_, query]) => {\n            if (!query) {\n                return [];\n            }\n            return this.fetchMetrics(query);\n        }));\n    }\n    /**\n     * Manually refresh metrics\n     */\n    refresh() {\n        this.refreshSubject.next();\n    }\n    /**\n     * Fetch alerts for an integration\n     */\n    fetchAlerts(integrationId) {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getAlerts(integrationId)\n                .then(alerts => {\n                this.ngZone.run(() => {\n                    this.updateState({ alerts: alerts });\n                    observer.next(alerts);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Fetch logs for an integration\n     */\n    fetchLogs(integrationId, startTime, endTime, logLevel = 'INFO') {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getLogs({\n                integrationId,\n                startTime,\n                endTime,\n                logLevel\n            })\n                .then(logs => {\n                this.ngZone.run(() => {\n                    this.updateState({ logs: logs });\n                    observer.next(logs);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Fetch custom metrics\n     */\n    fetchCustomMetrics(integrationId, metricNames) {\n        return new Observable(observer => {\n            this.coreCloudWatchService.getCustomMetrics(integrationId, metricNames)\n                .then(metrics => {\n                this.ngZone.run(() => {\n                    observer.next(metrics);\n                    observer.complete();\n                });\n            })\n                .catch(error => {\n                this.ngZone.run(() => {\n                    observer.error(error);\n                });\n            });\n        });\n    }\n    /**\n     * Get time series data for a specific metric\n     */\n    getMetricTimeSeries(metricName) {\n        return this.metrics$.pipe(map(metrics => {\n            if (!metrics || !metrics[metricName]) {\n                return [];\n            }\n            return this.coreCloudWatchService.formatTimeSeries(metrics[metricName]);\n        }));\n    }\n    /**\n     * Calculate metric statistics\n     */\n    getMetricStats(metricName) {\n        return this.getMetricTimeSeries(metricName).pipe(map(dataPoints => {\n            if (dataPoints.length === 0) {\n                return { min: 0, max: 0, avg: 0, current: 0 };\n            }\n            const values = dataPoints.map(p => p.value);\n            return {\n                min: Math.min(...values),\n                max: Math.max(...values),\n                avg: this.coreCloudWatchService.calculateAverage(dataPoints),\n                current: this.coreCloudWatchService.getLatestValue(dataPoints)\n            };\n        }));\n    }\n    /**\n     * Set alert threshold for a metric\n     */\n    setAlertThreshold(metric, threshold, condition) {\n        // This would typically call a backend API to set up CloudWatch alarms\n        console.log(`Setting alert: ${metric} ${condition} ${threshold}`);\n    }\n    /**\n     * Clear all data\n     */\n    clear() {\n        this.updateState({\n            metrics: null,\n            alerts: [],\n            logs: [],\n            error: null,\n            lastFetch: null\n        });\n        this.metricsQuerySubject.next(null);\n    }\n    /**\n     * Update state\n     */\n    updateState(updates) {\n        const currentState = this.stateSubject.value;\n        this.stateSubject.next({ ...currentState, ...updates });\n    }\n    /**\n     * Clean up\n     */\n    ngOnDestroy() {\n        this.refreshSubject.complete();\n        this.stateSubject.complete();\n        this.metricsQuerySubject.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, deps: [{ token: i0.NgZone }, { token: ApiService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: CloudWatchService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: ApiService }] });\n\n/**\n * Angular Toast Component\n * Displays toast notifications with animations and auto-dismiss\n */\nclass FriggToastComponent {\n    constructor() {\n        this.variant = 'default';\n        this.duration = 5000;\n        this.dismiss = new EventEmitter();\n        this.click = new EventEmitter();\n        this.animationState = 'visible';\n        this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n        // Auto-dismiss after duration\n        if (this.duration > 0) {\n            timer(this.duration)\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(() => {\n                this.close();\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    handleClick() {\n        this.click.emit();\n    }\n    handleAction(event) {\n        event.stopPropagation();\n        if (this.action) {\n            this.action.onClick();\n        }\n    }\n    handleClose(event) {\n        event.stopPropagation();\n        this.close();\n    }\n    close() {\n        this.animationState = 'hidden';\n        setTimeout(() => {\n            this.dismiss.emit();\n        }, 200);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggToastComponent, isStandalone: true, selector: \"frigg-toast\", inputs: { id: \"id\", title: \"title\", description: \"description\", variant: \"variant\", duration: \"duration\", action: \"action\" }, outputs: { dismiss: \"dismiss\", click: \"click\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-toast\"\n      [class.frigg-toast--success]=\"variant === 'success'\"\n      [class.frigg-toast--error]=\"variant === 'error'\"\n      [class.frigg-toast--warning]=\"variant === 'warning'\"\n      [class.frigg-toast--info]=\"variant === 'info'\"\n      [@slideIn]=\"animationState\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-toast__icon\">\n        <svg *ngIf=\"variant === 'success'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'error'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'warning'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'info'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"!variant || variant === 'default'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      \n      <div class=\"frigg-toast__content\">\n        <div class=\"frigg-toast__title\" *ngIf=\"title\">{{ title }}</div>\n        <div class=\"frigg-toast__description\" *ngIf=\"description\">{{ description }}</div>\n      </div>\n      \n      <div class=\"frigg-toast__actions\">\n        <button \n          *ngIf=\"action\" \n          class=\"frigg-toast__action\"\n          (click)=\"handleAction($event)\"\n        >\n          {{ action.label }}\n        </button>\n        <button \n          class=\"frigg-toast__close\"\n          (click)=\"handleClose($event)\"\n          aria-label=\"Close\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-toast{display:flex;align-items:flex-start;gap:12px;min-width:300px;max-width:500px;padding:16px;background:#fff;border-radius:8px;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d;cursor:pointer;transition:all .2s ease}.frigg-toast:hover{box-shadow:0 20px 25px -5px #0000001a,0 10px 10px -5px #0000000a}.frigg-toast__icon{flex-shrink:0;width:20px;height:20px;color:#6b7280}.frigg-toast--success .frigg-toast__icon{color:#10b981}.frigg-toast--error .frigg-toast__icon{color:#ef4444}.frigg-toast--warning .frigg-toast__icon{color:#f59e0b}.frigg-toast--info .frigg-toast__icon{color:#3b82f6}.frigg-toast__content{flex:1;min-width:0}.frigg-toast__title{font-weight:600;font-size:14px;line-height:20px;color:#111827}.frigg-toast__description{margin-top:4px;font-size:14px;line-height:20px;color:#6b7280}.frigg-toast__actions{display:flex;align-items:center;gap:8px;flex-shrink:0}.frigg-toast__action{padding:4px 8px;background:transparent;border:1px solid #E5E7EB;border-radius:4px;font-size:12px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-toast__action:hover{background:#f3f4f6;border-color:#d1d5db}.frigg-toast__close{padding:4px;background:transparent;border:none;border-radius:4px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-toast__close:hover{background:#f3f4f6;color:#374151}.frigg-toast__close svg{width:16px;height:16px}@media (prefers-color-scheme: dark){.frigg-toast{background:#1f2937;color:#fff}.frigg-toast__title{color:#fff}.frigg-toast__description{color:#d1d5db}.frigg-toast__action{border-color:#374151;color:#d1d5db}.frigg-toast__action:hover{background:#374151;border-color:#4b5563;color:#fff}.frigg-toast__close{color:#9ca3af}.frigg-toast__close:hover{background:#374151;color:#fff}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('slideIn', [\n                state('void', style({\n                    transform: 'translateX(100%)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'translateX(0)',\n                    opacity: 1\n                })),\n                state('hidden', style({\n                    transform: 'translateX(100%)',\n                    opacity: 0\n                })),\n                transition('void => visible', [\n                    animate('300ms ease-out')\n                ]),\n                transition('visible => hidden', [\n                    animate('200ms ease-in')\n                ])\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-toast', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-toast\"\n      [class.frigg-toast--success]=\"variant === 'success'\"\n      [class.frigg-toast--error]=\"variant === 'error'\"\n      [class.frigg-toast--warning]=\"variant === 'warning'\"\n      [class.frigg-toast--info]=\"variant === 'info'\"\n      [@slideIn]=\"animationState\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-toast__icon\">\n        <svg *ngIf=\"variant === 'success'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'error'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'warning'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"variant === 'info'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n        </svg>\n        <svg *ngIf=\"!variant || variant === 'default'\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n        </svg>\n      </div>\n      \n      <div class=\"frigg-toast__content\">\n        <div class=\"frigg-toast__title\" *ngIf=\"title\">{{ title }}</div>\n        <div class=\"frigg-toast__description\" *ngIf=\"description\">{{ description }}</div>\n      </div>\n      \n      <div class=\"frigg-toast__actions\">\n        <button \n          *ngIf=\"action\" \n          class=\"frigg-toast__action\"\n          (click)=\"handleAction($event)\"\n        >\n          {{ action.label }}\n        </button>\n        <button \n          class=\"frigg-toast__close\"\n          (click)=\"handleClose($event)\"\n          aria-label=\"Close\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  `, animations: [\n                        trigger('slideIn', [\n                            state('void', style({\n                                transform: 'translateX(100%)',\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                transform: 'translateX(0)',\n                                opacity: 1\n                            })),\n                            state('hidden', style({\n                                transform: 'translateX(100%)',\n                                opacity: 0\n                            })),\n                            transition('void => visible', [\n                                animate('300ms ease-out')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('200ms ease-in')\n                            ])\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-toast{display:flex;align-items:flex-start;gap:12px;min-width:300px;max-width:500px;padding:16px;background:#fff;border-radius:8px;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d;cursor:pointer;transition:all .2s ease}.frigg-toast:hover{box-shadow:0 20px 25px -5px #0000001a,0 10px 10px -5px #0000000a}.frigg-toast__icon{flex-shrink:0;width:20px;height:20px;color:#6b7280}.frigg-toast--success .frigg-toast__icon{color:#10b981}.frigg-toast--error .frigg-toast__icon{color:#ef4444}.frigg-toast--warning .frigg-toast__icon{color:#f59e0b}.frigg-toast--info .frigg-toast__icon{color:#3b82f6}.frigg-toast__content{flex:1;min-width:0}.frigg-toast__title{font-weight:600;font-size:14px;line-height:20px;color:#111827}.frigg-toast__description{margin-top:4px;font-size:14px;line-height:20px;color:#6b7280}.frigg-toast__actions{display:flex;align-items:center;gap:8px;flex-shrink:0}.frigg-toast__action{padding:4px 8px;background:transparent;border:1px solid #E5E7EB;border-radius:4px;font-size:12px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-toast__action:hover{background:#f3f4f6;border-color:#d1d5db}.frigg-toast__close{padding:4px;background:transparent;border:none;border-radius:4px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-toast__close:hover{background:#f3f4f6;color:#374151}.frigg-toast__close svg{width:16px;height:16px}@media (prefers-color-scheme: dark){.frigg-toast{background:#1f2937;color:#fff}.frigg-toast__title{color:#fff}.frigg-toast__description{color:#d1d5db}.frigg-toast__action{border-color:#374151;color:#d1d5db}.frigg-toast__action:hover{background:#374151;border-color:#4b5563;color:#fff}.frigg-toast__close{color:#9ca3af}.frigg-toast__close:hover{background:#374151;color:#fff}}\\n\"] }]\n        }], propDecorators: { id: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], variant: [{\n                type: Input\n            }], duration: [{\n                type: Input\n            }], action: [{\n                type: Input\n            }], dismiss: [{\n                type: Output\n            }], click: [{\n                type: Output\n            }] } });\n\n/**\n * Angular Toast Container Component\n * Manages and displays multiple toast notifications\n */\nclass FriggToastContainerComponent {\n    constructor(toastService, cdr) {\n        this.toastService = toastService;\n        this.cdr = cdr;\n        this.toasts = [];\n        this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n        // Subscribe to toast changes\n        this.toastService.toasts$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(toasts => {\n            this.toasts = toasts.filter(t => t.open !== false);\n            this.cdr.markForCheck();\n        });\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    trackByToastId(index, toast) {\n        return toast.id;\n    }\n    handleDismiss(toastId) {\n        this.toastService.dismiss(toastId);\n    }\n    handleClick(toast) {\n        // Optional: Handle toast click\n        console.log('Toast clicked:', toast);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastContainerComponent, deps: [{ token: ToastService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggToastContainerComponent, isStandalone: true, selector: \"frigg-toast-container\", ngImport: i0, template: `\n    <div class=\"frigg-toast-container\" [class.frigg-toast-container--empty]=\"toasts.length === 0\">\n      <frigg-toast\n        *ngFor=\"let toast of toasts; trackBy: trackByToastId\"\n        [id]=\"toast.id\"\n        [title]=\"toast.title\"\n        [description]=\"toast.description\"\n        [variant]=\"toast.variant || 'default'\"\n        [duration]=\"toast.duration || 5000\"\n        [action]=\"toast.action\"\n        (dismiss)=\"handleDismiss(toast.id)\"\n        (click)=\"handleClick(toast)\"\n      ></frigg-toast>\n    </div>\n  `, isInline: true, styles: [\".frigg-toast-container{position:fixed;top:20px;right:20px;z-index:9999;display:flex;flex-direction:column;gap:12px;pointer-events:none}.frigg-toast-container--empty{display:none}.frigg-toast-container frigg-toast{pointer-events:auto}@media (max-width: 640px){.frigg-toast-container{top:10px;right:10px;left:10px}}@keyframes slideInRight{0%{transform:translate(100%);opacity:0}to{transform:translate(0);opacity:1}}frigg-toast{animation:slideInRight .3s ease-out}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: FriggToastComponent, selector: \"frigg-toast\", inputs: [\"id\", \"title\", \"description\", \"variant\", \"duration\", \"action\"], outputs: [\"dismiss\", \"click\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggToastContainerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-toast-container', standalone: true, imports: [CommonModule, FriggToastComponent], template: `\n    <div class=\"frigg-toast-container\" [class.frigg-toast-container--empty]=\"toasts.length === 0\">\n      <frigg-toast\n        *ngFor=\"let toast of toasts; trackBy: trackByToastId\"\n        [id]=\"toast.id\"\n        [title]=\"toast.title\"\n        [description]=\"toast.description\"\n        [variant]=\"toast.variant || 'default'\"\n        [duration]=\"toast.duration || 5000\"\n        [action]=\"toast.action\"\n        (dismiss)=\"handleDismiss(toast.id)\"\n        (click)=\"handleClick(toast)\"\n      ></frigg-toast>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-toast-container{position:fixed;top:20px;right:20px;z-index:9999;display:flex;flex-direction:column;gap:12px;pointer-events:none}.frigg-toast-container--empty{display:none}.frigg-toast-container frigg-toast{pointer-events:auto}@media (max-width: 640px){.frigg-toast-container{top:10px;right:10px;left:10px}}@keyframes slideInRight{0%{transform:translate(100%);opacity:0}to{transform:translate(0);opacity:1}}frigg-toast{animation:slideInRight .3s ease-out}\\n\"] }]\n        }], ctorParameters: () => [{ type: ToastService }, { type: i0.ChangeDetectorRef }] });\n\n/**\n * Angular Loading Spinner Component\n * Displays a customizable loading spinner\n */\nclass FriggLoadingSpinnerComponent {\n    constructor() {\n        this.size = 'medium';\n        this.inline = false;\n        this.overlay = false;\n        this.label = 'Loading';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggLoadingSpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggLoadingSpinnerComponent, isStandalone: true, selector: \"frigg-loading-spinner\", inputs: { size: \"size\", text: \"text\", inline: \"inline\", overlay: \"overlay\", label: \"label\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-loading-spinner\"\n      [class.frigg-loading-spinner--small]=\"size === 'small'\"\n      [class.frigg-loading-spinner--large]=\"size === 'large'\"\n      [class.frigg-loading-spinner--inline]=\"inline\"\n      [class.frigg-loading-spinner--overlay]=\"overlay\"\n    >\n      <div class=\"frigg-loading-spinner__container\" *ngIf=\"!overlay\">\n        <svg \n          class=\"frigg-loading-spinner__svg\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\"\n          [attr.aria-label]=\"label\"\n        >\n          <circle \n            class=\"frigg-loading-spinner__circle-bg\"\n            cx=\"12\" \n            cy=\"12\" \n            r=\"10\" \n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n          />\n          <path \n            class=\"frigg-loading-spinner__circle\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n          />\n        </svg>\n        <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n      </div>\n      \n      <div class=\"frigg-loading-spinner__overlay\" *ngIf=\"overlay\">\n        <div class=\"frigg-loading-spinner__overlay-content\">\n          <svg \n            class=\"frigg-loading-spinner__svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\"\n            [attr.aria-label]=\"label\"\n          >\n            <circle \n              class=\"frigg-loading-spinner__circle-bg\"\n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n            />\n            <path \n              class=\"frigg-loading-spinner__circle\"\n              d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n          <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-loading-spinner{display:flex;align-items:center;justify-content:center}.frigg-loading-spinner__container{display:flex;flex-direction:column;align-items:center;gap:8px}.frigg-loading-spinner__svg{width:32px;height:32px;animation:spin 1s linear infinite;color:#3b82f6}.frigg-loading-spinner--small .frigg-loading-spinner__svg{width:20px;height:20px}.frigg-loading-spinner--large .frigg-loading-spinner__svg{width:48px;height:48px}.frigg-loading-spinner__circle-bg{opacity:.2}.frigg-loading-spinner__circle{opacity:1}.frigg-loading-spinner__text{font-size:14px;color:#6b7280;text-align:center}.frigg-loading-spinner--inline{display:inline-flex}.frigg-loading-spinner--inline .frigg-loading-spinner__container{flex-direction:row}.frigg-loading-spinner--overlay{position:fixed;inset:0;z-index:9998}.frigg-loading-spinner__overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;background:#fffffff2;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-loading-spinner__overlay-content{display:flex;flex-direction:column;align-items:center;gap:12px}@media (prefers-color-scheme: dark){.frigg-loading-spinner__svg{color:#60a5fa}.frigg-loading-spinner__text{color:#d1d5db}.frigg-loading-spinner__overlay{background:#111827f2}}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggLoadingSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-loading-spinner', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-loading-spinner\"\n      [class.frigg-loading-spinner--small]=\"size === 'small'\"\n      [class.frigg-loading-spinner--large]=\"size === 'large'\"\n      [class.frigg-loading-spinner--inline]=\"inline\"\n      [class.frigg-loading-spinner--overlay]=\"overlay\"\n    >\n      <div class=\"frigg-loading-spinner__container\" *ngIf=\"!overlay\">\n        <svg \n          class=\"frigg-loading-spinner__svg\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\"\n          [attr.aria-label]=\"label\"\n        >\n          <circle \n            class=\"frigg-loading-spinner__circle-bg\"\n            cx=\"12\" \n            cy=\"12\" \n            r=\"10\" \n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n          />\n          <path \n            class=\"frigg-loading-spinner__circle\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n            stroke=\"currentColor\" \n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n          />\n        </svg>\n        <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n      </div>\n      \n      <div class=\"frigg-loading-spinner__overlay\" *ngIf=\"overlay\">\n        <div class=\"frigg-loading-spinner__overlay-content\">\n          <svg \n            class=\"frigg-loading-spinner__svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\"\n            [attr.aria-label]=\"label\"\n          >\n            <circle \n              class=\"frigg-loading-spinner__circle-bg\"\n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n            />\n            <path \n              class=\"frigg-loading-spinner__circle\"\n              d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\"\n              stroke=\"currentColor\" \n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n          <span class=\"frigg-loading-spinner__text\" *ngIf=\"text\">{{ text }}</span>\n        </div>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-loading-spinner{display:flex;align-items:center;justify-content:center}.frigg-loading-spinner__container{display:flex;flex-direction:column;align-items:center;gap:8px}.frigg-loading-spinner__svg{width:32px;height:32px;animation:spin 1s linear infinite;color:#3b82f6}.frigg-loading-spinner--small .frigg-loading-spinner__svg{width:20px;height:20px}.frigg-loading-spinner--large .frigg-loading-spinner__svg{width:48px;height:48px}.frigg-loading-spinner__circle-bg{opacity:.2}.frigg-loading-spinner__circle{opacity:1}.frigg-loading-spinner__text{font-size:14px;color:#6b7280;text-align:center}.frigg-loading-spinner--inline{display:inline-flex}.frigg-loading-spinner--inline .frigg-loading-spinner__container{flex-direction:row}.frigg-loading-spinner--overlay{position:fixed;inset:0;z-index:9998}.frigg-loading-spinner__overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;background:#fffffff2;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-loading-spinner__overlay-content{display:flex;flex-direction:column;align-items:center;gap:12px}@media (prefers-color-scheme: dark){.frigg-loading-spinner__svg{color:#60a5fa}.frigg-loading-spinner__text{color:#d1d5db}.frigg-loading-spinner__overlay{background:#111827f2}}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\n        }], propDecorators: { size: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], inline: [{\n                type: Input\n            }], overlay: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }] } });\n\n/**\n * Angular Modal Component\n * Displays content in a modal overlay with customizable options\n */\nclass FriggModalComponent {\n    constructor() {\n        this.isOpen = false;\n        this.size = 'medium';\n        this.showCloseButton = true;\n        this.showFooter = false;\n        this.closeOnEscape = true;\n        this.closeOnBackdrop = true;\n        this.close = new EventEmitter();\n        this.handleEscapeKey = (event) => {\n            if (event.key === 'Escape' && this.isOpen) {\n                this.handleClose();\n            }\n        };\n    }\n    ngOnInit() {\n        if (this.closeOnEscape) {\n            document.addEventListener('keydown', this.handleEscapeKey);\n        }\n    }\n    ngOnDestroy() {\n        document.removeEventListener('keydown', this.handleEscapeKey);\n    }\n    ngAfterViewInit() {\n        // Focus trap management\n        if (this.isOpen && this.modalContent) {\n            this.trapFocus();\n        }\n    }\n    handleBackdropClick(event) {\n        if (this.closeOnBackdrop && event.target === event.currentTarget) {\n            this.handleClose();\n        }\n    }\n    handleClose() {\n        this.close.emit();\n    }\n    trapFocus() {\n        // Simple focus trap implementation\n        const focusableElements = this.modalContent?.nativeElement.querySelectorAll('a[href], button, textarea, input[type=\"text\"], input[type=\"radio\"], input[type=\"checkbox\"], select');\n        const firstFocusable = focusableElements?.[0];\n        const lastFocusable = focusableElements?.[focusableElements.length - 1];\n        if (firstFocusable) {\n            firstFocusable.focus();\n        }\n        // Tab cycling logic would go here\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggModalComponent, isStandalone: true, selector: \"frigg-modal\", inputs: { isOpen: \"isOpen\", title: \"title\", size: \"size\", showCloseButton: \"showCloseButton\", showFooter: \"showFooter\", closeOnEscape: \"closeOnEscape\", closeOnBackdrop: \"closeOnBackdrop\" }, outputs: { close: \"close\" }, viewQueries: [{ propertyName: \"modalContent\", first: true, predicate: [\"modalContent\"], descendants: true }], ngImport: i0, template: `\n    <div \n      class=\"frigg-modal\"\n      [class.frigg-modal--open]=\"isOpen\"\n      [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      (click)=\"handleBackdropClick($event)\"\n    >\n      <div \n        class=\"frigg-modal__backdrop\"\n        [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      ></div>\n      \n      <div \n        class=\"frigg-modal__container\"\n        [class.frigg-modal__container--small]=\"size === 'small'\"\n        [class.frigg-modal__container--large]=\"size === 'large'\"\n        [class.frigg-modal__container--fullscreen]=\"size === 'fullscreen'\"\n        [@slideUp]=\"isOpen ? 'visible' : 'hidden'\"\n        #modalContent\n      >\n        <div class=\"frigg-modal__header\" *ngIf=\"title || showCloseButton\">\n          <h2 class=\"frigg-modal__title\" *ngIf=\"title\">{{ title }}</h2>\n          <button \n            *ngIf=\"showCloseButton\"\n            class=\"frigg-modal__close\"\n            (click)=\"handleClose()\"\n            aria-label=\"Close modal\"\n          >\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"frigg-modal__body\">\n          <ng-content></ng-content>\n        </div>\n        \n        <div class=\"frigg-modal__footer\" *ngIf=\"showFooter\">\n          <ng-content select=\"[modal-footer]\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-modal{position:fixed;inset:0;z-index:10000;display:none;align-items:center;justify-content:center;padding:20px}.frigg-modal--open{display:flex}.frigg-modal__backdrop{position:absolute;inset:0;background:#00000080;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-modal__container{position:relative;max-width:600px;width:100%;max-height:90vh;display:flex;flex-direction:column;background:#fff;border-radius:12px;box-shadow:0 25px 50px -12px #00000040;overflow:hidden}.frigg-modal__container--small{max-width:400px}.frigg-modal__container--large{max-width:800px}.frigg-modal__container--fullscreen{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}.frigg-modal__header{display:flex;align-items:center;justify-content:space-between;padding:20px 24px;border-bottom:1px solid #E5E7EB}.frigg-modal__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-modal__close{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:none;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-modal__close:hover{background:#f3f4f6;color:#374151}.frigg-modal__close svg{width:20px;height:20px}.frigg-modal__body{flex:1;padding:24px;overflow-y:auto}.frigg-modal__footer{padding:16px 24px;border-top:1px solid #E5E7EB;display:flex;justify-content:flex-end;gap:12px}@media (max-width: 640px){.frigg-modal{padding:0}.frigg-modal__container{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}}@media (prefers-color-scheme: dark){.frigg-modal__backdrop{background:#000c}.frigg-modal__container{background:#1f2937}.frigg-modal__header{border-bottom-color:#374151}.frigg-modal__title{color:#fff}.frigg-modal__close{color:#9ca3af}.frigg-modal__close:hover{background:#374151;color:#fff}.frigg-modal__footer{border-top-color:#374151}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('fadeIn', [\n                state('hidden', style({\n                    opacity: 0\n                })),\n                state('visible', style({\n                    opacity: 1\n                })),\n                transition('hidden => visible', [\n                    animate('200ms ease-out')\n                ]),\n                transition('visible => hidden', [\n                    animate('150ms ease-in')\n                ])\n            ]),\n            trigger('slideUp', [\n                state('hidden', style({\n                    transform: 'translateY(20px) scale(0.95)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'translateY(0) scale(1)',\n                    opacity: 1\n                })),\n                transition('hidden => visible', [\n                    animate('300ms cubic-bezier(0.16, 1, 0.3, 1)')\n                ]),\n                transition('visible => hidden', [\n                    animate('200ms cubic-bezier(0.7, 0, 0.84, 0)')\n                ])\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-modal', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-modal\"\n      [class.frigg-modal--open]=\"isOpen\"\n      [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      (click)=\"handleBackdropClick($event)\"\n    >\n      <div \n        class=\"frigg-modal__backdrop\"\n        [@fadeIn]=\"isOpen ? 'visible' : 'hidden'\"\n      ></div>\n      \n      <div \n        class=\"frigg-modal__container\"\n        [class.frigg-modal__container--small]=\"size === 'small'\"\n        [class.frigg-modal__container--large]=\"size === 'large'\"\n        [class.frigg-modal__container--fullscreen]=\"size === 'fullscreen'\"\n        [@slideUp]=\"isOpen ? 'visible' : 'hidden'\"\n        #modalContent\n      >\n        <div class=\"frigg-modal__header\" *ngIf=\"title || showCloseButton\">\n          <h2 class=\"frigg-modal__title\" *ngIf=\"title\">{{ title }}</h2>\n          <button \n            *ngIf=\"showCloseButton\"\n            class=\"frigg-modal__close\"\n            (click)=\"handleClose()\"\n            aria-label=\"Close modal\"\n          >\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"frigg-modal__body\">\n          <ng-content></ng-content>\n        </div>\n        \n        <div class=\"frigg-modal__footer\" *ngIf=\"showFooter\">\n          <ng-content select=\"[modal-footer]\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `, animations: [\n                        trigger('fadeIn', [\n                            state('hidden', style({\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                opacity: 1\n                            })),\n                            transition('hidden => visible', [\n                                animate('200ms ease-out')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('150ms ease-in')\n                            ])\n                        ]),\n                        trigger('slideUp', [\n                            state('hidden', style({\n                                transform: 'translateY(20px) scale(0.95)',\n                                opacity: 0\n                            })),\n                            state('visible', style({\n                                transform: 'translateY(0) scale(1)',\n                                opacity: 1\n                            })),\n                            transition('hidden => visible', [\n                                animate('300ms cubic-bezier(0.16, 1, 0.3, 1)')\n                            ]),\n                            transition('visible => hidden', [\n                                animate('200ms cubic-bezier(0.7, 0, 0.84, 0)')\n                            ])\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-modal{position:fixed;inset:0;z-index:10000;display:none;align-items:center;justify-content:center;padding:20px}.frigg-modal--open{display:flex}.frigg-modal__backdrop{position:absolute;inset:0;background:#00000080;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.frigg-modal__container{position:relative;max-width:600px;width:100%;max-height:90vh;display:flex;flex-direction:column;background:#fff;border-radius:12px;box-shadow:0 25px 50px -12px #00000040;overflow:hidden}.frigg-modal__container--small{max-width:400px}.frigg-modal__container--large{max-width:800px}.frigg-modal__container--fullscreen{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}.frigg-modal__header{display:flex;align-items:center;justify-content:space-between;padding:20px 24px;border-bottom:1px solid #E5E7EB}.frigg-modal__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-modal__close{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:none;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-modal__close:hover{background:#f3f4f6;color:#374151}.frigg-modal__close svg{width:20px;height:20px}.frigg-modal__body{flex:1;padding:24px;overflow-y:auto}.frigg-modal__footer{padding:16px 24px;border-top:1px solid #E5E7EB;display:flex;justify-content:flex-end;gap:12px}@media (max-width: 640px){.frigg-modal{padding:0}.frigg-modal__container{max-width:100%;width:100%;height:100vh;max-height:100vh;border-radius:0}}@media (prefers-color-scheme: dark){.frigg-modal__backdrop{background:#000c}.frigg-modal__container{background:#1f2937}.frigg-modal__header{border-bottom-color:#374151}.frigg-modal__title{color:#fff}.frigg-modal__close{color:#9ca3af}.frigg-modal__close:hover{background:#374151;color:#fff}.frigg-modal__footer{border-top-color:#374151}}\\n\"] }]\n        }], propDecorators: { isOpen: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], showFooter: [{\n                type: Input\n            }], closeOnEscape: [{\n                type: Input\n            }], closeOnBackdrop: [{\n                type: Input\n            }], close: [{\n                type: Output\n            }], modalContent: [{\n                type: ViewChild,\n                args: ['modalContent', { static: false }]\n            }] } });\n\n/**\n * Angular Integration Card Component\n * Displays integration information in a card format\n */\nclass FriggIntegrationCardComponent {\n    constructor() {\n        this.showMetrics = true;\n        this.showActions = true;\n        this.clickable = false;\n        this.actionsDisabled = false;\n        this.click = new EventEmitter();\n        this.configure = new EventEmitter();\n        this.view = new EventEmitter();\n        this.sync = new EventEmitter();\n    }\n    handleClick() {\n        if (this.clickable) {\n            this.click.emit(this.integration);\n        }\n    }\n    handleConfigure(event) {\n        event.stopPropagation();\n        this.configure.emit(this.integration);\n    }\n    handleView(event) {\n        event.stopPropagation();\n        this.view.emit(this.integration);\n    }\n    handleSync(event) {\n        event.stopPropagation();\n        this.sync.emit(this.integration);\n    }\n    getStatusText(status) {\n        const statusMap = {\n            active: 'Active',\n            inactive: 'Inactive',\n            error: 'Error',\n            pending: 'Pending'\n        };\n        return statusMap[status] || status;\n    }\n    getRelativeTime(date) {\n        const now = new Date();\n        const diff = now.getTime() - new Date(date).getTime();\n        const minutes = Math.floor(diff / 60000);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0)\n            return `${days}d ago`;\n        if (hours > 0)\n            return `${hours}h ago`;\n        if (minutes > 0)\n            return `${minutes}m ago`;\n        return 'Just now';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggIntegrationCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggIntegrationCardComponent, isStandalone: true, selector: \"frigg-integration-card\", inputs: { integration: \"integration\", showMetrics: \"showMetrics\", showActions: \"showActions\", clickable: \"clickable\", actionsDisabled: \"actionsDisabled\" }, outputs: { click: \"click\", configure: \"configure\", view: \"view\", sync: \"sync\" }, ngImport: i0, template: `\n    <div \n      class=\"frigg-integration-card\"\n      [class.frigg-integration-card--active]=\"integration.status === 'active'\"\n      [class.frigg-integration-card--error]=\"integration.status === 'error'\"\n      [class.frigg-integration-card--clickable]=\"clickable\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-integration-card__header\">\n        <div class=\"frigg-integration-card__entities\">\n          <div \n            *ngFor=\"let entity of integration.entities; let i = index\"\n            class=\"frigg-integration-card__entity\"\n          >\n            <img \n              *ngIf=\"entity.icon\" \n              [src]=\"entity.icon\" \n              [alt]=\"entity.name\"\n              class=\"frigg-integration-card__entity-icon\"\n            >\n            <span class=\"frigg-integration-card__entity-name\">{{ entity.name }}</span>\n            <svg \n              *ngIf=\"i < integration.entities.length - 1\"\n              class=\"frigg-integration-card__arrow\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path fill-rule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n        \n        <div class=\"frigg-integration-card__status\">\n          <span \n            class=\"frigg-integration-card__status-badge\"\n            [class.frigg-integration-card__status-badge--active]=\"integration.status === 'active'\"\n            [class.frigg-integration-card__status-badge--error]=\"integration.status === 'error'\"\n            [class.frigg-integration-card__status-badge--pending]=\"integration.status === 'pending'\"\n          >\n            {{ getStatusText(integration.status) }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__content\">\n        <h3 class=\"frigg-integration-card__title\">{{ integration.name }}</h3>\n        <p class=\"frigg-integration-card__description\" *ngIf=\"integration.description\">\n          {{ integration.description }}\n        </p>\n      </div>\n\n      <div class=\"frigg-integration-card__metrics\" *ngIf=\"showMetrics && integration.metrics\">\n        <div class=\"frigg-integration-card__metric\">\n          <span class=\"frigg-integration-card__metric-label\">Synced Records</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ integration.metrics.syncedRecords || 0 | number }}\n          </span>\n        </div>\n        <div class=\"frigg-integration-card__metric\" *ngIf=\"integration.lastSync\">\n          <span class=\"frigg-integration-card__metric-label\">Last Sync</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ getRelativeTime(integration.lastSync) }}\n          </span>\n        </div>\n        <div \n          class=\"frigg-integration-card__metric\" \n          *ngIf=\"integration.metrics.errors && integration.metrics.errors > 0\"\n        >\n          <span class=\"frigg-integration-card__metric-label\">Errors</span>\n          <span class=\"frigg-integration-card__metric-value frigg-integration-card__metric-value--error\">\n            {{ integration.metrics.errors }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__actions\" *ngIf=\"showActions\">\n        <button \n          class=\"frigg-integration-card__action\"\n          (click)=\"handleConfigure($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Configure\n        </button>\n        <button \n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleView($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          View Details\n        </button>\n        <button \n          *ngIf=\"integration.status === 'active'\"\n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleSync($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Sync Now\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-integration-card{background:#fff;border:1px solid #E5E7EB;border-radius:12px;padding:20px;transition:all .2s ease}.frigg-integration-card--clickable{cursor:pointer}.frigg-integration-card--clickable:hover{border-color:#d1d5db;box-shadow:0 4px 6px -1px #0000001a,0 2px 4px -1px #0000000f}.frigg-integration-card--active{border-color:#10b981}.frigg-integration-card--error{border-color:#ef4444;background:#fef2f2}.frigg-integration-card__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.frigg-integration-card__entities{display:flex;align-items:center;gap:12px}.frigg-integration-card__entity{display:flex;align-items:center;gap:8px}.frigg-integration-card__entity-icon{width:24px;height:24px;border-radius:4px}.frigg-integration-card__entity-name{font-size:14px;font-weight:500;color:#374151}.frigg-integration-card__arrow{width:16px;height:16px;color:#9ca3af}.frigg-integration-card__status-badge{display:inline-flex;align-items:center;padding:4px 12px;border-radius:9999px;font-size:12px;font-weight:500;background:#f3f4f6;color:#6b7280}.frigg-integration-card__status-badge--active{background:#d1fae5;color:#065f46}.frigg-integration-card__status-badge--error{background:#fee2e2;color:#991b1b}.frigg-integration-card__status-badge--pending{background:#fef3c7;color:#92400e}.frigg-integration-card__content{margin-bottom:16px}.frigg-integration-card__title{font-size:16px;font-weight:600;color:#111827;margin:0 0 8px}.frigg-integration-card__description{font-size:14px;color:#6b7280;margin:0}.frigg-integration-card__metrics{display:flex;gap:24px;padding:16px 0;border-top:1px solid #E5E7EB;border-bottom:1px solid #E5E7EB;margin-bottom:16px}.frigg-integration-card__metric{display:flex;flex-direction:column;gap:4px}.frigg-integration-card__metric-label{font-size:12px;color:#6b7280}.frigg-integration-card__metric-value{font-size:16px;font-weight:600;color:#111827}.frigg-integration-card__metric-value--error{color:#ef4444}.frigg-integration-card__actions{display:flex;gap:12px}.frigg-integration-card__action{padding:8px 16px;border-radius:6px;font-size:14px;font-weight:500;cursor:pointer;transition:all .2s ease;background:#3b82f6;color:#fff;border:1px solid #3B82F6}.frigg-integration-card__action:hover{background:#2563eb;border-color:#2563eb}.frigg-integration-card__action:disabled{opacity:.5;cursor:not-allowed}.frigg-integration-card__action--secondary{background:#fff;color:#374151;border-color:#d1d5db}.frigg-integration-card__action--secondary:hover{background:#f9fafb;border-color:#9ca3af}@media (prefers-color-scheme: dark){.frigg-integration-card{background:#1f2937;border-color:#374151}.frigg-integration-card--error{background:#7f1d1d}.frigg-integration-card__entity-name{color:#d1d5db}.frigg-integration-card__title{color:#fff}.frigg-integration-card__description{color:#9ca3af}.frigg-integration-card__metrics{border-color:#374151}.frigg-integration-card__metric-label{color:#9ca3af}.frigg-integration-card__metric-value{color:#fff}.frigg-integration-card__action--secondary{background:#374151;color:#fff;border-color:#4b5563}.frigg-integration-card__action--secondary:hover{background:#4b5563;border-color:#6b7280}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: i1$1.DecimalPipe, name: \"number\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggIntegrationCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-integration-card', standalone: true, imports: [CommonModule], template: `\n    <div \n      class=\"frigg-integration-card\"\n      [class.frigg-integration-card--active]=\"integration.status === 'active'\"\n      [class.frigg-integration-card--error]=\"integration.status === 'error'\"\n      [class.frigg-integration-card--clickable]=\"clickable\"\n      (click)=\"handleClick()\"\n    >\n      <div class=\"frigg-integration-card__header\">\n        <div class=\"frigg-integration-card__entities\">\n          <div \n            *ngFor=\"let entity of integration.entities; let i = index\"\n            class=\"frigg-integration-card__entity\"\n          >\n            <img \n              *ngIf=\"entity.icon\" \n              [src]=\"entity.icon\" \n              [alt]=\"entity.name\"\n              class=\"frigg-integration-card__entity-icon\"\n            >\n            <span class=\"frigg-integration-card__entity-name\">{{ entity.name }}</span>\n            <svg \n              *ngIf=\"i < integration.entities.length - 1\"\n              class=\"frigg-integration-card__arrow\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path fill-rule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n        \n        <div class=\"frigg-integration-card__status\">\n          <span \n            class=\"frigg-integration-card__status-badge\"\n            [class.frigg-integration-card__status-badge--active]=\"integration.status === 'active'\"\n            [class.frigg-integration-card__status-badge--error]=\"integration.status === 'error'\"\n            [class.frigg-integration-card__status-badge--pending]=\"integration.status === 'pending'\"\n          >\n            {{ getStatusText(integration.status) }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__content\">\n        <h3 class=\"frigg-integration-card__title\">{{ integration.name }}</h3>\n        <p class=\"frigg-integration-card__description\" *ngIf=\"integration.description\">\n          {{ integration.description }}\n        </p>\n      </div>\n\n      <div class=\"frigg-integration-card__metrics\" *ngIf=\"showMetrics && integration.metrics\">\n        <div class=\"frigg-integration-card__metric\">\n          <span class=\"frigg-integration-card__metric-label\">Synced Records</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ integration.metrics.syncedRecords || 0 | number }}\n          </span>\n        </div>\n        <div class=\"frigg-integration-card__metric\" *ngIf=\"integration.lastSync\">\n          <span class=\"frigg-integration-card__metric-label\">Last Sync</span>\n          <span class=\"frigg-integration-card__metric-value\">\n            {{ getRelativeTime(integration.lastSync) }}\n          </span>\n        </div>\n        <div \n          class=\"frigg-integration-card__metric\" \n          *ngIf=\"integration.metrics.errors && integration.metrics.errors > 0\"\n        >\n          <span class=\"frigg-integration-card__metric-label\">Errors</span>\n          <span class=\"frigg-integration-card__metric-value frigg-integration-card__metric-value--error\">\n            {{ integration.metrics.errors }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"frigg-integration-card__actions\" *ngIf=\"showActions\">\n        <button \n          class=\"frigg-integration-card__action\"\n          (click)=\"handleConfigure($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Configure\n        </button>\n        <button \n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleView($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          View Details\n        </button>\n        <button \n          *ngIf=\"integration.status === 'active'\"\n          class=\"frigg-integration-card__action frigg-integration-card__action--secondary\"\n          (click)=\"handleSync($event)\"\n          [disabled]=\"actionsDisabled\"\n        >\n          Sync Now\n        </button>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-integration-card{background:#fff;border:1px solid #E5E7EB;border-radius:12px;padding:20px;transition:all .2s ease}.frigg-integration-card--clickable{cursor:pointer}.frigg-integration-card--clickable:hover{border-color:#d1d5db;box-shadow:0 4px 6px -1px #0000001a,0 2px 4px -1px #0000000f}.frigg-integration-card--active{border-color:#10b981}.frigg-integration-card--error{border-color:#ef4444;background:#fef2f2}.frigg-integration-card__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.frigg-integration-card__entities{display:flex;align-items:center;gap:12px}.frigg-integration-card__entity{display:flex;align-items:center;gap:8px}.frigg-integration-card__entity-icon{width:24px;height:24px;border-radius:4px}.frigg-integration-card__entity-name{font-size:14px;font-weight:500;color:#374151}.frigg-integration-card__arrow{width:16px;height:16px;color:#9ca3af}.frigg-integration-card__status-badge{display:inline-flex;align-items:center;padding:4px 12px;border-radius:9999px;font-size:12px;font-weight:500;background:#f3f4f6;color:#6b7280}.frigg-integration-card__status-badge--active{background:#d1fae5;color:#065f46}.frigg-integration-card__status-badge--error{background:#fee2e2;color:#991b1b}.frigg-integration-card__status-badge--pending{background:#fef3c7;color:#92400e}.frigg-integration-card__content{margin-bottom:16px}.frigg-integration-card__title{font-size:16px;font-weight:600;color:#111827;margin:0 0 8px}.frigg-integration-card__description{font-size:14px;color:#6b7280;margin:0}.frigg-integration-card__metrics{display:flex;gap:24px;padding:16px 0;border-top:1px solid #E5E7EB;border-bottom:1px solid #E5E7EB;margin-bottom:16px}.frigg-integration-card__metric{display:flex;flex-direction:column;gap:4px}.frigg-integration-card__metric-label{font-size:12px;color:#6b7280}.frigg-integration-card__metric-value{font-size:16px;font-weight:600;color:#111827}.frigg-integration-card__metric-value--error{color:#ef4444}.frigg-integration-card__actions{display:flex;gap:12px}.frigg-integration-card__action{padding:8px 16px;border-radius:6px;font-size:14px;font-weight:500;cursor:pointer;transition:all .2s ease;background:#3b82f6;color:#fff;border:1px solid #3B82F6}.frigg-integration-card__action:hover{background:#2563eb;border-color:#2563eb}.frigg-integration-card__action:disabled{opacity:.5;cursor:not-allowed}.frigg-integration-card__action--secondary{background:#fff;color:#374151;border-color:#d1d5db}.frigg-integration-card__action--secondary:hover{background:#f9fafb;border-color:#9ca3af}@media (prefers-color-scheme: dark){.frigg-integration-card{background:#1f2937;border-color:#374151}.frigg-integration-card--error{background:#7f1d1d}.frigg-integration-card__entity-name{color:#d1d5db}.frigg-integration-card__title{color:#fff}.frigg-integration-card__description{color:#9ca3af}.frigg-integration-card__metrics{border-color:#374151}.frigg-integration-card__metric-label{color:#9ca3af}.frigg-integration-card__metric-value{color:#fff}.frigg-integration-card__action--secondary{background:#374151;color:#fff;border-color:#4b5563}.frigg-integration-card__action--secondary:hover{background:#4b5563;border-color:#6b7280}}\\n\"] }]\n        }], propDecorators: { integration: [{\n                type: Input\n            }], showMetrics: [{\n                type: Input\n            }], showActions: [{\n                type: Input\n            }], clickable: [{\n                type: Input\n            }], actionsDisabled: [{\n                type: Input\n            }], click: [{\n                type: Output\n            }], configure: [{\n                type: Output\n            }], view: [{\n                type: Output\n            }], sync: [{\n                type: Output\n            }] } });\n\n/**\n * Angular Alerts Panel Component\n * Displays and manages integration alerts with real-time updates\n */\nclass FriggAlertsPanelComponent {\n    constructor(alertsService, cdr) {\n        this.alertsService = alertsService;\n        this.cdr = cdr;\n        this.limit = 20;\n        this.autoRefresh = true;\n        this.refreshInterval = 30000;\n        this.showLoadMore = true;\n        this.currentUserId = 'system';\n        this.alerts = [];\n        this.filteredAlerts = [];\n        this.loading = false;\n        this.hasMore = false;\n        this.activeFilter = 'All';\n        this.filters = ['All', 'Active', 'Critical', 'Acknowledged'];\n        this.destroy$ = new Subject();\n        this.offset = 0;\n    }\n    ngOnInit() {\n        // Subscribe to alerts\n        this.alertsService.alerts$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(alerts => {\n            this.alerts = alerts;\n            this.applyFilter();\n            this.cdr.markForCheck();\n        });\n        // Subscribe to loading state\n        this.alertsService.loading$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(loading => {\n            this.loading = loading;\n            this.cdr.markForCheck();\n        });\n        // Initial load\n        this.loadAlerts();\n        // Set up auto-refresh if enabled\n        if (this.autoRefresh) {\n            this.alertsService.setupAutoRefresh(this.integrationId, this.refreshInterval)\n                .pipe(takeUntil(this.destroy$))\n                .subscribe();\n        }\n        // Subscribe to real-time alerts\n        this.alertsService.subscribeToAlerts(this.integrationId)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe();\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    loadAlerts() {\n        this.alertsService.fetchAlerts(this.integrationId, {\n            limit: this.limit,\n            offset: this.offset\n        }).subscribe(alerts => {\n            this.hasMore = alerts.length === this.limit;\n        });\n    }\n    loadMore() {\n        this.offset += this.limit;\n        this.loadAlerts();\n    }\n    refresh() {\n        this.offset = 0;\n        this.alertsService.refresh();\n    }\n    setFilter(filter) {\n        this.activeFilter = filter;\n        this.applyFilter();\n    }\n    applyFilter() {\n        switch (this.activeFilter) {\n            case 'Active':\n                this.filteredAlerts = this.alerts.filter(a => a.status === 'active');\n                break;\n            case 'Critical':\n                this.filteredAlerts = this.alerts.filter(a => a.severity === 'critical');\n                break;\n            case 'Acknowledged':\n                this.filteredAlerts = this.alerts.filter(a => a.status === 'acknowledged');\n                break;\n            default:\n                this.filteredAlerts = this.alerts;\n        }\n    }\n    getFilterCount(filter) {\n        switch (filter) {\n            case 'Active':\n                return this.alerts.filter(a => a.status === 'active').length;\n            case 'Critical':\n                return this.alerts.filter(a => a.severity === 'critical').length;\n            case 'Acknowledged':\n                return this.alerts.filter(a => a.status === 'acknowledged').length;\n            default:\n                return this.alerts.length;\n        }\n    }\n    acknowledgeAlert(alert) {\n        this.alertsService.acknowledgeAlert(alert.id, this.currentUserId).subscribe();\n    }\n    resolveAlert(alert) {\n        const resolution = prompt('Enter resolution details:');\n        if (resolution) {\n            this.alertsService.resolveAlert(alert.id, this.currentUserId, resolution).subscribe();\n        }\n    }\n    trackByAlertId(index, alert) {\n        return alert.id;\n    }\n    getRelativeTime(timestamp) {\n        const now = new Date();\n        const alertTime = new Date(timestamp);\n        const diff = now.getTime() - alertTime.getTime();\n        const minutes = Math.floor(diff / 60000);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0)\n            return `${days}d ago`;\n        if (hours > 0)\n            return `${hours}h ago`;\n        if (minutes > 0)\n            return `${minutes}m ago`;\n        return 'Just now';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggAlertsPanelComponent, deps: [{ token: AlertsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: FriggAlertsPanelComponent, isStandalone: true, selector: \"frigg-alerts-panel\", inputs: { integrationId: \"integrationId\", limit: \"limit\", autoRefresh: \"autoRefresh\", refreshInterval: \"refreshInterval\", showLoadMore: \"showLoadMore\", currentUserId: \"currentUserId\" }, ngImport: i0, template: `\n    <div class=\"frigg-alerts-panel\">\n      <div class=\"frigg-alerts-panel__header\">\n        <h2 class=\"frigg-alerts-panel__title\">Alerts</h2>\n        <div class=\"frigg-alerts-panel__actions\">\n          <button \n            class=\"frigg-alerts-panel__filter\"\n            [class.frigg-alerts-panel__filter--active]=\"activeFilter === filter\"\n            *ngFor=\"let filter of filters\"\n            (click)=\"setFilter(filter)\"\n          >\n            {{ filter }}\n            <span class=\"frigg-alerts-panel__filter-count\" *ngIf=\"getFilterCount(filter) > 0\">\n              {{ getFilterCount(filter) }}\n            </span>\n          </button>\n          <button \n            class=\"frigg-alerts-panel__refresh\"\n            (click)=\"refresh()\"\n            [disabled]=\"loading\"\n          >\n            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__content\">\n        <frigg-loading-spinner \n          *ngIf=\"loading && !alerts.length\"\n          [text]=\"'Loading alerts...'\"\n        ></frigg-loading-spinner>\n\n        <div \n          class=\"frigg-alerts-panel__empty\" \n          *ngIf=\"!loading && filteredAlerts.length === 0\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n          </svg>\n          <p>No alerts found</p>\n        </div>\n\n        <div class=\"frigg-alerts-panel__list\" *ngIf=\"filteredAlerts.length > 0\">\n          <div \n            *ngFor=\"let alert of filteredAlerts; trackBy: trackByAlertId\"\n            class=\"frigg-alerts-panel__alert\"\n            [class.frigg-alerts-panel__alert--critical]=\"alert.severity === 'critical'\"\n            [class.frigg-alerts-panel__alert--high]=\"alert.severity === 'high'\"\n            [class.frigg-alerts-panel__alert--medium]=\"alert.severity === 'medium'\"\n            [class.frigg-alerts-panel__alert--low]=\"alert.severity === 'low'\"\n            [class.frigg-alerts-panel__alert--acknowledged]=\"alert.status === 'acknowledged'\"\n          >\n            <div class=\"frigg-alerts-panel__alert-icon\">\n              <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            \n            <div class=\"frigg-alerts-panel__alert-content\">\n              <h3 class=\"frigg-alerts-panel__alert-title\">{{ alert.title }}</h3>\n              <p class=\"frigg-alerts-panel__alert-description\">{{ alert.description }}</p>\n              <div class=\"frigg-alerts-panel__alert-meta\">\n                <span class=\"frigg-alerts-panel__alert-time\">\n                  {{ getRelativeTime(alert.timestamp) }}\n                </span>\n                <span class=\"frigg-alerts-panel__alert-severity\">\n                  {{ alert.severity }}\n                </span>\n              </div>\n            </div>\n\n            <div class=\"frigg-alerts-panel__alert-actions\">\n              <button \n                *ngIf=\"alert.status === 'active'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"acknowledgeAlert(alert)\"\n                title=\"Acknowledge\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n              <button \n                *ngIf=\"alert.status !== 'resolved'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"resolveAlert(alert)\"\n                title=\"Resolve\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__footer\" *ngIf=\"showLoadMore && hasMore\">\n        <button \n          class=\"frigg-alerts-panel__load-more\"\n          (click)=\"loadMore()\"\n          [disabled]=\"loading\"\n        >\n          Load More\n        </button>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".frigg-alerts-panel{background:#fff;border:1px solid #E5E7EB;border-radius:12px;overflow:hidden}.frigg-alerts-panel__header{display:flex;justify-content:space-between;align-items:center;padding:16px 20px;border-bottom:1px solid #E5E7EB}.frigg-alerts-panel__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-alerts-panel__actions{display:flex;gap:8px}.frigg-alerts-panel__filter{display:flex;align-items:center;gap:4px;padding:6px 12px;background:transparent;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__filter:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__filter--active{background:#3b82f6;border-color:#3b82f6;color:#fff}.frigg-alerts-panel__filter-count{padding:2px 6px;background:#0000001a;border-radius:9999px;font-size:12px;font-weight:500}.frigg-alerts-panel__refresh{display:flex;align-items:center;justify-content:center;width:36px;height:36px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__refresh:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__refresh:disabled{opacity:.5;cursor:not-allowed}.frigg-alerts-panel__refresh svg{width:20px;height:20px}.frigg-alerts-panel__content{min-height:200px;max-height:600px;overflow-y:auto}.frigg-alerts-panel__empty{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:60px 20px;color:#9ca3af}.frigg-alerts-panel__empty svg{width:48px;height:48px;margin-bottom:16px}.frigg-alerts-panel__list{padding:0}.frigg-alerts-panel__alert{display:flex;gap:16px;padding:16px 20px;border-bottom:1px solid #E5E7EB;transition:background .2s ease}.frigg-alerts-panel__alert:hover{background:#f9fafb}.frigg-alerts-panel__alert:last-child{border-bottom:none}.frigg-alerts-panel__alert--acknowledged{opacity:.7}.frigg-alerts-panel__alert-icon{flex-shrink:0;width:40px;height:40px;display:flex;align-items:center;justify-content:center;border-radius:8px;background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--critical .frigg-alerts-panel__alert-icon{background:#fee2e2;color:#dc2626}.frigg-alerts-panel__alert--high .frigg-alerts-panel__alert-icon{background:#ffedd5;color:#ea580c}.frigg-alerts-panel__alert--medium .frigg-alerts-panel__alert-icon{background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--low .frigg-alerts-panel__alert-icon{background:#dbeafe;color:#2563eb}.frigg-alerts-panel__alert-icon svg{width:20px;height:20px}.frigg-alerts-panel__alert-content{flex:1;min-width:0}.frigg-alerts-panel__alert-title{font-size:14px;font-weight:600;color:#111827;margin:0 0 4px}.frigg-alerts-panel__alert-description{font-size:14px;color:#6b7280;margin:0 0 8px}.frigg-alerts-panel__alert-meta{display:flex;gap:16px;font-size:12px;color:#9ca3af}.frigg-alerts-panel__alert-severity{text-transform:uppercase;font-weight:500}.frigg-alerts-panel__alert-actions{display:flex;gap:8px;align-items:center}.frigg-alerts-panel__alert-action{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__alert-action:hover{background:#fff;border-color:#d1d5db;color:#374151}.frigg-alerts-panel__alert-action svg{width:16px;height:16px}.frigg-alerts-panel__footer{padding:16px 20px;border-top:1px solid #E5E7EB;text-align:center}.frigg-alerts-panel__load-more{padding:8px 24px;background:#fff;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__load-more:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__load-more:disabled{opacity:.5;cursor:not-allowed}@media (prefers-color-scheme: dark){.frigg-alerts-panel{background:#1f2937;border-color:#374151}.frigg-alerts-panel__header{border-color:#374151}.frigg-alerts-panel__title{color:#fff}.frigg-alerts-panel__filter{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__filter:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__refresh{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__refresh:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__alert{border-color:#374151}.frigg-alerts-panel__alert:hover{background:#374151}.frigg-alerts-panel__alert-title{color:#fff}.frigg-alerts-panel__alert-description{color:#d1d5db}.frigg-alerts-panel__alert-action{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__alert-action:hover{background:#4b5563;border-color:#6b7280;color:#fff}.frigg-alerts-panel__footer{border-color:#374151}.frigg-alerts-panel__load-more{background:#374151;border-color:#4b5563;color:#fff}.frigg-alerts-panel__load-more:hover{background:#4b5563;border-color:#6b7280}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: FriggLoadingSpinnerComponent, selector: \"frigg-loading-spinner\", inputs: [\"size\", \"text\", \"inline\", \"overlay\", \"label\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggAlertsPanelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'frigg-alerts-panel', standalone: true, imports: [CommonModule, FriggLoadingSpinnerComponent], template: `\n    <div class=\"frigg-alerts-panel\">\n      <div class=\"frigg-alerts-panel__header\">\n        <h2 class=\"frigg-alerts-panel__title\">Alerts</h2>\n        <div class=\"frigg-alerts-panel__actions\">\n          <button \n            class=\"frigg-alerts-panel__filter\"\n            [class.frigg-alerts-panel__filter--active]=\"activeFilter === filter\"\n            *ngFor=\"let filter of filters\"\n            (click)=\"setFilter(filter)\"\n          >\n            {{ filter }}\n            <span class=\"frigg-alerts-panel__filter-count\" *ngIf=\"getFilterCount(filter) > 0\">\n              {{ getFilterCount(filter) }}\n            </span>\n          </button>\n          <button \n            class=\"frigg-alerts-panel__refresh\"\n            (click)=\"refresh()\"\n            [disabled]=\"loading\"\n          >\n            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__content\">\n        <frigg-loading-spinner \n          *ngIf=\"loading && !alerts.length\"\n          [text]=\"'Loading alerts...'\"\n        ></frigg-loading-spinner>\n\n        <div \n          class=\"frigg-alerts-panel__empty\" \n          *ngIf=\"!loading && filteredAlerts.length === 0\"\n        >\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n          </svg>\n          <p>No alerts found</p>\n        </div>\n\n        <div class=\"frigg-alerts-panel__list\" *ngIf=\"filteredAlerts.length > 0\">\n          <div \n            *ngFor=\"let alert of filteredAlerts; trackBy: trackByAlertId\"\n            class=\"frigg-alerts-panel__alert\"\n            [class.frigg-alerts-panel__alert--critical]=\"alert.severity === 'critical'\"\n            [class.frigg-alerts-panel__alert--high]=\"alert.severity === 'high'\"\n            [class.frigg-alerts-panel__alert--medium]=\"alert.severity === 'medium'\"\n            [class.frigg-alerts-panel__alert--low]=\"alert.severity === 'low'\"\n            [class.frigg-alerts-panel__alert--acknowledged]=\"alert.status === 'acknowledged'\"\n          >\n            <div class=\"frigg-alerts-panel__alert-icon\">\n              <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            \n            <div class=\"frigg-alerts-panel__alert-content\">\n              <h3 class=\"frigg-alerts-panel__alert-title\">{{ alert.title }}</h3>\n              <p class=\"frigg-alerts-panel__alert-description\">{{ alert.description }}</p>\n              <div class=\"frigg-alerts-panel__alert-meta\">\n                <span class=\"frigg-alerts-panel__alert-time\">\n                  {{ getRelativeTime(alert.timestamp) }}\n                </span>\n                <span class=\"frigg-alerts-panel__alert-severity\">\n                  {{ alert.severity }}\n                </span>\n              </div>\n            </div>\n\n            <div class=\"frigg-alerts-panel__alert-actions\">\n              <button \n                *ngIf=\"alert.status === 'active'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"acknowledgeAlert(alert)\"\n                title=\"Acknowledge\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n              <button \n                *ngIf=\"alert.status !== 'resolved'\"\n                class=\"frigg-alerts-panel__alert-action\"\n                (click)=\"resolveAlert(alert)\"\n                title=\"Resolve\"\n              >\n                <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"frigg-alerts-panel__footer\" *ngIf=\"showLoadMore && hasMore\">\n        <button \n          class=\"frigg-alerts-panel__load-more\"\n          (click)=\"loadMore()\"\n          [disabled]=\"loading\"\n        >\n          Load More\n        </button>\n      </div>\n    </div>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".frigg-alerts-panel{background:#fff;border:1px solid #E5E7EB;border-radius:12px;overflow:hidden}.frigg-alerts-panel__header{display:flex;justify-content:space-between;align-items:center;padding:16px 20px;border-bottom:1px solid #E5E7EB}.frigg-alerts-panel__title{font-size:18px;font-weight:600;color:#111827;margin:0}.frigg-alerts-panel__actions{display:flex;gap:8px}.frigg-alerts-panel__filter{display:flex;align-items:center;gap:4px;padding:6px 12px;background:transparent;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__filter:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__filter--active{background:#3b82f6;border-color:#3b82f6;color:#fff}.frigg-alerts-panel__filter-count{padding:2px 6px;background:#0000001a;border-radius:9999px;font-size:12px;font-weight:500}.frigg-alerts-panel__refresh{display:flex;align-items:center;justify-content:center;width:36px;height:36px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__refresh:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__refresh:disabled{opacity:.5;cursor:not-allowed}.frigg-alerts-panel__refresh svg{width:20px;height:20px}.frigg-alerts-panel__content{min-height:200px;max-height:600px;overflow-y:auto}.frigg-alerts-panel__empty{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:60px 20px;color:#9ca3af}.frigg-alerts-panel__empty svg{width:48px;height:48px;margin-bottom:16px}.frigg-alerts-panel__list{padding:0}.frigg-alerts-panel__alert{display:flex;gap:16px;padding:16px 20px;border-bottom:1px solid #E5E7EB;transition:background .2s ease}.frigg-alerts-panel__alert:hover{background:#f9fafb}.frigg-alerts-panel__alert:last-child{border-bottom:none}.frigg-alerts-panel__alert--acknowledged{opacity:.7}.frigg-alerts-panel__alert-icon{flex-shrink:0;width:40px;height:40px;display:flex;align-items:center;justify-content:center;border-radius:8px;background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--critical .frigg-alerts-panel__alert-icon{background:#fee2e2;color:#dc2626}.frigg-alerts-panel__alert--high .frigg-alerts-panel__alert-icon{background:#ffedd5;color:#ea580c}.frigg-alerts-panel__alert--medium .frigg-alerts-panel__alert-icon{background:#fef3c7;color:#d97706}.frigg-alerts-panel__alert--low .frigg-alerts-panel__alert-icon{background:#dbeafe;color:#2563eb}.frigg-alerts-panel__alert-icon svg{width:20px;height:20px}.frigg-alerts-panel__alert-content{flex:1;min-width:0}.frigg-alerts-panel__alert-title{font-size:14px;font-weight:600;color:#111827;margin:0 0 4px}.frigg-alerts-panel__alert-description{font-size:14px;color:#6b7280;margin:0 0 8px}.frigg-alerts-panel__alert-meta{display:flex;gap:16px;font-size:12px;color:#9ca3af}.frigg-alerts-panel__alert-severity{text-transform:uppercase;font-weight:500}.frigg-alerts-panel__alert-actions{display:flex;gap:8px;align-items:center}.frigg-alerts-panel__alert-action{display:flex;align-items:center;justify-content:center;width:32px;height:32px;padding:0;background:transparent;border:1px solid #E5E7EB;border-radius:6px;color:#6b7280;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__alert-action:hover{background:#fff;border-color:#d1d5db;color:#374151}.frigg-alerts-panel__alert-action svg{width:16px;height:16px}.frigg-alerts-panel__footer{padding:16px 20px;border-top:1px solid #E5E7EB;text-align:center}.frigg-alerts-panel__load-more{padding:8px 24px;background:#fff;border:1px solid #E5E7EB;border-radius:6px;font-size:14px;font-weight:500;color:#374151;cursor:pointer;transition:all .2s ease}.frigg-alerts-panel__load-more:hover{background:#f9fafb;border-color:#d1d5db}.frigg-alerts-panel__load-more:disabled{opacity:.5;cursor:not-allowed}@media (prefers-color-scheme: dark){.frigg-alerts-panel{background:#1f2937;border-color:#374151}.frigg-alerts-panel__header{border-color:#374151}.frigg-alerts-panel__title{color:#fff}.frigg-alerts-panel__filter{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__filter:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__refresh{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__refresh:hover{background:#374151;border-color:#4b5563}.frigg-alerts-panel__alert{border-color:#374151}.frigg-alerts-panel__alert:hover{background:#374151}.frigg-alerts-panel__alert-title{color:#fff}.frigg-alerts-panel__alert-description{color:#d1d5db}.frigg-alerts-panel__alert-action{border-color:#374151;color:#d1d5db}.frigg-alerts-panel__alert-action:hover{background:#4b5563;border-color:#6b7280;color:#fff}.frigg-alerts-panel__footer{border-color:#374151}.frigg-alerts-panel__load-more{background:#374151;border-color:#4b5563;color:#fff}.frigg-alerts-panel__load-more:hover{background:#4b5563;border-color:#6b7280}}\\n\"] }]\n        }], ctorParameters: () => [{ type: AlertsService }, { type: i0.ChangeDetectorRef }], propDecorators: { integrationId: [{\n                type: Input\n            }], limit: [{\n                type: Input\n            }], autoRefresh: [{\n                type: Input\n            }], refreshInterval: [{\n                type: Input\n            }], showLoadMore: [{\n                type: Input\n            }], currentUserId: [{\n                type: Input\n            }] } });\n\n/**\n * Angular plugin adapter for @friggframework/ui-core\n * Implements FrameworkPlugin interface for Angular-specific functionality\n */\n/**\n * Angular-specific adapter for framework integration\n */\nclass AngularAdapter extends FrameworkAdapter {\n    constructor(injector, ngZone) {\n        super('angular');\n        this.injector = injector;\n        this.ngZone = ngZone;\n    }\n    // Angular reactive state management using RxJS\n    createState(initialState) {\n        return new BehaviorSubject(initialState);\n    }\n    // Angular effect using RxJS subscriptions\n    createEffect(callback, dependencies) {\n        if (dependencies && dependencies.length > 0) {\n            // Combine dependencies and subscribe\n            const subscription = dependencies[0].subscribe(() => {\n                this.ngZone.run(() => callback());\n            });\n            return () => subscription.unsubscribe();\n        }\n        // Run immediately in Angular zone\n        this.ngZone.run(() => callback());\n        return () => { };\n    }\n    // Angular component creation helper\n    createElement(type, props = {}, children = []) {\n        return {\n            type,\n            props,\n            children,\n            framework: 'angular'\n        };\n    }\n    // Angular event binding\n    bindEvent(element, event, handler) {\n        if (element && element.addEventListener) {\n            // Run event handler in Angular zone\n            const wrappedHandler = (e) => {\n                this.ngZone.run(() => handler(e));\n            };\n            element.addEventListener(event, wrappedHandler);\n            return () => element.removeEventListener(event, wrappedHandler);\n        }\n        return () => { };\n    }\n    // Angular-specific computed values using RxJS\n    createComputed(getter, dependencies = []) {\n        if (dependencies.length === 0) {\n            return of(getter()).pipe(shareReplay(1));\n        }\n        // Create derived observable\n        return dependencies[0].pipe(map(() => getter()), distinctUntilChanged(), shareReplay(1));\n    }\n    // Angular change detection trigger\n    detectChanges() {\n        const appRef = this.injector.get(ApplicationRef);\n        appRef.tick();\n    }\n    // Create Angular-compatible Subject\n    createSubject() {\n        return new Subject();\n    }\n    // Run code outside Angular zone (for performance)\n    runOutsideAngular(fn) {\n        return this.ngZone.runOutsideAngular(fn);\n    }\n    // Run code inside Angular zone\n    runInAngular(fn) {\n        return this.ngZone.run(fn);\n    }\n}\n/**\n * Angular Framework Plugin for ui-core\n */\nclass AngularPlugin extends FrameworkPlugin {\n    constructor(injector, ngZone) {\n        super('angular', '17.x');\n        this.injector = injector;\n        this.ngZone = ngZone;\n    }\n    // Initialize the plugin\n    initialize() {\n        this.adapter = new AngularAdapter(this.injector, this.ngZone);\n        this.setupHooks();\n        this.setupAdapters();\n    }\n    setupHooks() {\n        // State management hook using RxJS\n        this.registerHook(HOOKS.STATE_MANAGER, (initialState) => {\n            return this.adapter.createState(initialState);\n        });\n        // Effect management hook using Angular zones\n        this.registerHook(HOOKS.EFFECT_MANAGER, (callback, dependencies) => {\n            return this.adapter.createEffect(callback, dependencies);\n        });\n        // Event management hook\n        this.registerHook(HOOKS.EVENT_MANAGER, (element, event, handler) => {\n            return this.adapter.bindEvent(element, event, handler);\n        });\n        // Component renderer hook for dynamic components\n        this.registerHook(HOOKS.COMPONENT_RENDERER, (type, props, children) => {\n            return this.adapter.createElement(type, props, children);\n        });\n        // HTTP client hook - delegate to Angular HttpClient via services\n        this.registerHook(HOOKS.HTTP_CLIENT, (config) => {\n            // This will be handled by Angular's HttpClient service\n            return null;\n        });\n    }\n    setupAdapters() {\n        // State adapter for RxJS observables\n        this.registerAdapter(ADAPTERS.STATE, {\n            create: (initialState) => this.adapter.createState(initialState),\n            behaviorSubject: (value) => new BehaviorSubject(value),\n            subject: () => new Subject(),\n            observable: (value) => of(value),\n            from: (promise) => from(promise),\n            // Helper to convert observable to signal (for Angular 16+)\n            toSignal: (observable) => {\n                // This would use Angular's toSignal function if available\n                return observable;\n            }\n        });\n        // Effects adapter for Angular lifecycle\n        this.registerAdapter(ADAPTERS.EFFECTS, {\n            // Run effect in Angular zone\n            effect: (callback, dependencies) => this.adapter.createEffect(callback, dependencies),\n            // Run outside Angular for performance\n            runOutsideAngular: (fn) => this.adapter.runOutsideAngular(fn),\n            // Trigger change detection\n            detectChanges: () => this.adapter.detectChanges(),\n            // Subscribe to observable\n            subscribe: (observable, callback) => {\n                const subscription = observable.subscribe(value => {\n                    this.ngZone.run(() => callback(value));\n                });\n                return () => subscription.unsubscribe();\n            }\n        });\n        // Events adapter\n        this.registerAdapter(ADAPTERS.EVENTS, {\n            bind: (element, event, handler) => this.adapter.bindEvent(element, event, handler),\n            emit: (subject, value) => {\n                this.ngZone.run(() => subject.next(value));\n            },\n            // Create custom event emitter\n            createEmitter: () => new Subject()\n        });\n        // Angular-specific dependency injection adapter\n        this.registerAdapter('injection', {\n            get: (token) => this.injector.get(token),\n            has: (token) => {\n                try {\n                    this.injector.get(token);\n                    return true;\n                }\n                catch {\n                    return false;\n                }\n            },\n            create: (token, options) => {\n                // Use injector to create instance\n                return this.injector.get(token, options);\n            }\n        });\n        // RxJS operators adapter\n        this.registerAdapter('rxjs', {\n            operators: {\n                map,\n                distinctUntilChanged,\n                shareReplay,\n                // Add more operators as needed\n            },\n            // Helper to create pipeable operators\n            pipe: (...operators) => (source) => source.pipe(...operators)\n        });\n    }\n    // Angular-specific initialization\n    init(core) {\n        // Store reference to ui-core instance\n        this.core = core;\n        // Set up Angular-specific components\n        this.setupComponents();\n        console.log('Angular plugin initialized with ui-core');\n    }\n    setupComponents() {\n        // Register Angular component references\n        // These will be implemented as actual Angular components\n        this.registerComponent(COMPONENTS$1.TOAST, 'FriggToastComponent');\n        this.registerComponent(COMPONENTS$1.MODAL, 'FriggModalComponent');\n        this.registerComponent(COMPONENTS$1.LOADING_SPINNER, 'FriggLoadingSpinnerComponent');\n        this.registerComponent(COMPONENTS$1.BUTTON, 'FriggButtonComponent');\n        this.registerComponent(COMPONENTS$1.INPUT, 'FriggInputComponent');\n        this.registerComponent(COMPONENTS$1.TABLE, 'FriggTableComponent');\n        this.registerComponent(COMPONENTS$1.FORM, 'FriggFormComponent');\n    }\n    // Angular-specific cleanup\n    destroy(core) {\n        console.log('Angular plugin destroyed');\n    }\n    // Get Angular adapter\n    getAngularAdapter() {\n        if (!this.adapter) {\n            this.initialize();\n        }\n        return this.adapter;\n    }\n    // Helper to create Observable from ui-core service\n    createObservableFromService(service, transformFn) {\n        const subject = new BehaviorSubject(transformFn ? transformFn(service.getState()) : service.getState());\n        // Subscribe to service updates\n        const unsubscribe = service.subscribe((state) => {\n            this.ngZone.run(() => {\n                subject.next(transformFn ? transformFn(state) : state);\n            });\n        });\n        // Return observable with cleanup\n        return new Observable(observer => {\n            const subscription = subject.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                unsubscribe();\n            };\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, deps: [{ token: i0.Injector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: AngularPlugin, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: i0.NgZone }] });\n// Export factory function for Angular module\nfunction createAngularPlugin(injector, ngZone) {\n    const plugin = new AngularPlugin(injector, ngZone);\n    plugin.initialize();\n    return plugin;\n}\n\n/**\n * Angular services for @friggframework/ui-angular\n * Export all services for easy import\n */\n\n/**\n * Angular components for @friggframework/ui-angular\n * Export all components for easy import\n */\n// Toast components\n\n/**\n * Angular Module for Frigg UI\n * Provides all components and services in a single module\n */\nconst FRIGG_UI_CONFIG = new InjectionToken('FRIGG_UI_CONFIG');\n// All components that should be exported\nconst COMPONENTS = [\n    FriggToastComponent,\n    FriggToastContainerComponent,\n    FriggLoadingSpinnerComponent,\n    FriggModalComponent,\n    FriggIntegrationCardComponent,\n    FriggAlertsPanelComponent\n];\nclass FriggUiModule {\n    /**\n     * Configure the module with providers\n     */\n    static forRoot(config) {\n        return {\n            ngModule: FriggUiModule,\n            providers: [\n                {\n                    provide: FRIGG_UI_CONFIG,\n                    useValue: config || {}\n                },\n                ToastService,\n                ApiService,\n                AlertsService,\n                CloudWatchService,\n                {\n                    provide: AngularPlugin,\n                    useFactory: createAngularPlugin,\n                    deps: ['$injector', 'ngZone']\n                }\n            ]\n        };\n    }\n    /**\n     * Import module without providers (for feature modules)\n     */\n    static forChild() {\n        return {\n            ngModule: FriggUiModule,\n            providers: []\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, imports: [CommonModule,\n            HttpClientModule, FriggToastComponent,\n            FriggToastContainerComponent,\n            FriggLoadingSpinnerComponent,\n            FriggModalComponent,\n            FriggIntegrationCardComponent,\n            FriggAlertsPanelComponent], exports: [FriggToastComponent,\n            FriggToastContainerComponent,\n            FriggLoadingSpinnerComponent,\n            FriggModalComponent,\n            FriggIntegrationCardComponent,\n            FriggAlertsPanelComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, imports: [CommonModule,\n            HttpClientModule, COMPONENTS // Import standalone components\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: FriggUiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        CommonModule,\n                        HttpClientModule,\n                        ...COMPONENTS // Import standalone components\n                    ],\n                    exports: [\n                        ...COMPONENTS // Export all components\n                    ]\n                }]\n        }] });\n\n/**\n * Angular providers for standalone usage\n * Provides configuration for applications using standalone components\n */\nconst FRIGG_PROVIDER_CONFIG = new InjectionToken('FRIGG_PROVIDER_CONFIG');\n/**\n * Factory function to initialize ApiService with configuration\n */\nfunction apiServiceFactory(http, config) {\n    const service = new ApiService(http);\n    if (config.apiBaseUrl) {\n        service.setBaseUrl(config.apiBaseUrl);\n    }\n    if (config.authToken) {\n        service.setAuthToken(config.authToken);\n    }\n    return service;\n}\n/**\n * Provide Frigg UI services for standalone components\n */\nfunction provideFriggUi(config) {\n    return makeEnvironmentProviders([\n        {\n            provide: FRIGG_PROVIDER_CONFIG,\n            useValue: config || {}\n        },\n        ToastService,\n        {\n            provide: ApiService,\n            useFactory: apiServiceFactory,\n            deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n        },\n        AlertsService,\n        CloudWatchService,\n        {\n            provide: AngularPlugin,\n            useFactory: createAngularPlugin,\n            deps: ['$injector', 'ngZone']\n        }\n    ]);\n}\n/**\n * Individual service providers for selective imports\n */\nconst TOAST_PROVIDERS = [\n    ToastService\n];\nconst API_PROVIDERS = [\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\nconst ALERTS_PROVIDERS = [\n    AlertsService,\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\nconst CLOUDWATCH_PROVIDERS = [\n    CloudWatchService,\n    {\n        provide: ApiService,\n        useFactory: apiServiceFactory,\n        deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n    }\n];\n/**\n * Helper function to configure API service in application\n */\nfunction configureFriggApi(baseUrl, authToken) {\n    return [\n        {\n            provide: FRIGG_PROVIDER_CONFIG,\n            useValue: { apiBaseUrl: baseUrl, authToken }\n        },\n        {\n            provide: ApiService,\n            useFactory: apiServiceFactory,\n            deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\n        }\n    ];\n}\n\n/**\n * Public API Surface of @friggframework/ui-angular\n * This file defines all exports for the Angular package\n */\n// Services\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ALERTS_PROVIDERS, API_PROVIDERS, AlertsService, AngularAdapter, AngularPlugin, ApiService, CLOUDWATCH_PROVIDERS, CloudWatchService, FRIGG_PROVIDER_CONFIG, FRIGG_UI_CONFIG, FriggAlertsPanelComponent, FriggIntegrationCardComponent, FriggLoadingSpinnerComponent, FriggModalComponent, FriggToastComponent, FriggToastContainerComponent, FriggUiModule, TOAST_PROVIDERS, ToastService, apiServiceFactory, configureFriggApi, createAngularPlugin, provideFriggUi };\n//# sourceMappingURL=friggframework-ui-angular.mjs.map\n","map":null,"preliminaryFileName":"friggframework-ui-angular.mjs","sourcemapFileName":"friggframework-ui-angular.mjs.map"},{"fileName":"friggframework-ui-angular.mjs.map","names":[],"needsCodeReference":false,"originalFileName":null,"originalFileNames":[],"source":"{\"version\":3,\"file\":\"friggframework-ui-angular.mjs\",\"sources\":[\"../../src/services/toast.service.ts\",\"../../src/services/api.service.ts\",\"../../src/services/alerts.service.ts\",\"../../src/services/cloudwatch.service.ts\",\"../../src/components/toast/toast.component.ts\",\"../../src/components/toast/toast-container.component.ts\",\"../../src/components/loading/loading-spinner.component.ts\",\"../../src/components/modal/modal.component.ts\",\"../../src/components/integration/integration-card.component.ts\",\"../../src/components/alerts/alerts-panel.component.ts\",\"../../src/plugins/angular-plugin.ts\",\"../../src/services/index.ts\",\"../../src/components/index.ts\",\"../../src/lib/frigg-ui.module.ts\",\"../../src/lib/providers.ts\",\"../../src/public-api.ts\",\"../../src/friggframework-ui-angular.ts\"],\"sourcesContent\":[\"/**\\n * Angular Toast Service\\n * Wraps ui-core ToastManager with RxJS observables for Angular integration\\n */\\n\\nimport { Injectable, NgZone } from '@angular/core';\\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\\nimport { map, distinctUntilChanged } from 'rxjs/operators';\\nimport { ToastManager } from '@friggframework/ui-core';\\n\\nexport interface Toast {\\n  id: string;\\n  title?: string;\\n  description?: string;\\n  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';\\n  duration?: number;\\n  open?: boolean;\\n  onOpenChange?: (open: boolean) => void;\\n  action?: {\\n    label: string;\\n    onClick: () => void;\\n  };\\n}\\n\\nexport interface ToastState {\\n  toasts: Toast[];\\n}\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class ToastService {\\n  private toastManager: ToastManager;\\n  private stateSubject: BehaviorSubject<ToastState>;\\n  private toastAddedSubject: Subject<Toast>;\\n  private toastRemovedSubject: Subject<string>;\\n  private unsubscribe?: () => void;\\n\\n  // Observable streams\\n  public state$: Observable<ToastState>;\\n  public toasts$: Observable<Toast[]>;\\n  public toastAdded$: Observable<Toast>;\\n  public toastRemoved$: Observable<string>;\\n  public activeToastCount$: Observable<number>;\\n\\n  constructor(private ngZone: NgZone) {\\n    // Initialize toast manager\\n    this.toastManager = new ToastManager();\\n    \\n    // Initialize subjects\\n    this.stateSubject = new BehaviorSubject<ToastState>(this.toastManager.getState());\\n    this.toastAddedSubject = new Subject<Toast>();\\n    this.toastRemovedSubject = new Subject<string>();\\n\\n    // Set up observables\\n    this.state$ = this.stateSubject.asObservable();\\n    this.toasts$ = this.state$.pipe(\\n      map(state => state.toasts),\\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))\\n    );\\n    this.toastAdded$ = this.toastAddedSubject.asObservable();\\n    this.toastRemoved$ = this.toastRemovedSubject.asObservable();\\n    this.activeToastCount$ = this.toasts$.pipe(\\n      map(toasts => toasts.filter(t => t.open).length),\\n      distinctUntilChanged()\\n    );\\n\\n    // Subscribe to toast manager updates\\n    this.setupSubscription();\\n  }\\n\\n  private setupSubscription(): void {\\n    // Track previous state for comparison\\n    let previousToasts: Toast[] = this.toastManager.getState().toasts;\\n\\n    this.unsubscribe = this.toastManager.subscribe((state: ToastState) => {\\n      this.ngZone.run(() => {\\n        // Detect added toasts\\n        const currentToasts = state.toasts;\\n        const addedToasts = currentToasts.filter(\\n          current => !previousToasts.find((prev: any) => prev.id === current.id)\\n        );\\n        \\n        // Detect removed toasts\\n        const removedToasts = previousToasts.filter(\\n          (prev: any) => !currentToasts.find(current => current.id === prev.id)\\n        );\\n\\n        // Emit events\\n        addedToasts.forEach(toast => this.toastAddedSubject.next(toast));\\n        removedToasts.forEach((toast: any) => this.toastRemovedSubject.next(toast.id));\\n\\n        // Update state\\n        this.stateSubject.next(state);\\n        previousToasts = currentToasts;\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Show a toast notification\\n   */\\n  show(options: Omit<Toast, 'id'>): Toast {\\n    const toastResult = this.toastManager.toast({\\n      ...options,\\n      variant: options.variant || 'default',\\n      duration: options.duration || 5000\\n    });\\n\\n    return {\\n      ...options,\\n      id: toastResult.id,\\n      dismiss: () => this.dismiss(toastResult.id),\\n      update: (props: Partial<Toast>) => this.update(toastResult.id, props)\\n    } as Toast;\\n  }\\n\\n  /**\\n   * Show success toast\\n   */\\n  success(title: string, description?: string, options?: Partial<Toast>): Toast {\\n    return this.show({\\n      ...options,\\n      title,\\n      description,\\n      variant: 'success'\\n    });\\n  }\\n\\n  /**\\n   * Show error toast\\n   */\\n  error(title: string, description?: string, options?: Partial<Toast>): Toast {\\n    return this.show({\\n      ...options,\\n      title,\\n      description,\\n      variant: 'error',\\n      duration: options?.duration || 7000 // Errors stay longer\\n    });\\n  }\\n\\n  /**\\n   * Show warning toast\\n   */\\n  warning(title: string, description?: string, options?: Partial<Toast>): Toast {\\n    return this.show({\\n      ...options,\\n      title,\\n      description,\\n      variant: 'warning'\\n    });\\n  }\\n\\n  /**\\n   * Show info toast\\n   */\\n  info(title: string, description?: string, options?: Partial<Toast>): Toast {\\n    return this.show({\\n      ...options,\\n      title,\\n      description,\\n      variant: 'info'\\n    });\\n  }\\n\\n  /**\\n   * Show loading toast with promise\\n   */\\n  async promise<T>(\\n    promise: Promise<T>,\\n    messages: {\\n      loading: string;\\n      success: string | ((data: T) => string);\\n      error: string | ((error: any) => string);\\n    }\\n  ): Promise<T> {\\n    const toast = this.show({\\n      title: messages.loading,\\n      variant: 'default'\\n    });\\n\\n    try {\\n      const result = await promise;\\n      this.update(toast.id, {\\n        title: typeof messages.success === 'function' \\n          ? messages.success(result) \\n          : messages.success,\\n        variant: 'success'\\n      });\\n      setTimeout(() => this.dismiss(toast.id), 3000);\\n      return result;\\n    } catch (error) {\\n      this.update(toast.id, {\\n        title: typeof messages.error === 'function' \\n          ? messages.error(error) \\n          : messages.error,\\n        variant: 'error'\\n      });\\n      setTimeout(() => this.dismiss(toast.id), 5000);\\n      throw error;\\n    }\\n  }\\n\\n  /**\\n   * Update an existing toast\\n   */\\n  update(toastId: string, updates: Partial<Toast>): void {\\n    const currentState = this.toastManager.getState();\\n    const toast = currentState.toasts.find((t: any) => t.id === toastId);\\n    \\n    if (toast) {\\n      // Use the toast manager's update function\\n      const toastRef = { id: toastId, update: (props: any) => {} };\\n      this.toastManager.toast(Object.assign({}, toast, updates, { id: toastId }));\\n    }\\n  }\\n\\n  /**\\n   * Dismiss a specific toast\\n   */\\n  dismiss(toastId: string): void {\\n    this.toastManager.dismiss(toastId);\\n  }\\n\\n  /**\\n   * Dismiss all toasts\\n   */\\n  dismissAll(): void {\\n    this.toastManager.dismissAll();\\n  }\\n\\n  /**\\n   * Clear all toasts immediately\\n   */\\n  clear(): void {\\n    this.toastManager.clear();\\n  }\\n\\n  /**\\n   * Get current toast state\\n   */\\n  getState(): ToastState {\\n    return this.toastManager.getState();\\n  }\\n\\n  /**\\n   * Get a specific toast by ID\\n   */\\n  getToast(toastId: string): Toast | undefined {\\n    return this.getState().toasts.find(t => t.id === toastId);\\n  }\\n\\n  /**\\n   * Check if any toasts are active\\n   */\\n  hasActiveToasts(): boolean {\\n    return this.getState().toasts.some(t => t.open);\\n  }\\n\\n  /**\\n   * Clean up subscriptions\\n   */\\n  ngOnDestroy(): void {\\n    if (this.unsubscribe) {\\n      this.unsubscribe();\\n    }\\n    this.toastAddedSubject.complete();\\n    this.toastRemovedSubject.complete();\\n    this.stateSubject.complete();\\n  }\\n}\",\"/**\\n * Angular API Service\\n * Wraps ui-core ApiClient with Angular HttpClient and RxJS observables\\n */\\n\\nimport { Injectable } from '@angular/core';\\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\\nimport { Observable, throwError, BehaviorSubject, from } from 'rxjs';\\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\\nimport { ApiClient } from '@friggframework/ui-core';\\n\\nexport interface ApiConfig {\\n  baseUrl: string;\\n  jwt?: string;\\n}\\n\\nexport interface LoginResponse {\\n  token: string;\\n  user?: any;\\n}\\n\\nexport interface Integration {\\n  id: string;\\n  entities: any[];\\n  config: any;\\n  status: string;\\n  createdAt: string;\\n  updatedAt: string;\\n}\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class ApiService {\\n  private apiClient: ApiClient;\\n  private configSubject: BehaviorSubject<ApiConfig>;\\n  private authTokenSubject: BehaviorSubject<string | null>;\\n\\n  public config$: Observable<ApiConfig>;\\n  public authToken$: Observable<string | null>;\\n  public isAuthenticated$: Observable<boolean>;\\n\\n  constructor(private http: HttpClient) {\\n    // Initialize with empty config\\n    const initialConfig: ApiConfig = {\\n      baseUrl: '',\\n      jwt: undefined\\n    };\\n\\n    this.configSubject = new BehaviorSubject<ApiConfig>(initialConfig);\\n    this.authTokenSubject = new BehaviorSubject<string | null>(null);\\n\\n    this.config$ = this.configSubject.asObservable();\\n    this.authToken$ = this.authTokenSubject.asObservable();\\n    this.isAuthenticated$ = this.authToken$.pipe(\\n      map(token => !!token)\\n    );\\n\\n    // Create initial API client\\n    this.apiClient = new ApiClient(initialConfig.baseUrl, initialConfig.jwt);\\n  }\\n\\n  /**\\n   * Initialize the API service with configuration\\n   */\\n  initialize(config: ApiConfig): void {\\n    this.apiClient = new ApiClient(config.baseUrl, config.jwt);\\n    this.configSubject.next(config);\\n    if (config.jwt) {\\n      this.authTokenSubject.next(config.jwt);\\n    }\\n  }\\n\\n  /**\\n   * Update the base URL\\n   */\\n  setBaseUrl(baseUrl: string): void {\\n    const currentConfig = this.configSubject.value;\\n    const newConfig = { ...currentConfig, baseUrl };\\n    this.apiClient = new ApiClient(baseUrl, currentConfig.jwt);\\n    this.configSubject.next(newConfig);\\n  }\\n\\n  /**\\n   * Update the JWT token\\n   */\\n  setAuthToken(jwt: string | null): void {\\n    const currentConfig = this.configSubject.value;\\n    const newConfig = { ...currentConfig, jwt: jwt || undefined };\\n    this.apiClient = new ApiClient(currentConfig.baseUrl, jwt || undefined);\\n    this.configSubject.next(newConfig);\\n    this.authTokenSubject.next(jwt);\\n  }\\n\\n  /**\\n   * Get current headers with auth token\\n   */\\n  private getHeaders(): HttpHeaders {\\n    const headers: any = {\\n      'Content-Type': 'application/json'\\n    };\\n\\n    const token = this.authTokenSubject.value;\\n    if (token) {\\n      headers['Authorization'] = `Bearer ${token}`;\\n    }\\n\\n    return new HttpHeaders(headers);\\n  }\\n\\n  /**\\n   * Handle HTTP errors\\n   */\\n  private handleError(error: HttpErrorResponse): Observable<never> {\\n    let errorMessage = 'An error occurred';\\n\\n    if (error.error instanceof ErrorEvent) {\\n      // Client-side error\\n      errorMessage = `Error: ${error.error.message}`;\\n    } else {\\n      // Server-side error\\n      errorMessage = `Error Code: ${error.status}\\\\nMessage: ${error.message}`;\\n      \\n      if (error.status === 401) {\\n        // Unauthorized - clear token\\n        this.setAuthToken(null);\\n      }\\n    }\\n\\n    console.error(errorMessage);\\n    return throwError(() => new Error(errorMessage));\\n  }\\n\\n  /**\\n   * Login user\\n   */\\n  login(username: string, password: string): Observable<LoginResponse> {\\n    return from(this.apiClient.login(username, password)).pipe(\\n      tap((response: any) => {\\n        if (response.token) {\\n          this.setAuthToken(response.token);\\n        }\\n      }),\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Create new user\\n   */\\n  createUser(username: string, password: string): Observable<any> {\\n    return from(this.apiClient.createUser(username, password)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Logout user\\n   */\\n  logout(): void {\\n    this.setAuthToken(null);\\n  }\\n\\n  /**\\n   * List all integrations\\n   */\\n  listIntegrations(): Observable<Integration[]> {\\n    return from(this.apiClient.listIntegrations()).pipe(\\n      map(response => response || []),\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Get authorize requirements\\n   */\\n  getAuthorizeRequirements(entityType: string, connectingEntityType: string): Observable<any> {\\n    return from(\\n      this.apiClient.getAuthorizeRequirements(entityType, connectingEntityType)\\n    ).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Authorize entity\\n   */\\n  authorize(entityType: string, authData: any): Observable<any> {\\n    return from(this.apiClient.authorize(entityType, authData)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Create integration\\n   */\\n  createIntegration(entity1: any, entity2: any, config: any): Observable<Integration> {\\n    return from(this.apiClient.createIntegration(entity1, entity2, config)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Update integration\\n   */\\n  updateIntegration(integrationId: string, config: any): Observable<Integration> {\\n    return from(this.apiClient.updateIntegration(integrationId, config)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Delete integration\\n   */\\n  deleteIntegration(integrationId: string): Observable<void> {\\n    return from(this.apiClient.deleteIntegration(integrationId)).pipe(\\n      map(() => void 0),\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Get integration config options\\n   */\\n  getIntegrationConfigOptions(integrationId: string): Observable<any> {\\n    return from(this.apiClient.getIntegrationConfigOptions(integrationId)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Get sample data\\n   */\\n  getSampleData(integrationId: string): Observable<any> {\\n    return from(this.apiClient.getSampleData(integrationId)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Get user actions\\n   */\\n  getUserActions(integrationId: string, actionType: string): Observable<any> {\\n    return from(this.apiClient.getUserActions(integrationId, actionType)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Get user action options\\n   */\\n  getUserActionOptions(integrationId: string, selectedUserAction: string, data: any): Observable<any> {\\n    return from(\\n      this.apiClient.getUserActionOptions(integrationId, selectedUserAction, data)\\n    ).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Submit user action\\n   */\\n  submitUserAction(integrationId: string, selectedUserAction: string, data: any): Observable<any> {\\n    return from(\\n      this.apiClient.submitUserAction(integrationId, selectedUserAction, data)\\n    ).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Generic GET request\\n   */\\n  get<T>(endpoint: string): Observable<T> {\\n    const url = `${this.configSubject.value.baseUrl}${endpoint}`;\\n    return this.http.get<T>(url, { headers: this.getHeaders() }).pipe(\\n      catchError(this.handleError.bind(this))\\n    ) as Observable<T>;\\n  }\\n\\n  /**\\n   * Generic POST request\\n   */\\n  post<T>(endpoint: string, data: any): Observable<T> {\\n    const url = `${this.configSubject.value.baseUrl}${endpoint}`;\\n    return this.http.post<T>(url, data, { headers: this.getHeaders() }).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Generic PUT request\\n   */\\n  put<T>(endpoint: string, data: any): Observable<T> {\\n    const url = `${this.configSubject.value.baseUrl}${endpoint}`;\\n    return this.http.put<T>(url, data, { headers: this.getHeaders() }).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Generic PATCH request\\n   */\\n  patch<T>(endpoint: string, data: any): Observable<T> {\\n    const url = `${this.configSubject.value.baseUrl}${endpoint}`;\\n    return this.http.patch<T>(url, data, { headers: this.getHeaders() }).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Generic DELETE request\\n   */\\n  delete<T>(endpoint: string): Observable<T> {\\n    const url = `${this.configSubject.value.baseUrl}${endpoint}`;\\n    return this.http.delete<T>(url, { headers: this.getHeaders() }).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n\\n  /**\\n   * Refresh options\\n   */\\n  refreshOptions(params: { endpoint: string; data: any }): Observable<any> {\\n    return from(this.apiClient.refreshOptions(params)).pipe(\\n      catchError(this.handleError.bind(this))\\n    );\\n  }\\n}\",\"/**\\n * Angular Alerts Service\\n * Wraps ui-core AlertsService with RxJS observables for real-time alert management\\n */\\n\\nimport { Injectable, NgZone } from '@angular/core';\\nimport { BehaviorSubject, Observable, Subject, interval, merge } from 'rxjs';\\nimport { \\n  map, \\n  distinctUntilChanged, \\n  switchMap, \\n  shareReplay,\\n  startWith,\\n  filter,\\n  tap\\n} from 'rxjs/operators';\\nimport { AlertsService as CoreAlertsService } from '@friggframework/ui-core';\\nimport { ApiService } from './api.service';\\n\\nexport interface Alert {\\n  id: string;\\n  integrationId: string;\\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\\n  status: 'active' | 'acknowledged' | 'resolved' | 'suppressed';\\n  title: string;\\n  description: string;\\n  timestamp: string;\\n  metadata?: any;\\n  acknowledgedBy?: string;\\n  acknowledgedAt?: string;\\n  resolvedBy?: string;\\n  resolvedAt?: string;\\n  resolution?: string;\\n}\\n\\nexport interface AlertsState {\\n  alerts: Alert[];\\n  loading: boolean;\\n  error: Error | null;\\n  lastFetch: Date | null;\\n}\\n\\nexport interface AlertFilters {\\n  severity?: string;\\n  status?: string;\\n  limit?: number;\\n  offset?: number;\\n}\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class AlertsService {\\n  private coreAlertsService: CoreAlertsService;\\n  private stateSubject: BehaviorSubject<AlertsState>;\\n  private alertAddedSubject: Subject<Alert>;\\n  private alertUpdatedSubject: Subject<Alert>;\\n  private alertRemovedSubject: Subject<string>;\\n  private refreshSubject: Subject<void>;\\n  private subscriptions: Map<string, () => void>;\\n\\n  // Observable streams\\n  public state$: Observable<AlertsState>;\\n  public alerts$: Observable<Alert[]>;\\n  public loading$: Observable<boolean>;\\n  public error$: Observable<Error | null>;\\n  public alertAdded$: Observable<Alert>;\\n  public alertUpdated$: Observable<Alert>;\\n  public alertRemoved$: Observable<string>;\\n\\n  // Computed observables\\n  public activeAlerts$: Observable<Alert[]>;\\n  public criticalAlerts$: Observable<Alert[]>;\\n  public alertCounts$: Observable<{\\n    total: number;\\n    active: number;\\n    critical: number;\\n    high: number;\\n    medium: number;\\n    low: number;\\n  }>;\\n\\n  // Static constants\\n  static readonly SEVERITY = CoreAlertsService.SEVERITY;\\n  static readonly STATUS = CoreAlertsService.STATUS;\\n\\n  constructor(\\n    private ngZone: NgZone,\\n    private apiService: ApiService\\n  ) {\\n    // Initialize core service\\n    this.coreAlertsService = new CoreAlertsService(this.apiService);\\n    \\n    // Initialize state\\n    const initialState: AlertsState = {\\n      alerts: [],\\n      loading: false,\\n      error: null,\\n      lastFetch: null\\n    };\\n\\n    // Initialize subjects\\n    this.stateSubject = new BehaviorSubject<AlertsState>(initialState);\\n    this.alertAddedSubject = new Subject<Alert>();\\n    this.alertUpdatedSubject = new Subject<Alert>();\\n    this.alertRemovedSubject = new Subject<string>();\\n    this.refreshSubject = new Subject<void>();\\n    this.subscriptions = new Map();\\n\\n    // Set up observables\\n    this.state$ = this.stateSubject.asObservable();\\n    this.alerts$ = this.state$.pipe(\\n      map(state => state.alerts),\\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))\\n    );\\n    this.loading$ = this.state$.pipe(\\n      map(state => state.loading),\\n      distinctUntilChanged()\\n    );\\n    this.error$ = this.state$.pipe(\\n      map(state => state.error),\\n      distinctUntilChanged()\\n    );\\n    \\n    this.alertAdded$ = this.alertAddedSubject.asObservable();\\n    this.alertUpdated$ = this.alertUpdatedSubject.asObservable();\\n    this.alertRemoved$ = this.alertRemovedSubject.asObservable();\\n\\n    // Computed observables\\n    this.activeAlerts$ = this.alerts$.pipe(\\n      map(alerts => alerts.filter(a => a.status === 'active')),\\n      shareReplay(1)\\n    );\\n\\n    this.criticalAlerts$ = this.alerts$.pipe(\\n      map(alerts => alerts.filter(a => \\n        a.severity === 'critical' && a.status === 'active'\\n      )),\\n      shareReplay(1)\\n    );\\n\\n    this.alertCounts$ = this.alerts$.pipe(\\n      map(alerts => ({\\n        total: alerts.length,\\n        active: alerts.filter(a => a.status === 'active').length,\\n        critical: alerts.filter(a => a.severity === 'critical' && a.status === 'active').length,\\n        high: alerts.filter(a => a.severity === 'high' && a.status === 'active').length,\\n        medium: alerts.filter(a => a.severity === 'medium' && a.status === 'active').length,\\n        low: alerts.filter(a => a.severity === 'low' && a.status === 'active').length\\n      })),\\n      shareReplay(1)\\n    );\\n  }\\n\\n  /**\\n   * Fetch alerts for an integration\\n   */\\n  fetchAlerts(integrationId: string, filters?: AlertFilters): Observable<Alert[]> {\\n    this.updateState({ loading: true, error: null });\\n\\n    return new Observable<Alert[]>(observer => {\\n      this.coreAlertsService.getAlerts(integrationId, filters)\\n        .then(alerts => {\\n          this.ngZone.run(() => {\\n            this.updateState({\\n              alerts: alerts as Alert[],\\n              loading: false,\\n              lastFetch: new Date()\\n            });\\n            observer.next(alerts as Alert[]);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            this.updateState({\\n              loading: false,\\n              error\\n            });\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Set up auto-refresh for alerts\\n   */\\n  setupAutoRefresh(integrationId: string, intervalMs: number = 30000): Observable<Alert[]> {\\n    return merge(\\n      this.refreshSubject,\\n      interval(intervalMs)\\n    ).pipe(\\n      startWith(0),\\n      switchMap(() => this.fetchAlerts(integrationId))\\n    );\\n  }\\n\\n  /**\\n   * Manually refresh alerts\\n   */\\n  refresh(): void {\\n    this.refreshSubject.next();\\n  }\\n\\n  /**\\n   * Subscribe to real-time alerts for an integration\\n   */\\n  subscribeToAlerts(integrationId: string): Observable<Alert> {\\n    return new Observable<Alert>(observer => {\\n      const unsubscribe = this.coreAlertsService.subscribe(integrationId, (alert: Alert) => {\\n        this.ngZone.run(() => {\\n          // Update local state\\n          const currentState = this.stateSubject.value;\\n          const existingIndex = currentState.alerts.findIndex(a => a.id === alert.id);\\n          \\n          if (existingIndex >= 0) {\\n            // Update existing alert\\n            const updatedAlerts = [...currentState.alerts];\\n            updatedAlerts[existingIndex] = alert;\\n            this.updateState({ alerts: updatedAlerts });\\n            this.alertUpdatedSubject.next(alert);\\n          } else {\\n            // Add new alert\\n            this.updateState({ alerts: [alert, ...currentState.alerts] });\\n            this.alertAddedSubject.next(alert);\\n          }\\n          \\n          observer.next(alert);\\n        });\\n      });\\n\\n      // Store subscription for cleanup\\n      this.subscriptions.set(integrationId, unsubscribe);\\n\\n      // Return cleanup function\\n      return () => {\\n        unsubscribe();\\n        this.subscriptions.delete(integrationId);\\n      };\\n    });\\n  }\\n\\n  /**\\n   * Acknowledge an alert\\n   */\\n  acknowledgeAlert(alertId: string, userId: string): Observable<Alert> {\\n    return new Observable<Alert>(observer => {\\n      this.coreAlertsService.acknowledgeAlert(alertId, userId)\\n        .then(alert => {\\n          this.ngZone.run(() => {\\n            this.updateAlertInState(alert);\\n            this.alertUpdatedSubject.next(alert);\\n            observer.next(alert);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Resolve an alert\\n   */\\n  resolveAlert(alertId: string, userId: string, resolution: string): Observable<Alert> {\\n    return new Observable<Alert>(observer => {\\n      this.coreAlertsService.resolveAlert(alertId, userId, resolution)\\n        .then(alert => {\\n          this.ngZone.run(() => {\\n            this.updateAlertInState(alert);\\n            this.alertUpdatedSubject.next(alert);\\n            observer.next(alert);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Create a new alert\\n   */\\n  createAlert(alertData: Omit<Alert, 'id'>): Observable<Alert> {\\n    return new Observable<Alert>(observer => {\\n      this.coreAlertsService.createAlert(alertData)\\n        .then(alert => {\\n          this.ngZone.run(() => {\\n            const currentState = this.stateSubject.value;\\n            this.updateState({ alerts: [alert, ...currentState.alerts] });\\n            this.alertAddedSubject.next(alert);\\n            observer.next(alert);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Update an alert\\n   */\\n  updateAlert(alertId: string, updates: Partial<Alert>): Observable<Alert> {\\n    return new Observable<Alert>(observer => {\\n      this.coreAlertsService.updateAlert(alertId, updates)\\n        .then(alert => {\\n          this.ngZone.run(() => {\\n            this.updateAlertInState(alert);\\n            this.alertUpdatedSubject.next(alert);\\n            observer.next(alert);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Delete an alert\\n   */\\n  deleteAlert(alertId: string): Observable<void> {\\n    return new Observable<void>(observer => {\\n      this.coreAlertsService.deleteAlert(alertId)\\n        .then(() => {\\n          this.ngZone.run(() => {\\n            const currentState = this.stateSubject.value;\\n            this.updateState({\\n              alerts: currentState.alerts.filter(a => a.id !== alertId)\\n            });\\n            this.alertRemovedSubject.next(alertId);\\n            observer.next();\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Filter alerts by severity\\n   */\\n  filterBySeverity(severity: string): Observable<Alert[]> {\\n    return this.alerts$.pipe(\\n      map(alerts => this.coreAlertsService.filterAlertsBySeverity(alerts, severity))\\n    );\\n  }\\n\\n  /**\\n   * Filter alerts by status\\n   */\\n  filterByStatus(status: string): Observable<Alert[]> {\\n    return this.alerts$.pipe(\\n      map(alerts => this.coreAlertsService.filterAlertsByStatus(alerts, status))\\n    );\\n  }\\n\\n  /**\\n   * Get alerts grouped by severity\\n   */\\n  getAlertsGroupedBySeverity(): Observable<Record<string, Alert[]>> {\\n    return this.alerts$.pipe(\\n      map(alerts => this.coreAlertsService.groupAlertsBySeverity(alerts))\\n    );\\n  }\\n\\n  /**\\n   * Sort alerts by timestamp\\n   */\\n  sortAlertsByTimestamp(order: 'asc' | 'desc' = 'desc'): Observable<Alert[]> {\\n    return this.alerts$.pipe(\\n      map(alerts => this.coreAlertsService.sortAlertsByTimestamp(alerts, order))\\n    );\\n  }\\n\\n  /**\\n   * Update state\\n   */\\n  private updateState(updates: Partial<AlertsState>): void {\\n    const currentState = this.stateSubject.value;\\n    this.stateSubject.next({ ...currentState, ...updates });\\n  }\\n\\n  /**\\n   * Update a single alert in state\\n   */\\n  private updateAlertInState(alert: Alert): void {\\n    const currentState = this.stateSubject.value;\\n    const alerts = currentState.alerts.map(a => \\n      a.id === alert.id ? alert : a\\n    );\\n    this.updateState({ alerts });\\n  }\\n\\n  /**\\n   * Clean up subscriptions\\n   */\\n  ngOnDestroy(): void {\\n    // Unsubscribe from all real-time subscriptions\\n    this.subscriptions.forEach(unsubscribe => unsubscribe());\\n    this.subscriptions.clear();\\n\\n    // Complete subjects\\n    this.alertAddedSubject.complete();\\n    this.alertUpdatedSubject.complete();\\n    this.alertRemovedSubject.complete();\\n    this.refreshSubject.complete();\\n    this.stateSubject.complete();\\n  }\\n}\",\"/**\\n * Angular CloudWatch Service\\n * Wraps ui-core CloudWatchService with RxJS observables for monitoring metrics\\n */\\n\\nimport { Injectable, NgZone } from '@angular/core';\\nimport { BehaviorSubject, Observable, Subject, interval, merge, combineLatest } from 'rxjs';\\nimport { \\n  map, \\n  distinctUntilChanged, \\n  switchMap, \\n  shareReplay,\\n  startWith,\\n  tap,\\n  catchError\\n} from 'rxjs/operators';\\nimport { CloudWatchService as CoreCloudWatchService } from '@friggframework/ui-core';\\nimport { ApiService } from './api.service';\\n\\nexport interface MetricDataPoint {\\n  timestamp: string;\\n  value: number;\\n}\\n\\nexport interface MetricsData {\\n  requestCount: MetricDataPoint[];\\n  latency: MetricDataPoint[];\\n  errorCount: MetricDataPoint[];\\n  healthChecks: MetricDataPoint[];\\n  cpuUtilization: MetricDataPoint[];\\n  memoryUtilization: MetricDataPoint[];\\n  activeConnections: MetricDataPoint[];\\n  throughput: MetricDataPoint[];\\n  diskIO: MetricDataPoint[];\\n  networkIO: MetricDataPoint[];\\n}\\n\\nexport interface CloudWatchAlert {\\n  id: string;\\n  integrationId: string;\\n  metric: string;\\n  threshold: number;\\n  condition: 'above' | 'below';\\n  status: 'active' | 'resolved';\\n  triggeredAt: string;\\n  resolvedAt?: string;\\n}\\n\\nexport interface CloudWatchLog {\\n  timestamp: string;\\n  level: 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';\\n  message: string;\\n  metadata?: any;\\n}\\n\\nexport interface MetricsState {\\n  metrics: MetricsData | null;\\n  alerts: CloudWatchAlert[];\\n  logs: CloudWatchLog[];\\n  loading: boolean;\\n  error: Error | null;\\n  lastFetch: Date | null;\\n}\\n\\nexport interface MetricsQuery {\\n  integrationId: string;\\n  startTime: Date;\\n  endTime: Date;\\n  config?: any;\\n}\\n\\nexport interface MetricsSummary {\\n  avgLatency: number;\\n  totalRequests: number;\\n  errorRate: number;\\n  uptime: number;\\n  currentCPU: number;\\n  currentMemory: number;\\n  activeConnections: number;\\n  throughput: number;\\n}\\n\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class CloudWatchService {\\n  private coreCloudWatchService: CoreCloudWatchService;\\n  private stateSubject: BehaviorSubject<MetricsState>;\\n  private refreshSubject: Subject<void>;\\n  private metricsQuerySubject: BehaviorSubject<MetricsQuery | null>;\\n\\n  // Observable streams\\n  public state$: Observable<MetricsState>;\\n  public metrics$: Observable<MetricsData | null>;\\n  public alerts$: Observable<CloudWatchAlert[]>;\\n  public logs$: Observable<CloudWatchLog[]>;\\n  public loading$: Observable<boolean>;\\n  public error$: Observable<Error | null>;\\n\\n  // Computed metrics\\n  public summary$!: Observable<MetricsSummary>;\\n  public latencyTrend$!: Observable<number>;\\n  public errorTrend$!: Observable<number>;\\n  public healthStatus$!: Observable<'healthy' | 'degraded' | 'critical'>;\\n\\n  constructor(\\n    private ngZone: NgZone,\\n    private apiService: ApiService\\n  ) {\\n    // Initialize core service\\n    this.coreCloudWatchService = new CoreCloudWatchService(this.apiService);\\n    \\n    // Initialize state\\n    const initialState: MetricsState = {\\n      metrics: null,\\n      alerts: [],\\n      logs: [],\\n      loading: false,\\n      error: null,\\n      lastFetch: null\\n    };\\n\\n    // Initialize subjects\\n    this.stateSubject = new BehaviorSubject<MetricsState>(initialState);\\n    this.refreshSubject = new Subject<void>();\\n    this.metricsQuerySubject = new BehaviorSubject<MetricsQuery | null>(null);\\n\\n    // Set up observables\\n    this.state$ = this.stateSubject.asObservable();\\n    this.metrics$ = this.state$.pipe(\\n      map(state => state.metrics),\\n      distinctUntilChanged()\\n    );\\n    this.alerts$ = this.state$.pipe(\\n      map(state => state.alerts),\\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))\\n    );\\n    this.logs$ = this.state$.pipe(\\n      map(state => state.logs),\\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))\\n    );\\n    this.loading$ = this.state$.pipe(\\n      map(state => state.loading),\\n      distinctUntilChanged()\\n    );\\n    this.error$ = this.state$.pipe(\\n      map(state => state.error),\\n      distinctUntilChanged()\\n    );\\n\\n    // Set up computed observables\\n    this.setupComputedObservables();\\n  }\\n\\n  private setupComputedObservables(): void {\\n    // Metrics summary\\n    this.summary$ = this.metrics$.pipe(\\n      map(metrics => {\\n        if (!metrics) {\\n          return {\\n            avgLatency: 0,\\n            totalRequests: 0,\\n            errorRate: 0,\\n            uptime: 100,\\n            currentCPU: 0,\\n            currentMemory: 0,\\n            activeConnections: 0,\\n            throughput: 0\\n          };\\n        }\\n\\n        return {\\n          avgLatency: this.coreCloudWatchService.calculateAverage(metrics.latency),\\n          totalRequests: metrics.requestCount.reduce((sum, point) => sum + point.value, 0),\\n          errorRate: this.coreCloudWatchService.calculateErrorRate(\\n            metrics.errorCount,\\n            metrics.requestCount\\n          ),\\n          uptime: this.coreCloudWatchService.calculateUptime(metrics.healthChecks),\\n          currentCPU: this.coreCloudWatchService.getLatestValue(metrics.cpuUtilization),\\n          currentMemory: this.coreCloudWatchService.getLatestValue(metrics.memoryUtilization),\\n          activeConnections: this.coreCloudWatchService.getLatestValue(metrics.activeConnections),\\n          throughput: this.coreCloudWatchService.getLatestValue(metrics.throughput)\\n        };\\n      }),\\n      shareReplay(1)\\n    );\\n\\n    // Latency trend\\n    this.latencyTrend$ = this.metrics$.pipe(\\n      map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.latency) : 0),\\n      shareReplay(1)\\n    );\\n\\n    // Error trend\\n    this.errorTrend$ = this.metrics$.pipe(\\n      map(metrics => metrics ? this.coreCloudWatchService.calculateTrend(metrics.errorCount) : 0),\\n      shareReplay(1)\\n    );\\n\\n    // Health status\\n    this.healthStatus$ = combineLatest([\\n      this.summary$,\\n      this.alerts$\\n    ]).pipe(\\n      map(([summary, alerts]) => {\\n        const activeAlerts = alerts.filter(a => a.status === 'active');\\n        \\n        if (activeAlerts.length > 5 || summary.errorRate > 10 || summary.uptime < 90) {\\n          return 'critical';\\n        } else if (activeAlerts.length > 0 || summary.errorRate > 5 || summary.uptime < 95) {\\n          return 'degraded';\\n        }\\n        return 'healthy';\\n      }),\\n      shareReplay(1)\\n    );\\n  }\\n\\n  /**\\n   * Fetch metrics for an integration\\n   */\\n  fetchMetrics(query: MetricsQuery): Observable<MetricsData> {\\n    this.updateState({ loading: true, error: null });\\n    this.metricsQuerySubject.next(query);\\n\\n    return new Observable<MetricsData>(observer => {\\n      this.coreCloudWatchService.getMetrics(query)\\n        .then(metrics => {\\n          this.ngZone.run(() => {\\n            this.updateState({\\n              metrics: metrics as MetricsData,\\n              loading: false,\\n              lastFetch: new Date()\\n            });\\n            observer.next(metrics as MetricsData);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            this.updateState({\\n              loading: false,\\n              error\\n            });\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Set up auto-refresh for metrics\\n   */\\n  setupAutoRefresh(intervalMs: number = 60000): Observable<MetricsData> {\\n    return combineLatest([\\n      merge(\\n        this.refreshSubject,\\n        interval(intervalMs)\\n      ).pipe(startWith(0)),\\n      this.metricsQuerySubject\\n    ]).pipe(\\n      switchMap(([_, query]) => {\\n        if (!query) {\\n          return [];\\n        }\\n        return this.fetchMetrics(query);\\n      })\\n    );\\n  }\\n\\n  /**\\n   * Manually refresh metrics\\n   */\\n  refresh(): void {\\n    this.refreshSubject.next();\\n  }\\n\\n  /**\\n   * Fetch alerts for an integration\\n   */\\n  fetchAlerts(integrationId: string): Observable<CloudWatchAlert[]> {\\n    return new Observable<CloudWatchAlert[]>(observer => {\\n      this.coreCloudWatchService.getAlerts(integrationId)\\n        .then(alerts => {\\n          this.ngZone.run(() => {\\n            this.updateState({ alerts: alerts as CloudWatchAlert[] });\\n            observer.next(alerts as CloudWatchAlert[]);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Fetch logs for an integration\\n   */\\n  fetchLogs(\\n    integrationId: string, \\n    startTime: Date, \\n    endTime: Date, \\n    logLevel: string = 'INFO'\\n  ): Observable<CloudWatchLog[]> {\\n    return new Observable<CloudWatchLog[]>(observer => {\\n      this.coreCloudWatchService.getLogs({\\n        integrationId,\\n        startTime,\\n        endTime,\\n        logLevel\\n      })\\n        .then(logs => {\\n          this.ngZone.run(() => {\\n            this.updateState({ logs: logs as CloudWatchLog[] });\\n            observer.next(logs as CloudWatchLog[]);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Fetch custom metrics\\n   */\\n  fetchCustomMetrics(\\n    integrationId: string, \\n    metricNames: string | string[]\\n  ): Observable<Record<string, MetricDataPoint[]>> {\\n    return new Observable(observer => {\\n      this.coreCloudWatchService.getCustomMetrics(integrationId, metricNames)\\n        .then(metrics => {\\n          this.ngZone.run(() => {\\n            observer.next(metrics);\\n            observer.complete();\\n          });\\n        })\\n        .catch(error => {\\n          this.ngZone.run(() => {\\n            observer.error(error);\\n          });\\n        });\\n    });\\n  }\\n\\n  /**\\n   * Get time series data for a specific metric\\n   */\\n  getMetricTimeSeries(metricName: keyof MetricsData): Observable<MetricDataPoint[]> {\\n    return this.metrics$.pipe(\\n      map(metrics => {\\n        if (!metrics || !metrics[metricName]) {\\n          return [];\\n        }\\n        return this.coreCloudWatchService.formatTimeSeries(metrics[metricName]);\\n      })\\n    );\\n  }\\n\\n  /**\\n   * Calculate metric statistics\\n   */\\n  getMetricStats(metricName: keyof MetricsData): Observable<{\\n    min: number;\\n    max: number;\\n    avg: number;\\n    current: number;\\n  }> {\\n    return this.getMetricTimeSeries(metricName).pipe(\\n      map(dataPoints => {\\n        if (dataPoints.length === 0) {\\n          return { min: 0, max: 0, avg: 0, current: 0 };\\n        }\\n\\n        const values = dataPoints.map(p => p.value);\\n        return {\\n          min: Math.min(...values),\\n          max: Math.max(...values),\\n          avg: this.coreCloudWatchService.calculateAverage(dataPoints),\\n          current: this.coreCloudWatchService.getLatestValue(dataPoints)\\n        };\\n      })\\n    );\\n  }\\n\\n  /**\\n   * Set alert threshold for a metric\\n   */\\n  setAlertThreshold(\\n    metric: string, \\n    threshold: number, \\n    condition: 'above' | 'below'\\n  ): void {\\n    // This would typically call a backend API to set up CloudWatch alarms\\n    console.log(`Setting alert: ${metric} ${condition} ${threshold}`);\\n  }\\n\\n  /**\\n   * Clear all data\\n   */\\n  clear(): void {\\n    this.updateState({\\n      metrics: null,\\n      alerts: [],\\n      logs: [],\\n      error: null,\\n      lastFetch: null\\n    });\\n    this.metricsQuerySubject.next(null);\\n  }\\n\\n  /**\\n   * Update state\\n   */\\n  private updateState(updates: Partial<MetricsState>): void {\\n    const currentState = this.stateSubject.value;\\n    this.stateSubject.next({ ...currentState, ...updates });\\n  }\\n\\n  /**\\n   * Clean up\\n   */\\n  ngOnDestroy(): void {\\n    this.refreshSubject.complete();\\n    this.stateSubject.complete();\\n    this.metricsQuerySubject.complete();\\n  }\\n}\",\"/**\\n * Angular Toast Component\\n * Displays toast notifications with animations and auto-dismiss\\n */\\n\\nimport { \\n  Component, \\n  Input, \\n  Output, \\n  EventEmitter, \\n  OnInit, \\n  OnDestroy,\\n  ChangeDetectionStrategy\\n} from '@angular/core';\\nimport { \\n  trigger, \\n  state, \\n  style, \\n  transition, \\n  animate \\n} from '@angular/animations';\\nimport { CommonModule } from '@angular/common';\\nimport { Subject, timer } from 'rxjs';\\nimport { takeUntil } from 'rxjs/operators';\\n\\n@Component({\\n  selector: 'frigg-toast',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div \\n      class=\\\"frigg-toast\\\"\\n      [class.frigg-toast--success]=\\\"variant === 'success'\\\"\\n      [class.frigg-toast--error]=\\\"variant === 'error'\\\"\\n      [class.frigg-toast--warning]=\\\"variant === 'warning'\\\"\\n      [class.frigg-toast--info]=\\\"variant === 'info'\\\"\\n      [@slideIn]=\\\"animationState\\\"\\n      (click)=\\\"handleClick()\\\"\\n    >\\n      <div class=\\\"frigg-toast__icon\\\">\\n        <svg *ngIf=\\\"variant === 'success'\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n          <path fill-rule=\\\"evenodd\\\" d=\\\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\\\" clip-rule=\\\"evenodd\\\" />\\n        </svg>\\n        <svg *ngIf=\\\"variant === 'error'\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n          <path fill-rule=\\\"evenodd\\\" d=\\\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\\\" clip-rule=\\\"evenodd\\\" />\\n        </svg>\\n        <svg *ngIf=\\\"variant === 'warning'\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n          <path fill-rule=\\\"evenodd\\\" d=\\\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\\\" clip-rule=\\\"evenodd\\\" />\\n        </svg>\\n        <svg *ngIf=\\\"variant === 'info'\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n          <path fill-rule=\\\"evenodd\\\" d=\\\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\\\" clip-rule=\\\"evenodd\\\" />\\n        </svg>\\n        <svg *ngIf=\\\"!variant || variant === 'default'\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n          <path fill-rule=\\\"evenodd\\\" d=\\\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\\\" clip-rule=\\\"evenodd\\\" />\\n        </svg>\\n      </div>\\n      \\n      <div class=\\\"frigg-toast__content\\\">\\n        <div class=\\\"frigg-toast__title\\\" *ngIf=\\\"title\\\">{{ title }}</div>\\n        <div class=\\\"frigg-toast__description\\\" *ngIf=\\\"description\\\">{{ description }}</div>\\n      </div>\\n      \\n      <div class=\\\"frigg-toast__actions\\\">\\n        <button \\n          *ngIf=\\\"action\\\" \\n          class=\\\"frigg-toast__action\\\"\\n          (click)=\\\"handleAction($event)\\\"\\n        >\\n          {{ action.label }}\\n        </button>\\n        <button \\n          class=\\\"frigg-toast__close\\\"\\n          (click)=\\\"handleClose($event)\\\"\\n          aria-label=\\\"Close\\\"\\n        >\\n          <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n            <path fill-rule=\\\"evenodd\\\" d=\\\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" />\\n          </svg>\\n        </button>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-toast {\\n      display: flex;\\n      align-items: flex-start;\\n      gap: 12px;\\n      min-width: 300px;\\n      max-width: 500px;\\n      padding: 16px;\\n      background: white;\\n      border-radius: 8px;\\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-toast:hover {\\n      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\\n    }\\n\\n    .frigg-toast__icon {\\n      flex-shrink: 0;\\n      width: 20px;\\n      height: 20px;\\n      color: #6B7280;\\n    }\\n\\n    .frigg-toast--success .frigg-toast__icon {\\n      color: #10B981;\\n    }\\n\\n    .frigg-toast--error .frigg-toast__icon {\\n      color: #EF4444;\\n    }\\n\\n    .frigg-toast--warning .frigg-toast__icon {\\n      color: #F59E0B;\\n    }\\n\\n    .frigg-toast--info .frigg-toast__icon {\\n      color: #3B82F6;\\n    }\\n\\n    .frigg-toast__content {\\n      flex: 1;\\n      min-width: 0;\\n    }\\n\\n    .frigg-toast__title {\\n      font-weight: 600;\\n      font-size: 14px;\\n      line-height: 20px;\\n      color: #111827;\\n    }\\n\\n    .frigg-toast__description {\\n      margin-top: 4px;\\n      font-size: 14px;\\n      line-height: 20px;\\n      color: #6B7280;\\n    }\\n\\n    .frigg-toast__actions {\\n      display: flex;\\n      align-items: center;\\n      gap: 8px;\\n      flex-shrink: 0;\\n    }\\n\\n    .frigg-toast__action {\\n      padding: 4px 8px;\\n      background: transparent;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 4px;\\n      font-size: 12px;\\n      font-weight: 500;\\n      color: #374151;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-toast__action:hover {\\n      background: #F3F4F6;\\n      border-color: #D1D5DB;\\n    }\\n\\n    .frigg-toast__close {\\n      padding: 4px;\\n      background: transparent;\\n      border: none;\\n      border-radius: 4px;\\n      color: #6B7280;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-toast__close:hover {\\n      background: #F3F4F6;\\n      color: #374151;\\n    }\\n\\n    .frigg-toast__close svg {\\n      width: 16px;\\n      height: 16px;\\n    }\\n\\n    /* Dark mode support */\\n    @media (prefers-color-scheme: dark) {\\n      .frigg-toast {\\n        background: #1F2937;\\n        color: white;\\n      }\\n\\n      .frigg-toast__title {\\n        color: white;\\n      }\\n\\n      .frigg-toast__description {\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-toast__action {\\n        border-color: #374151;\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-toast__action:hover {\\n        background: #374151;\\n        border-color: #4B5563;\\n        color: white;\\n      }\\n\\n      .frigg-toast__close {\\n        color: #9CA3AF;\\n      }\\n\\n      .frigg-toast__close:hover {\\n        background: #374151;\\n        color: white;\\n      }\\n    }\\n  `],\\n  animations: [\\n    trigger('slideIn', [\\n      state('void', style({\\n        transform: 'translateX(100%)',\\n        opacity: 0\\n      })),\\n      state('visible', style({\\n        transform: 'translateX(0)',\\n        opacity: 1\\n      })),\\n      state('hidden', style({\\n        transform: 'translateX(100%)',\\n        opacity: 0\\n      })),\\n      transition('void => visible', [\\n        animate('300ms ease-out')\\n      ]),\\n      transition('visible => hidden', [\\n        animate('200ms ease-in')\\n      ])\\n    ])\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggToastComponent implements OnInit, OnDestroy {\\n  @Input() id!: string;\\n  @Input() title?: string;\\n  @Input() description?: string;\\n  @Input() variant: 'default' | 'success' | 'error' | 'warning' | 'info' = 'default';\\n  @Input() duration: number = 5000;\\n  @Input() action?: { label: string; onClick: () => void };\\n  \\n  @Output() dismiss = new EventEmitter<void>();\\n  @Output() click = new EventEmitter<void>();\\n  \\n  animationState: 'visible' | 'hidden' = 'visible';\\n  \\n  private destroy$ = new Subject<void>();\\n\\n  ngOnInit(): void {\\n    // Auto-dismiss after duration\\n    if (this.duration > 0) {\\n      timer(this.duration)\\n        .pipe(takeUntil(this.destroy$))\\n        .subscribe(() => {\\n          this.close();\\n        });\\n    }\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n  }\\n\\n  handleClick(): void {\\n    this.click.emit();\\n  }\\n\\n  handleAction(event: Event): void {\\n    event.stopPropagation();\\n    if (this.action) {\\n      this.action.onClick();\\n    }\\n  }\\n\\n  handleClose(event: Event): void {\\n    event.stopPropagation();\\n    this.close();\\n  }\\n\\n  close(): void {\\n    this.animationState = 'hidden';\\n    setTimeout(() => {\\n      this.dismiss.emit();\\n    }, 200);\\n  }\\n}\",\"/**\\n * Angular Toast Container Component\\n * Manages and displays multiple toast notifications\\n */\\n\\nimport { \\n  Component, \\n  OnInit, \\n  OnDestroy,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { Subject } from 'rxjs';\\nimport { takeUntil } from 'rxjs/operators';\\nimport { FriggToastComponent } from './toast.component';\\nimport { ToastService, Toast } from '../../services/toast.service';\\n\\n@Component({\\n  selector: 'frigg-toast-container',\\n  standalone: true,\\n  imports: [CommonModule, FriggToastComponent],\\n  template: `\\n    <div class=\\\"frigg-toast-container\\\" [class.frigg-toast-container--empty]=\\\"toasts.length === 0\\\">\\n      <frigg-toast\\n        *ngFor=\\\"let toast of toasts; trackBy: trackByToastId\\\"\\n        [id]=\\\"toast.id\\\"\\n        [title]=\\\"toast.title\\\"\\n        [description]=\\\"toast.description\\\"\\n        [variant]=\\\"toast.variant || 'default'\\\"\\n        [duration]=\\\"toast.duration || 5000\\\"\\n        [action]=\\\"toast.action\\\"\\n        (dismiss)=\\\"handleDismiss(toast.id)\\\"\\n        (click)=\\\"handleClick(toast)\\\"\\n      ></frigg-toast>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-toast-container {\\n      position: fixed;\\n      top: 20px;\\n      right: 20px;\\n      z-index: 9999;\\n      display: flex;\\n      flex-direction: column;\\n      gap: 12px;\\n      pointer-events: none;\\n    }\\n\\n    .frigg-toast-container--empty {\\n      display: none;\\n    }\\n\\n    .frigg-toast-container frigg-toast {\\n      pointer-events: auto;\\n    }\\n\\n    /* Mobile responsive */\\n    @media (max-width: 640px) {\\n      .frigg-toast-container {\\n        top: 10px;\\n        right: 10px;\\n        left: 10px;\\n      }\\n    }\\n\\n    /* Animation for new toasts */\\n    @keyframes slideInRight {\\n      from {\\n        transform: translateX(100%);\\n        opacity: 0;\\n      }\\n      to {\\n        transform: translateX(0);\\n        opacity: 1;\\n      }\\n    }\\n\\n    frigg-toast {\\n      animation: slideInRight 0.3s ease-out;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggToastContainerComponent implements OnInit, OnDestroy {\\n  toasts: Toast[] = [];\\n  \\n  private destroy$ = new Subject<void>();\\n\\n  constructor(\\n    private toastService: ToastService,\\n    private cdr: ChangeDetectorRef\\n  ) {}\\n\\n  ngOnInit(): void {\\n    // Subscribe to toast changes\\n    this.toastService.toasts$\\n      .pipe(takeUntil(this.destroy$))\\n      .subscribe(toasts => {\\n        this.toasts = toasts.filter(t => t.open !== false);\\n        this.cdr.markForCheck();\\n      });\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n  }\\n\\n  trackByToastId(index: number, toast: Toast): string {\\n    return toast.id;\\n  }\\n\\n  handleDismiss(toastId: string): void {\\n    this.toastService.dismiss(toastId);\\n  }\\n\\n  handleClick(toast: Toast): void {\\n    // Optional: Handle toast click\\n    console.log('Toast clicked:', toast);\\n  }\\n}\",\"/**\\n * Angular Loading Spinner Component\\n * Displays a customizable loading spinner\\n */\\n\\nimport { \\n  Component, \\n  Input,\\n  ChangeDetectionStrategy\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\n\\n@Component({\\n  selector: 'frigg-loading-spinner',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div \\n      class=\\\"frigg-loading-spinner\\\"\\n      [class.frigg-loading-spinner--small]=\\\"size === 'small'\\\"\\n      [class.frigg-loading-spinner--large]=\\\"size === 'large'\\\"\\n      [class.frigg-loading-spinner--inline]=\\\"inline\\\"\\n      [class.frigg-loading-spinner--overlay]=\\\"overlay\\\"\\n    >\\n      <div class=\\\"frigg-loading-spinner__container\\\" *ngIf=\\\"!overlay\\\">\\n        <svg \\n          class=\\\"frigg-loading-spinner__svg\\\" \\n          viewBox=\\\"0 0 24 24\\\" \\n          fill=\\\"none\\\"\\n          [attr.aria-label]=\\\"label\\\"\\n        >\\n          <circle \\n            class=\\\"frigg-loading-spinner__circle-bg\\\"\\n            cx=\\\"12\\\" \\n            cy=\\\"12\\\" \\n            r=\\\"10\\\" \\n            stroke=\\\"currentColor\\\" \\n            stroke-width=\\\"2\\\"\\n          />\\n          <path \\n            class=\\\"frigg-loading-spinner__circle\\\"\\n            d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\\\"\\n            stroke=\\\"currentColor\\\" \\n            stroke-width=\\\"2\\\"\\n            stroke-linecap=\\\"round\\\"\\n          />\\n        </svg>\\n        <span class=\\\"frigg-loading-spinner__text\\\" *ngIf=\\\"text\\\">{{ text }}</span>\\n      </div>\\n      \\n      <div class=\\\"frigg-loading-spinner__overlay\\\" *ngIf=\\\"overlay\\\">\\n        <div class=\\\"frigg-loading-spinner__overlay-content\\\">\\n          <svg \\n            class=\\\"frigg-loading-spinner__svg\\\" \\n            viewBox=\\\"0 0 24 24\\\" \\n            fill=\\\"none\\\"\\n            [attr.aria-label]=\\\"label\\\"\\n          >\\n            <circle \\n              class=\\\"frigg-loading-spinner__circle-bg\\\"\\n              cx=\\\"12\\\" \\n              cy=\\\"12\\\" \\n              r=\\\"10\\\" \\n              stroke=\\\"currentColor\\\" \\n              stroke-width=\\\"2\\\"\\n            />\\n            <path \\n              class=\\\"frigg-loading-spinner__circle\\\"\\n              d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10\\\"\\n              stroke=\\\"currentColor\\\" \\n              stroke-width=\\\"2\\\"\\n              stroke-linecap=\\\"round\\\"\\n            />\\n          </svg>\\n          <span class=\\\"frigg-loading-spinner__text\\\" *ngIf=\\\"text\\\">{{ text }}</span>\\n        </div>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-loading-spinner {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    .frigg-loading-spinner__container {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      gap: 8px;\\n    }\\n\\n    .frigg-loading-spinner__svg {\\n      width: 32px;\\n      height: 32px;\\n      animation: spin 1s linear infinite;\\n      color: #3B82F6;\\n    }\\n\\n    .frigg-loading-spinner--small .frigg-loading-spinner__svg {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    .frigg-loading-spinner--large .frigg-loading-spinner__svg {\\n      width: 48px;\\n      height: 48px;\\n    }\\n\\n    .frigg-loading-spinner__circle-bg {\\n      opacity: 0.2;\\n    }\\n\\n    .frigg-loading-spinner__circle {\\n      opacity: 1;\\n    }\\n\\n    .frigg-loading-spinner__text {\\n      font-size: 14px;\\n      color: #6B7280;\\n      text-align: center;\\n    }\\n\\n    .frigg-loading-spinner--inline {\\n      display: inline-flex;\\n    }\\n\\n    .frigg-loading-spinner--inline .frigg-loading-spinner__container {\\n      flex-direction: row;\\n    }\\n\\n    /* Overlay styles */\\n    .frigg-loading-spinner--overlay {\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      z-index: 9998;\\n    }\\n\\n    .frigg-loading-spinner__overlay {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      background: rgba(255, 255, 255, 0.95);\\n      backdrop-filter: blur(4px);\\n    }\\n\\n    .frigg-loading-spinner__overlay-content {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      gap: 12px;\\n    }\\n\\n    /* Dark mode support */\\n    @media (prefers-color-scheme: dark) {\\n      .frigg-loading-spinner__svg {\\n        color: #60A5FA;\\n      }\\n\\n      .frigg-loading-spinner__text {\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-loading-spinner__overlay {\\n        background: rgba(17, 24, 39, 0.95);\\n      }\\n    }\\n\\n    /* Animation */\\n    @keyframes spin {\\n      from {\\n        transform: rotate(0deg);\\n      }\\n      to {\\n        transform: rotate(360deg);\\n      }\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggLoadingSpinnerComponent {\\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\\n  @Input() text?: string;\\n  @Input() inline: boolean = false;\\n  @Input() overlay: boolean = false;\\n  @Input() label: string = 'Loading';\\n}\",\"/**\\n * Angular Modal Component\\n * Displays content in a modal overlay with customizable options\\n */\\n\\nimport { \\n  Component, \\n  Input, \\n  Output, \\n  EventEmitter,\\n  OnInit,\\n  OnDestroy,\\n  ChangeDetectionStrategy,\\n  ViewChild,\\n  ElementRef,\\n  AfterViewInit\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { \\n  trigger, \\n  state, \\n  style, \\n  transition, \\n  animate \\n} from '@angular/animations';\\n\\n@Component({\\n  selector: 'frigg-modal',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div \\n      class=\\\"frigg-modal\\\"\\n      [class.frigg-modal--open]=\\\"isOpen\\\"\\n      [@fadeIn]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n      (click)=\\\"handleBackdropClick($event)\\\"\\n    >\\n      <div \\n        class=\\\"frigg-modal__backdrop\\\"\\n        [@fadeIn]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n      ></div>\\n      \\n      <div \\n        class=\\\"frigg-modal__container\\\"\\n        [class.frigg-modal__container--small]=\\\"size === 'small'\\\"\\n        [class.frigg-modal__container--large]=\\\"size === 'large'\\\"\\n        [class.frigg-modal__container--fullscreen]=\\\"size === 'fullscreen'\\\"\\n        [@slideUp]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n        #modalContent\\n      >\\n        <div class=\\\"frigg-modal__header\\\" *ngIf=\\\"title || showCloseButton\\\">\\n          <h2 class=\\\"frigg-modal__title\\\" *ngIf=\\\"title\\\">{{ title }}</h2>\\n          <button \\n            *ngIf=\\\"showCloseButton\\\"\\n            class=\\\"frigg-modal__close\\\"\\n            (click)=\\\"handleClose()\\\"\\n            aria-label=\\\"Close modal\\\"\\n          >\\n            <svg viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\">\\n              <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\" />\\n            </svg>\\n          </button>\\n        </div>\\n        \\n        <div class=\\\"frigg-modal__body\\\">\\n          <ng-content></ng-content>\\n        </div>\\n        \\n        <div class=\\\"frigg-modal__footer\\\" *ngIf=\\\"showFooter\\\">\\n          <ng-content select=\\\"[modal-footer]\\\"></ng-content>\\n        </div>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-modal {\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      z-index: 10000;\\n      display: none;\\n      align-items: center;\\n      justify-content: center;\\n      padding: 20px;\\n    }\\n\\n    .frigg-modal--open {\\n      display: flex;\\n    }\\n\\n    .frigg-modal__backdrop {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      background: rgba(0, 0, 0, 0.5);\\n      backdrop-filter: blur(4px);\\n    }\\n\\n    .frigg-modal__container {\\n      position: relative;\\n      max-width: 600px;\\n      width: 100%;\\n      max-height: 90vh;\\n      display: flex;\\n      flex-direction: column;\\n      background: white;\\n      border-radius: 12px;\\n      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\\n      overflow: hidden;\\n    }\\n\\n    .frigg-modal__container--small {\\n      max-width: 400px;\\n    }\\n\\n    .frigg-modal__container--large {\\n      max-width: 800px;\\n    }\\n\\n    .frigg-modal__container--fullscreen {\\n      max-width: 100%;\\n      width: 100%;\\n      height: 100vh;\\n      max-height: 100vh;\\n      border-radius: 0;\\n    }\\n\\n    .frigg-modal__header {\\n      display: flex;\\n      align-items: center;\\n      justify-content: space-between;\\n      padding: 20px 24px;\\n      border-bottom: 1px solid #E5E7EB;\\n    }\\n\\n    .frigg-modal__title {\\n      font-size: 18px;\\n      font-weight: 600;\\n      color: #111827;\\n      margin: 0;\\n    }\\n\\n    .frigg-modal__close {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 32px;\\n      height: 32px;\\n      padding: 0;\\n      background: transparent;\\n      border: none;\\n      border-radius: 6px;\\n      color: #6B7280;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-modal__close:hover {\\n      background: #F3F4F6;\\n      color: #374151;\\n    }\\n\\n    .frigg-modal__close svg {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    .frigg-modal__body {\\n      flex: 1;\\n      padding: 24px;\\n      overflow-y: auto;\\n    }\\n\\n    .frigg-modal__footer {\\n      padding: 16px 24px;\\n      border-top: 1px solid #E5E7EB;\\n      display: flex;\\n      justify-content: flex-end;\\n      gap: 12px;\\n    }\\n\\n    /* Mobile responsive */\\n    @media (max-width: 640px) {\\n      .frigg-modal {\\n        padding: 0;\\n      }\\n\\n      .frigg-modal__container {\\n        max-width: 100%;\\n        width: 100%;\\n        height: 100vh;\\n        max-height: 100vh;\\n        border-radius: 0;\\n      }\\n    }\\n\\n    /* Dark mode support */\\n    @media (prefers-color-scheme: dark) {\\n      .frigg-modal__backdrop {\\n        background: rgba(0, 0, 0, 0.8);\\n      }\\n\\n      .frigg-modal__container {\\n        background: #1F2937;\\n      }\\n\\n      .frigg-modal__header {\\n        border-bottom-color: #374151;\\n      }\\n\\n      .frigg-modal__title {\\n        color: white;\\n      }\\n\\n      .frigg-modal__close {\\n        color: #9CA3AF;\\n      }\\n\\n      .frigg-modal__close:hover {\\n        background: #374151;\\n        color: white;\\n      }\\n\\n      .frigg-modal__footer {\\n        border-top-color: #374151;\\n      }\\n    }\\n  `],\\n  animations: [\\n    trigger('fadeIn', [\\n      state('hidden', style({\\n        opacity: 0\\n      })),\\n      state('visible', style({\\n        opacity: 1\\n      })),\\n      transition('hidden => visible', [\\n        animate('200ms ease-out')\\n      ]),\\n      transition('visible => hidden', [\\n        animate('150ms ease-in')\\n      ])\\n    ]),\\n    trigger('slideUp', [\\n      state('hidden', style({\\n        transform: 'translateY(20px) scale(0.95)',\\n        opacity: 0\\n      })),\\n      state('visible', style({\\n        transform: 'translateY(0) scale(1)',\\n        opacity: 1\\n      })),\\n      transition('hidden => visible', [\\n        animate('300ms cubic-bezier(0.16, 1, 0.3, 1)')\\n      ]),\\n      transition('visible => hidden', [\\n        animate('200ms cubic-bezier(0.7, 0, 0.84, 0)')\\n      ])\\n    ])\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggModalComponent implements OnInit, OnDestroy, AfterViewInit {\\n  @Input() isOpen: boolean = false;\\n  @Input() title?: string;\\n  @Input() size: 'small' | 'medium' | 'large' | 'fullscreen' = 'medium';\\n  @Input() showCloseButton: boolean = true;\\n  @Input() showFooter: boolean = false;\\n  @Input() closeOnEscape: boolean = true;\\n  @Input() closeOnBackdrop: boolean = true;\\n  \\n  @Output() close = new EventEmitter<void>();\\n  \\n  @ViewChild('modalContent', { static: false }) modalContent?: ElementRef;\\n\\n  ngOnInit(): void {\\n    if (this.closeOnEscape) {\\n      document.addEventListener('keydown', this.handleEscapeKey);\\n    }\\n  }\\n\\n  ngOnDestroy(): void {\\n    document.removeEventListener('keydown', this.handleEscapeKey);\\n  }\\n\\n  ngAfterViewInit(): void {\\n    // Focus trap management\\n    if (this.isOpen && this.modalContent) {\\n      this.trapFocus();\\n    }\\n  }\\n\\n  handleBackdropClick(event: MouseEvent): void {\\n    if (this.closeOnBackdrop && event.target === event.currentTarget) {\\n      this.handleClose();\\n    }\\n  }\\n\\n  handleClose(): void {\\n    this.close.emit();\\n  }\\n\\n  private handleEscapeKey = (event: KeyboardEvent): void => {\\n    if (event.key === 'Escape' && this.isOpen) {\\n      this.handleClose();\\n    }\\n  };\\n\\n  private trapFocus(): void {\\n    // Simple focus trap implementation\\n    const focusableElements = this.modalContent?.nativeElement.querySelectorAll(\\n      'a[href], button, textarea, input[type=\\\"text\\\"], input[type=\\\"radio\\\"], input[type=\\\"checkbox\\\"], select'\\n    );\\n    \\n    const firstFocusable = focusableElements?.[0];\\n    const lastFocusable = focusableElements?.[focusableElements.length - 1];\\n\\n    if (firstFocusable) {\\n      (firstFocusable as HTMLElement).focus();\\n    }\\n\\n    // Tab cycling logic would go here\\n  }\\n}\",\"/**\\n * Angular Integration Card Component\\n * Displays integration information in a card format\\n */\\n\\nimport { \\n  Component, \\n  Input, \\n  Output, \\n  EventEmitter,\\n  ChangeDetectionStrategy\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\n\\nexport interface IntegrationEntity {\\n  id: string;\\n  type: string;\\n  name: string;\\n  icon?: string;\\n  status: 'connected' | 'disconnected' | 'error';\\n}\\n\\nexport interface Integration {\\n  id: string;\\n  name: string;\\n  description?: string;\\n  entities: IntegrationEntity[];\\n  status: 'active' | 'inactive' | 'error' | 'pending';\\n  lastSync?: Date;\\n  config?: any;\\n  metrics?: {\\n    syncedRecords?: number;\\n    errors?: number;\\n    lastError?: string;\\n  };\\n}\\n\\n@Component({\\n  selector: 'frigg-integration-card',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div \\n      class=\\\"frigg-integration-card\\\"\\n      [class.frigg-integration-card--active]=\\\"integration.status === 'active'\\\"\\n      [class.frigg-integration-card--error]=\\\"integration.status === 'error'\\\"\\n      [class.frigg-integration-card--clickable]=\\\"clickable\\\"\\n      (click)=\\\"handleClick()\\\"\\n    >\\n      <div class=\\\"frigg-integration-card__header\\\">\\n        <div class=\\\"frigg-integration-card__entities\\\">\\n          <div \\n            *ngFor=\\\"let entity of integration.entities; let i = index\\\"\\n            class=\\\"frigg-integration-card__entity\\\"\\n          >\\n            <img \\n              *ngIf=\\\"entity.icon\\\" \\n              [src]=\\\"entity.icon\\\" \\n              [alt]=\\\"entity.name\\\"\\n              class=\\\"frigg-integration-card__entity-icon\\\"\\n            >\\n            <span class=\\\"frigg-integration-card__entity-name\\\">{{ entity.name }}</span>\\n            <svg \\n              *ngIf=\\\"i < integration.entities.length - 1\\\"\\n              class=\\\"frigg-integration-card__arrow\\\"\\n              viewBox=\\\"0 0 20 20\\\"\\n              fill=\\\"currentColor\\\"\\n            >\\n              <path fill-rule=\\\"evenodd\\\" d=\\\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" />\\n            </svg>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"frigg-integration-card__status\\\">\\n          <span \\n            class=\\\"frigg-integration-card__status-badge\\\"\\n            [class.frigg-integration-card__status-badge--active]=\\\"integration.status === 'active'\\\"\\n            [class.frigg-integration-card__status-badge--error]=\\\"integration.status === 'error'\\\"\\n            [class.frigg-integration-card__status-badge--pending]=\\\"integration.status === 'pending'\\\"\\n          >\\n            {{ getStatusText(integration.status) }}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"frigg-integration-card__content\\\">\\n        <h3 class=\\\"frigg-integration-card__title\\\">{{ integration.name }}</h3>\\n        <p class=\\\"frigg-integration-card__description\\\" *ngIf=\\\"integration.description\\\">\\n          {{ integration.description }}\\n        </p>\\n      </div>\\n\\n      <div class=\\\"frigg-integration-card__metrics\\\" *ngIf=\\\"showMetrics && integration.metrics\\\">\\n        <div class=\\\"frigg-integration-card__metric\\\">\\n          <span class=\\\"frigg-integration-card__metric-label\\\">Synced Records</span>\\n          <span class=\\\"frigg-integration-card__metric-value\\\">\\n            {{ integration.metrics.syncedRecords || 0 | number }}\\n          </span>\\n        </div>\\n        <div class=\\\"frigg-integration-card__metric\\\" *ngIf=\\\"integration.lastSync\\\">\\n          <span class=\\\"frigg-integration-card__metric-label\\\">Last Sync</span>\\n          <span class=\\\"frigg-integration-card__metric-value\\\">\\n            {{ getRelativeTime(integration.lastSync) }}\\n          </span>\\n        </div>\\n        <div \\n          class=\\\"frigg-integration-card__metric\\\" \\n          *ngIf=\\\"integration.metrics.errors && integration.metrics.errors > 0\\\"\\n        >\\n          <span class=\\\"frigg-integration-card__metric-label\\\">Errors</span>\\n          <span class=\\\"frigg-integration-card__metric-value frigg-integration-card__metric-value--error\\\">\\n            {{ integration.metrics.errors }}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"frigg-integration-card__actions\\\" *ngIf=\\\"showActions\\\">\\n        <button \\n          class=\\\"frigg-integration-card__action\\\"\\n          (click)=\\\"handleConfigure($event)\\\"\\n          [disabled]=\\\"actionsDisabled\\\"\\n        >\\n          Configure\\n        </button>\\n        <button \\n          class=\\\"frigg-integration-card__action frigg-integration-card__action--secondary\\\"\\n          (click)=\\\"handleView($event)\\\"\\n          [disabled]=\\\"actionsDisabled\\\"\\n        >\\n          View Details\\n        </button>\\n        <button \\n          *ngIf=\\\"integration.status === 'active'\\\"\\n          class=\\\"frigg-integration-card__action frigg-integration-card__action--secondary\\\"\\n          (click)=\\\"handleSync($event)\\\"\\n          [disabled]=\\\"actionsDisabled\\\"\\n        >\\n          Sync Now\\n        </button>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-integration-card {\\n      background: white;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 12px;\\n      padding: 20px;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-integration-card--clickable {\\n      cursor: pointer;\\n    }\\n\\n    .frigg-integration-card--clickable:hover {\\n      border-color: #D1D5DB;\\n      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\\n    }\\n\\n    .frigg-integration-card--active {\\n      border-color: #10B981;\\n    }\\n\\n    .frigg-integration-card--error {\\n      border-color: #EF4444;\\n      background: #FEF2F2;\\n    }\\n\\n    /* Header */\\n    .frigg-integration-card__header {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      margin-bottom: 16px;\\n    }\\n\\n    .frigg-integration-card__entities {\\n      display: flex;\\n      align-items: center;\\n      gap: 12px;\\n    }\\n\\n    .frigg-integration-card__entity {\\n      display: flex;\\n      align-items: center;\\n      gap: 8px;\\n    }\\n\\n    .frigg-integration-card__entity-icon {\\n      width: 24px;\\n      height: 24px;\\n      border-radius: 4px;\\n    }\\n\\n    .frigg-integration-card__entity-name {\\n      font-size: 14px;\\n      font-weight: 500;\\n      color: #374151;\\n    }\\n\\n    .frigg-integration-card__arrow {\\n      width: 16px;\\n      height: 16px;\\n      color: #9CA3AF;\\n    }\\n\\n    /* Status */\\n    .frigg-integration-card__status-badge {\\n      display: inline-flex;\\n      align-items: center;\\n      padding: 4px 12px;\\n      border-radius: 9999px;\\n      font-size: 12px;\\n      font-weight: 500;\\n      background: #F3F4F6;\\n      color: #6B7280;\\n    }\\n\\n    .frigg-integration-card__status-badge--active {\\n      background: #D1FAE5;\\n      color: #065F46;\\n    }\\n\\n    .frigg-integration-card__status-badge--error {\\n      background: #FEE2E2;\\n      color: #991B1B;\\n    }\\n\\n    .frigg-integration-card__status-badge--pending {\\n      background: #FEF3C7;\\n      color: #92400E;\\n    }\\n\\n    /* Content */\\n    .frigg-integration-card__content {\\n      margin-bottom: 16px;\\n    }\\n\\n    .frigg-integration-card__title {\\n      font-size: 16px;\\n      font-weight: 600;\\n      color: #111827;\\n      margin: 0 0 8px 0;\\n    }\\n\\n    .frigg-integration-card__description {\\n      font-size: 14px;\\n      color: #6B7280;\\n      margin: 0;\\n    }\\n\\n    /* Metrics */\\n    .frigg-integration-card__metrics {\\n      display: flex;\\n      gap: 24px;\\n      padding: 16px 0;\\n      border-top: 1px solid #E5E7EB;\\n      border-bottom: 1px solid #E5E7EB;\\n      margin-bottom: 16px;\\n    }\\n\\n    .frigg-integration-card__metric {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 4px;\\n    }\\n\\n    .frigg-integration-card__metric-label {\\n      font-size: 12px;\\n      color: #6B7280;\\n    }\\n\\n    .frigg-integration-card__metric-value {\\n      font-size: 16px;\\n      font-weight: 600;\\n      color: #111827;\\n    }\\n\\n    .frigg-integration-card__metric-value--error {\\n      color: #EF4444;\\n    }\\n\\n    /* Actions */\\n    .frigg-integration-card__actions {\\n      display: flex;\\n      gap: 12px;\\n    }\\n\\n    .frigg-integration-card__action {\\n      padding: 8px 16px;\\n      border-radius: 6px;\\n      font-size: 14px;\\n      font-weight: 500;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n      background: #3B82F6;\\n      color: white;\\n      border: 1px solid #3B82F6;\\n    }\\n\\n    .frigg-integration-card__action:hover {\\n      background: #2563EB;\\n      border-color: #2563EB;\\n    }\\n\\n    .frigg-integration-card__action:disabled {\\n      opacity: 0.5;\\n      cursor: not-allowed;\\n    }\\n\\n    .frigg-integration-card__action--secondary {\\n      background: white;\\n      color: #374151;\\n      border-color: #D1D5DB;\\n    }\\n\\n    .frigg-integration-card__action--secondary:hover {\\n      background: #F9FAFB;\\n      border-color: #9CA3AF;\\n    }\\n\\n    /* Dark mode support */\\n    @media (prefers-color-scheme: dark) {\\n      .frigg-integration-card {\\n        background: #1F2937;\\n        border-color: #374151;\\n      }\\n\\n      .frigg-integration-card--error {\\n        background: #7F1D1D;\\n      }\\n\\n      .frigg-integration-card__entity-name {\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-integration-card__title {\\n        color: white;\\n      }\\n\\n      .frigg-integration-card__description {\\n        color: #9CA3AF;\\n      }\\n\\n      .frigg-integration-card__metrics {\\n        border-color: #374151;\\n      }\\n\\n      .frigg-integration-card__metric-label {\\n        color: #9CA3AF;\\n      }\\n\\n      .frigg-integration-card__metric-value {\\n        color: white;\\n      }\\n\\n      .frigg-integration-card__action--secondary {\\n        background: #374151;\\n        color: white;\\n        border-color: #4B5563;\\n      }\\n\\n      .frigg-integration-card__action--secondary:hover {\\n        background: #4B5563;\\n        border-color: #6B7280;\\n      }\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggIntegrationCardComponent {\\n  @Input() integration!: Integration;\\n  @Input() showMetrics: boolean = true;\\n  @Input() showActions: boolean = true;\\n  @Input() clickable: boolean = false;\\n  @Input() actionsDisabled: boolean = false;\\n  \\n  @Output() click = new EventEmitter<Integration>();\\n  @Output() configure = new EventEmitter<Integration>();\\n  @Output() view = new EventEmitter<Integration>();\\n  @Output() sync = new EventEmitter<Integration>();\\n\\n  handleClick(): void {\\n    if (this.clickable) {\\n      this.click.emit(this.integration);\\n    }\\n  }\\n\\n  handleConfigure(event: Event): void {\\n    event.stopPropagation();\\n    this.configure.emit(this.integration);\\n  }\\n\\n  handleView(event: Event): void {\\n    event.stopPropagation();\\n    this.view.emit(this.integration);\\n  }\\n\\n  handleSync(event: Event): void {\\n    event.stopPropagation();\\n    this.sync.emit(this.integration);\\n  }\\n\\n  getStatusText(status: string): string {\\n    const statusMap: Record<string, string> = {\\n      active: 'Active',\\n      inactive: 'Inactive',\\n      error: 'Error',\\n      pending: 'Pending'\\n    };\\n    return statusMap[status] || status;\\n  }\\n\\n  getRelativeTime(date: Date): string {\\n    const now = new Date();\\n    const diff = now.getTime() - new Date(date).getTime();\\n    const minutes = Math.floor(diff / 60000);\\n    const hours = Math.floor(minutes / 60);\\n    const days = Math.floor(hours / 24);\\n\\n    if (days > 0) return `${days}d ago`;\\n    if (hours > 0) return `${hours}h ago`;\\n    if (minutes > 0) return `${minutes}m ago`;\\n    return 'Just now';\\n  }\\n}\",\"/**\\n * Angular Alerts Panel Component\\n * Displays and manages integration alerts with real-time updates\\n */\\n\\nimport { \\n  Component, \\n  Input, \\n  OnInit, \\n  OnDestroy,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { Subject } from 'rxjs';\\nimport { takeUntil } from 'rxjs/operators';\\nimport { AlertsService, Alert } from '../../services/alerts.service';\\nimport { FriggLoadingSpinnerComponent } from '../loading/loading-spinner.component';\\n\\n@Component({\\n  selector: 'frigg-alerts-panel',\\n  standalone: true,\\n  imports: [CommonModule, FriggLoadingSpinnerComponent],\\n  template: `\\n    <div class=\\\"frigg-alerts-panel\\\">\\n      <div class=\\\"frigg-alerts-panel__header\\\">\\n        <h2 class=\\\"frigg-alerts-panel__title\\\">Alerts</h2>\\n        <div class=\\\"frigg-alerts-panel__actions\\\">\\n          <button \\n            class=\\\"frigg-alerts-panel__filter\\\"\\n            [class.frigg-alerts-panel__filter--active]=\\\"activeFilter === filter\\\"\\n            *ngFor=\\\"let filter of filters\\\"\\n            (click)=\\\"setFilter(filter)\\\"\\n          >\\n            {{ filter }}\\n            <span class=\\\"frigg-alerts-panel__filter-count\\\" *ngIf=\\\"getFilterCount(filter) > 0\\\">\\n              {{ getFilterCount(filter) }}\\n            </span>\\n          </button>\\n          <button \\n            class=\\\"frigg-alerts-panel__refresh\\\"\\n            (click)=\\\"refresh()\\\"\\n            [disabled]=\\\"loading\\\"\\n          >\\n            <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n              <path fill-rule=\\\"evenodd\\\" d=\\\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\\\" clip-rule=\\\"evenodd\\\" />\\n            </svg>\\n          </button>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"frigg-alerts-panel__content\\\">\\n        <frigg-loading-spinner \\n          *ngIf=\\\"loading && !alerts.length\\\"\\n          [text]=\\\"'Loading alerts...'\\\"\\n        ></frigg-loading-spinner>\\n\\n        <div \\n          class=\\\"frigg-alerts-panel__empty\\\" \\n          *ngIf=\\\"!loading && filteredAlerts.length === 0\\\"\\n        >\\n          <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n            <path d=\\\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\\\" />\\n          </svg>\\n          <p>No alerts found</p>\\n        </div>\\n\\n        <div class=\\\"frigg-alerts-panel__list\\\" *ngIf=\\\"filteredAlerts.length > 0\\\">\\n          <div \\n            *ngFor=\\\"let alert of filteredAlerts; trackBy: trackByAlertId\\\"\\n            class=\\\"frigg-alerts-panel__alert\\\"\\n            [class.frigg-alerts-panel__alert--critical]=\\\"alert.severity === 'critical'\\\"\\n            [class.frigg-alerts-panel__alert--high]=\\\"alert.severity === 'high'\\\"\\n            [class.frigg-alerts-panel__alert--medium]=\\\"alert.severity === 'medium'\\\"\\n            [class.frigg-alerts-panel__alert--low]=\\\"alert.severity === 'low'\\\"\\n            [class.frigg-alerts-panel__alert--acknowledged]=\\\"alert.status === 'acknowledged'\\\"\\n          >\\n            <div class=\\\"frigg-alerts-panel__alert-icon\\\">\\n              <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                <path fill-rule=\\\"evenodd\\\" d=\\\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\\\" clip-rule=\\\"evenodd\\\" />\\n              </svg>\\n            </div>\\n            \\n            <div class=\\\"frigg-alerts-panel__alert-content\\\">\\n              <h3 class=\\\"frigg-alerts-panel__alert-title\\\">{{ alert.title }}</h3>\\n              <p class=\\\"frigg-alerts-panel__alert-description\\\">{{ alert.description }}</p>\\n              <div class=\\\"frigg-alerts-panel__alert-meta\\\">\\n                <span class=\\\"frigg-alerts-panel__alert-time\\\">\\n                  {{ getRelativeTime(alert.timestamp) }}\\n                </span>\\n                <span class=\\\"frigg-alerts-panel__alert-severity\\\">\\n                  {{ alert.severity }}\\n                </span>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"frigg-alerts-panel__alert-actions\\\">\\n              <button \\n                *ngIf=\\\"alert.status === 'active'\\\"\\n                class=\\\"frigg-alerts-panel__alert-action\\\"\\n                (click)=\\\"acknowledgeAlert(alert)\\\"\\n                title=\\\"Acknowledge\\\"\\n              >\\n                <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                  <path fill-rule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clip-rule=\\\"evenodd\\\" />\\n                </svg>\\n              </button>\\n              <button \\n                *ngIf=\\\"alert.status !== 'resolved'\\\"\\n                class=\\\"frigg-alerts-panel__alert-action\\\"\\n                (click)=\\\"resolveAlert(alert)\\\"\\n                title=\\\"Resolve\\\"\\n              >\\n                <svg viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                  <path fill-rule=\\\"evenodd\\\" d=\\\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\\\" clip-rule=\\\"evenodd\\\" />\\n                </svg>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"frigg-alerts-panel__footer\\\" *ngIf=\\\"showLoadMore && hasMore\\\">\\n        <button \\n          class=\\\"frigg-alerts-panel__load-more\\\"\\n          (click)=\\\"loadMore()\\\"\\n          [disabled]=\\\"loading\\\"\\n        >\\n          Load More\\n        </button>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    .frigg-alerts-panel {\\n      background: white;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 12px;\\n      overflow: hidden;\\n    }\\n\\n    /* Header */\\n    .frigg-alerts-panel__header {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      padding: 16px 20px;\\n      border-bottom: 1px solid #E5E7EB;\\n    }\\n\\n    .frigg-alerts-panel__title {\\n      font-size: 18px;\\n      font-weight: 600;\\n      color: #111827;\\n      margin: 0;\\n    }\\n\\n    .frigg-alerts-panel__actions {\\n      display: flex;\\n      gap: 8px;\\n    }\\n\\n    .frigg-alerts-panel__filter {\\n      display: flex;\\n      align-items: center;\\n      gap: 4px;\\n      padding: 6px 12px;\\n      background: transparent;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 6px;\\n      font-size: 14px;\\n      color: #6B7280;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-alerts-panel__filter:hover {\\n      background: #F9FAFB;\\n      border-color: #D1D5DB;\\n    }\\n\\n    .frigg-alerts-panel__filter--active {\\n      background: #3B82F6;\\n      border-color: #3B82F6;\\n      color: white;\\n    }\\n\\n    .frigg-alerts-panel__filter-count {\\n      padding: 2px 6px;\\n      background: rgba(0, 0, 0, 0.1);\\n      border-radius: 9999px;\\n      font-size: 12px;\\n      font-weight: 500;\\n    }\\n\\n    .frigg-alerts-panel__refresh {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 36px;\\n      height: 36px;\\n      padding: 0;\\n      background: transparent;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 6px;\\n      color: #6B7280;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-alerts-panel__refresh:hover {\\n      background: #F9FAFB;\\n      border-color: #D1D5DB;\\n    }\\n\\n    .frigg-alerts-panel__refresh:disabled {\\n      opacity: 0.5;\\n      cursor: not-allowed;\\n    }\\n\\n    .frigg-alerts-panel__refresh svg {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    /* Content */\\n    .frigg-alerts-panel__content {\\n      min-height: 200px;\\n      max-height: 600px;\\n      overflow-y: auto;\\n    }\\n\\n    .frigg-alerts-panel__empty {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      justify-content: center;\\n      padding: 60px 20px;\\n      color: #9CA3AF;\\n    }\\n\\n    .frigg-alerts-panel__empty svg {\\n      width: 48px;\\n      height: 48px;\\n      margin-bottom: 16px;\\n    }\\n\\n    /* Alert list */\\n    .frigg-alerts-panel__list {\\n      padding: 0;\\n    }\\n\\n    .frigg-alerts-panel__alert {\\n      display: flex;\\n      gap: 16px;\\n      padding: 16px 20px;\\n      border-bottom: 1px solid #E5E7EB;\\n      transition: background 0.2s ease;\\n    }\\n\\n    .frigg-alerts-panel__alert:hover {\\n      background: #F9FAFB;\\n    }\\n\\n    .frigg-alerts-panel__alert:last-child {\\n      border-bottom: none;\\n    }\\n\\n    .frigg-alerts-panel__alert--acknowledged {\\n      opacity: 0.7;\\n    }\\n\\n    .frigg-alerts-panel__alert-icon {\\n      flex-shrink: 0;\\n      width: 40px;\\n      height: 40px;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      border-radius: 8px;\\n      background: #FEF3C7;\\n      color: #D97706;\\n    }\\n\\n    .frigg-alerts-panel__alert--critical .frigg-alerts-panel__alert-icon {\\n      background: #FEE2E2;\\n      color: #DC2626;\\n    }\\n\\n    .frigg-alerts-panel__alert--high .frigg-alerts-panel__alert-icon {\\n      background: #FFEDD5;\\n      color: #EA580C;\\n    }\\n\\n    .frigg-alerts-panel__alert--medium .frigg-alerts-panel__alert-icon {\\n      background: #FEF3C7;\\n      color: #D97706;\\n    }\\n\\n    .frigg-alerts-panel__alert--low .frigg-alerts-panel__alert-icon {\\n      background: #DBEAFE;\\n      color: #2563EB;\\n    }\\n\\n    .frigg-alerts-panel__alert-icon svg {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    .frigg-alerts-panel__alert-content {\\n      flex: 1;\\n      min-width: 0;\\n    }\\n\\n    .frigg-alerts-panel__alert-title {\\n      font-size: 14px;\\n      font-weight: 600;\\n      color: #111827;\\n      margin: 0 0 4px 0;\\n    }\\n\\n    .frigg-alerts-panel__alert-description {\\n      font-size: 14px;\\n      color: #6B7280;\\n      margin: 0 0 8px 0;\\n    }\\n\\n    .frigg-alerts-panel__alert-meta {\\n      display: flex;\\n      gap: 16px;\\n      font-size: 12px;\\n      color: #9CA3AF;\\n    }\\n\\n    .frigg-alerts-panel__alert-severity {\\n      text-transform: uppercase;\\n      font-weight: 500;\\n    }\\n\\n    .frigg-alerts-panel__alert-actions {\\n      display: flex;\\n      gap: 8px;\\n      align-items: center;\\n    }\\n\\n    .frigg-alerts-panel__alert-action {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 32px;\\n      height: 32px;\\n      padding: 0;\\n      background: transparent;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 6px;\\n      color: #6B7280;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-alerts-panel__alert-action:hover {\\n      background: white;\\n      border-color: #D1D5DB;\\n      color: #374151;\\n    }\\n\\n    .frigg-alerts-panel__alert-action svg {\\n      width: 16px;\\n      height: 16px;\\n    }\\n\\n    /* Footer */\\n    .frigg-alerts-panel__footer {\\n      padding: 16px 20px;\\n      border-top: 1px solid #E5E7EB;\\n      text-align: center;\\n    }\\n\\n    .frigg-alerts-panel__load-more {\\n      padding: 8px 24px;\\n      background: white;\\n      border: 1px solid #E5E7EB;\\n      border-radius: 6px;\\n      font-size: 14px;\\n      font-weight: 500;\\n      color: #374151;\\n      cursor: pointer;\\n      transition: all 0.2s ease;\\n    }\\n\\n    .frigg-alerts-panel__load-more:hover {\\n      background: #F9FAFB;\\n      border-color: #D1D5DB;\\n    }\\n\\n    .frigg-alerts-panel__load-more:disabled {\\n      opacity: 0.5;\\n      cursor: not-allowed;\\n    }\\n\\n    /* Dark mode support */\\n    @media (prefers-color-scheme: dark) {\\n      .frigg-alerts-panel {\\n        background: #1F2937;\\n        border-color: #374151;\\n      }\\n\\n      .frigg-alerts-panel__header {\\n        border-color: #374151;\\n      }\\n\\n      .frigg-alerts-panel__title {\\n        color: white;\\n      }\\n\\n      .frigg-alerts-panel__filter {\\n        border-color: #374151;\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-alerts-panel__filter:hover {\\n        background: #374151;\\n        border-color: #4B5563;\\n      }\\n\\n      .frigg-alerts-panel__refresh {\\n        border-color: #374151;\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-alerts-panel__refresh:hover {\\n        background: #374151;\\n        border-color: #4B5563;\\n      }\\n\\n      .frigg-alerts-panel__alert {\\n        border-color: #374151;\\n      }\\n\\n      .frigg-alerts-panel__alert:hover {\\n        background: #374151;\\n      }\\n\\n      .frigg-alerts-panel__alert-title {\\n        color: white;\\n      }\\n\\n      .frigg-alerts-panel__alert-description {\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-alerts-panel__alert-action {\\n        border-color: #374151;\\n        color: #D1D5DB;\\n      }\\n\\n      .frigg-alerts-panel__alert-action:hover {\\n        background: #4B5563;\\n        border-color: #6B7280;\\n        color: white;\\n      }\\n\\n      .frigg-alerts-panel__footer {\\n        border-color: #374151;\\n      }\\n\\n      .frigg-alerts-panel__load-more {\\n        background: #374151;\\n        border-color: #4B5563;\\n        color: white;\\n      }\\n\\n      .frigg-alerts-panel__load-more:hover {\\n        background: #4B5563;\\n        border-color: #6B7280;\\n      }\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class FriggAlertsPanelComponent implements OnInit, OnDestroy {\\n  @Input() integrationId!: string;\\n  @Input() limit: number = 20;\\n  @Input() autoRefresh: boolean = true;\\n  @Input() refreshInterval: number = 30000;\\n  @Input() showLoadMore: boolean = true;\\n  @Input() currentUserId: string = 'system';\\n\\n  alerts: Alert[] = [];\\n  filteredAlerts: Alert[] = [];\\n  loading: boolean = false;\\n  hasMore: boolean = false;\\n  activeFilter: string = 'All';\\n  filters: string[] = ['All', 'Active', 'Critical', 'Acknowledged'];\\n  \\n  private destroy$ = new Subject<void>();\\n  private offset: number = 0;\\n\\n  constructor(\\n    private alertsService: AlertsService,\\n    private cdr: ChangeDetectorRef\\n  ) {}\\n\\n  ngOnInit(): void {\\n    // Subscribe to alerts\\n    this.alertsService.alerts$\\n      .pipe(takeUntil(this.destroy$))\\n      .subscribe(alerts => {\\n        this.alerts = alerts;\\n        this.applyFilter();\\n        this.cdr.markForCheck();\\n      });\\n\\n    // Subscribe to loading state\\n    this.alertsService.loading$\\n      .pipe(takeUntil(this.destroy$))\\n      .subscribe(loading => {\\n        this.loading = loading;\\n        this.cdr.markForCheck();\\n      });\\n\\n    // Initial load\\n    this.loadAlerts();\\n\\n    // Set up auto-refresh if enabled\\n    if (this.autoRefresh) {\\n      this.alertsService.setupAutoRefresh(this.integrationId, this.refreshInterval)\\n        .pipe(takeUntil(this.destroy$))\\n        .subscribe();\\n    }\\n\\n    // Subscribe to real-time alerts\\n    this.alertsService.subscribeToAlerts(this.integrationId)\\n      .pipe(takeUntil(this.destroy$))\\n      .subscribe();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n  }\\n\\n  loadAlerts(): void {\\n    this.alertsService.fetchAlerts(this.integrationId, {\\n      limit: this.limit,\\n      offset: this.offset\\n    }).subscribe(alerts => {\\n      this.hasMore = alerts.length === this.limit;\\n    });\\n  }\\n\\n  loadMore(): void {\\n    this.offset += this.limit;\\n    this.loadAlerts();\\n  }\\n\\n  refresh(): void {\\n    this.offset = 0;\\n    this.alertsService.refresh();\\n  }\\n\\n  setFilter(filter: string): void {\\n    this.activeFilter = filter;\\n    this.applyFilter();\\n  }\\n\\n  applyFilter(): void {\\n    switch (this.activeFilter) {\\n      case 'Active':\\n        this.filteredAlerts = this.alerts.filter(a => a.status === 'active');\\n        break;\\n      case 'Critical':\\n        this.filteredAlerts = this.alerts.filter(a => a.severity === 'critical');\\n        break;\\n      case 'Acknowledged':\\n        this.filteredAlerts = this.alerts.filter(a => a.status === 'acknowledged');\\n        break;\\n      default:\\n        this.filteredAlerts = this.alerts;\\n    }\\n  }\\n\\n  getFilterCount(filter: string): number {\\n    switch (filter) {\\n      case 'Active':\\n        return this.alerts.filter(a => a.status === 'active').length;\\n      case 'Critical':\\n        return this.alerts.filter(a => a.severity === 'critical').length;\\n      case 'Acknowledged':\\n        return this.alerts.filter(a => a.status === 'acknowledged').length;\\n      default:\\n        return this.alerts.length;\\n    }\\n  }\\n\\n  acknowledgeAlert(alert: Alert): void {\\n    this.alertsService.acknowledgeAlert(alert.id, this.currentUserId).subscribe();\\n  }\\n\\n  resolveAlert(alert: Alert): void {\\n    const resolution = prompt('Enter resolution details:');\\n    if (resolution) {\\n      this.alertsService.resolveAlert(alert.id, this.currentUserId, resolution).subscribe();\\n    }\\n  }\\n\\n  trackByAlertId(index: number, alert: Alert): string {\\n    return alert.id;\\n  }\\n\\n  getRelativeTime(timestamp: string): string {\\n    const now = new Date();\\n    const alertTime = new Date(timestamp);\\n    const diff = now.getTime() - alertTime.getTime();\\n    const minutes = Math.floor(diff / 60000);\\n    const hours = Math.floor(minutes / 60);\\n    const days = Math.floor(hours / 24);\\n\\n    if (days > 0) return `${days}d ago`;\\n    if (hours > 0) return `${hours}h ago`;\\n    if (minutes > 0) return `${minutes}m ago`;\\n    return 'Just now';\\n  }\\n}\",\"/**\\n * Angular plugin adapter for @friggframework/ui-core\\n * Implements FrameworkPlugin interface for Angular-specific functionality\\n */\\n\\nimport { Injectable, Injector, NgZone, ApplicationRef } from '@angular/core';\\nimport { \\n  FrameworkPlugin, \\n  FrameworkAdapter, \\n  HOOKS, \\n  COMPONENTS, \\n  ADAPTERS \\n} from '@friggframework/ui-core';\\nimport { BehaviorSubject, Subject, Observable, from, of } from 'rxjs';\\nimport { map, shareReplay, distinctUntilChanged } from 'rxjs/operators';\\n\\n/**\\n * Angular-specific adapter for framework integration\\n */\\nexport class AngularAdapter extends FrameworkAdapter {\\n  constructor(\\n    private injector: Injector,\\n    private ngZone: NgZone\\n  ) {\\n    super('angular');\\n  }\\n\\n  // Angular reactive state management using RxJS\\n  override createState<T>(initialState: T): BehaviorSubject<T> {\\n    return new BehaviorSubject<T>(initialState);\\n  }\\n\\n  // Angular effect using RxJS subscriptions\\n  override createEffect(callback: () => void, dependencies?: Observable<any>[]): () => void {\\n    if (dependencies && dependencies.length > 0) {\\n      // Combine dependencies and subscribe\\n      const subscription = dependencies[0].subscribe(() => {\\n        this.ngZone.run(() => callback());\\n      });\\n      \\n      return () => subscription.unsubscribe();\\n    }\\n    \\n    // Run immediately in Angular zone\\n    this.ngZone.run(() => callback());\\n    return () => {};\\n  }\\n\\n  // Angular component creation helper\\n  override createElement(type: any, props: Record<string, any> = {}, children: any[] = []) {\\n    return {\\n      type,\\n      props,\\n      children,\\n      framework: 'angular'\\n    };\\n  }\\n\\n  // Angular event binding\\n  override bindEvent(element: HTMLElement, event: string, handler: EventListener): () => void {\\n    if (element && element.addEventListener) {\\n      // Run event handler in Angular zone\\n      const wrappedHandler = (e: Event) => {\\n        this.ngZone.run(() => handler(e));\\n      };\\n      \\n      element.addEventListener(event, wrappedHandler);\\n      return () => element.removeEventListener(event, wrappedHandler);\\n    }\\n    return () => {};\\n  }\\n\\n  // Angular-specific computed values using RxJS\\n  createComputed<T>(getter: () => T, dependencies: Observable<any>[] = []): Observable<T> {\\n    if (dependencies.length === 0) {\\n      return of(getter()).pipe(shareReplay(1));\\n    }\\n    \\n    // Create derived observable\\n    return dependencies[0].pipe(\\n      map(() => getter()),\\n      distinctUntilChanged(),\\n      shareReplay(1)\\n    );\\n  }\\n\\n  // Angular change detection trigger\\n  detectChanges(): void {\\n    const appRef = this.injector.get(ApplicationRef);\\n    appRef.tick();\\n  }\\n\\n  // Create Angular-compatible Subject\\n  createSubject<T>(): Subject<T> {\\n    return new Subject<T>();\\n  }\\n\\n  // Run code outside Angular zone (for performance)\\n  runOutsideAngular<T>(fn: () => T): T {\\n    return this.ngZone.runOutsideAngular(fn);\\n  }\\n\\n  // Run code inside Angular zone\\n  runInAngular<T>(fn: () => T): T {\\n    return this.ngZone.run(fn);\\n  }\\n}\\n\\n/**\\n * Angular Framework Plugin for ui-core\\n */\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class AngularPlugin extends FrameworkPlugin {\\n  private adapter!: AngularAdapter;\\n  private core: any;\\n\\n  constructor(\\n    private injector: Injector,\\n    private ngZone: NgZone\\n  ) {\\n    super('angular', '17.x');\\n  }\\n\\n  // Initialize the plugin\\n  initialize(): void {\\n    this.adapter = new AngularAdapter(this.injector, this.ngZone);\\n    this.setupHooks();\\n    this.setupAdapters();\\n  }\\n\\n  private setupHooks(): void {\\n    // State management hook using RxJS\\n    this.registerHook(HOOKS.STATE_MANAGER, (initialState: any) => {\\n      return this.adapter.createState(initialState);\\n    });\\n\\n    // Effect management hook using Angular zones\\n    this.registerHook(HOOKS.EFFECT_MANAGER, (callback: () => void, dependencies?: Observable<any>[]) => {\\n      return this.adapter.createEffect(callback, dependencies);\\n    });\\n\\n    // Event management hook\\n    this.registerHook(HOOKS.EVENT_MANAGER, (element: HTMLElement, event: string, handler: EventListener) => {\\n      return this.adapter.bindEvent(element, event, handler);\\n    });\\n\\n    // Component renderer hook for dynamic components\\n    this.registerHook(HOOKS.COMPONENT_RENDERER, (type: any, props: any, children: any) => {\\n      return this.adapter.createElement(type, props, children);\\n    });\\n\\n    // HTTP client hook - delegate to Angular HttpClient via services\\n    this.registerHook(HOOKS.HTTP_CLIENT, (config: any) => {\\n      // This will be handled by Angular's HttpClient service\\n      return null;\\n    });\\n  }\\n\\n  private setupAdapters(): void {\\n    // State adapter for RxJS observables\\n    this.registerAdapter(ADAPTERS.STATE, {\\n      create: <T>(initialState: T) => this.adapter.createState(initialState),\\n      behaviorSubject: <T>(value: T) => new BehaviorSubject<T>(value),\\n      subject: <T>() => new Subject<T>(),\\n      observable: <T>(value: T) => of(value),\\n      from: <T>(promise: Promise<T>) => from(promise),\\n      // Helper to convert observable to signal (for Angular 16+)\\n      toSignal: (observable: Observable<any>) => {\\n        // This would use Angular's toSignal function if available\\n        return observable;\\n      }\\n    });\\n\\n    // Effects adapter for Angular lifecycle\\n    this.registerAdapter(ADAPTERS.EFFECTS, {\\n      // Run effect in Angular zone\\n      effect: (callback: () => void, dependencies?: Observable<any>[]) => \\n        this.adapter.createEffect(callback, dependencies),\\n      // Run outside Angular for performance\\n      runOutsideAngular: <T>(fn: () => T) => this.adapter.runOutsideAngular(fn),\\n      // Trigger change detection\\n      detectChanges: () => this.adapter.detectChanges(),\\n      // Subscribe to observable\\n      subscribe: <T>(observable: Observable<T>, callback: (value: T) => void) => {\\n        const subscription = observable.subscribe(value => {\\n          this.ngZone.run(() => callback(value));\\n        });\\n        return () => subscription.unsubscribe();\\n      }\\n    });\\n\\n    // Events adapter\\n    this.registerAdapter(ADAPTERS.EVENTS, {\\n      bind: (element: HTMLElement, event: string, handler: EventListener) => \\n        this.adapter.bindEvent(element, event, handler),\\n      emit: <T>(subject: Subject<T>, value: T) => {\\n        this.ngZone.run(() => subject.next(value));\\n      },\\n      // Create custom event emitter\\n      createEmitter: <T>() => new Subject<T>()\\n    });\\n\\n    // Angular-specific dependency injection adapter\\n    this.registerAdapter('injection', {\\n      get: <T>(token: any): T => this.injector.get(token),\\n      has: (token: any): boolean => {\\n        try {\\n          this.injector.get(token);\\n          return true;\\n        } catch {\\n          return false;\\n        }\\n      },\\n      create: <T>(token: any, options?: any): T => {\\n        // Use injector to create instance\\n        return this.injector.get(token, options);\\n      }\\n    });\\n\\n    // RxJS operators adapter\\n    this.registerAdapter('rxjs', {\\n      operators: {\\n        map,\\n        distinctUntilChanged,\\n        shareReplay,\\n        // Add more operators as needed\\n      },\\n      // Helper to create pipeable operators\\n      pipe: <T>(...operators: any[]) => (source: Observable<T>) => \\n        (source.pipe as any)(...operators)\\n    });\\n  }\\n\\n  // Angular-specific initialization\\n  init(core: any): void {\\n    // Store reference to ui-core instance\\n    this.core = core;\\n    \\n    // Set up Angular-specific components\\n    this.setupComponents();\\n    \\n    console.log('Angular plugin initialized with ui-core');\\n  }\\n\\n  private setupComponents(): void {\\n    // Register Angular component references\\n    // These will be implemented as actual Angular components\\n    this.registerComponent(COMPONENTS.TOAST, 'FriggToastComponent');\\n    this.registerComponent(COMPONENTS.MODAL, 'FriggModalComponent');\\n    this.registerComponent(COMPONENTS.LOADING_SPINNER, 'FriggLoadingSpinnerComponent');\\n    this.registerComponent(COMPONENTS.BUTTON, 'FriggButtonComponent');\\n    this.registerComponent(COMPONENTS.INPUT, 'FriggInputComponent');\\n    this.registerComponent(COMPONENTS.TABLE, 'FriggTableComponent');\\n    this.registerComponent(COMPONENTS.FORM, 'FriggFormComponent');\\n  }\\n\\n  // Angular-specific cleanup\\n  destroy(core: any): void {\\n    console.log('Angular plugin destroyed');\\n  }\\n\\n  // Get Angular adapter\\n  getAngularAdapter(): AngularAdapter {\\n    if (!this.adapter) {\\n      this.initialize();\\n    }\\n    return this.adapter;\\n  }\\n\\n  // Helper to create Observable from ui-core service\\n  createObservableFromService<T>(service: any, transformFn?: (state: any) => T): Observable<T> {\\n    const subject = new BehaviorSubject<T>(\\n      transformFn ? transformFn(service.getState()) : service.getState()\\n    );\\n    \\n    // Subscribe to service updates\\n    const unsubscribe = service.subscribe((state: any) => {\\n      this.ngZone.run(() => {\\n        subject.next(transformFn ? transformFn(state) : state);\\n      });\\n    });\\n\\n    // Return observable with cleanup\\n    return new Observable(observer => {\\n      const subscription = subject.subscribe(observer);\\n      \\n      return () => {\\n        subscription.unsubscribe();\\n        unsubscribe();\\n      };\\n    });\\n  }\\n}\\n\\n// Export factory function for Angular module\\nexport function createAngularPlugin(injector: Injector, ngZone: NgZone): AngularPlugin {\\n  const plugin = new AngularPlugin(injector, ngZone);\\n  plugin.initialize();\\n  return plugin;\\n}\",\"/**\\n * Angular services for @friggframework/ui-angular\\n * Export all services for easy import\\n */\\n\\nexport * from './toast.service';\\nexport * from './api.service';\\nexport * from './alerts.service';\\nexport * from './cloudwatch.service';\",\"/**\\n * Angular components for @friggframework/ui-angular\\n * Export all components for easy import\\n */\\n\\n// Toast components\\nexport * from './toast/toast.component';\\nexport * from './toast/toast-container.component';\\n\\n// Loading components\\nexport * from './loading/loading-spinner.component';\\n\\n// Modal components\\nexport * from './modal/modal.component';\\n\\n// Integration components\\nexport * from './integration/integration-card.component';\\n\\n// Alert components\\nexport * from './alerts/alerts-panel.component';\",\"/**\\n * Angular Module for Frigg UI\\n * Provides all components and services in a single module\\n */\\n\\nimport { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { HttpClientModule } from '@angular/common/http';\\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\\n\\n// Services\\nimport { \\n  ToastService,\\n  ApiService,\\n  AlertsService,\\n  CloudWatchService\\n} from '../services';\\n\\n// Components\\nimport {\\n  FriggToastComponent,\\n  FriggToastContainerComponent,\\n  FriggLoadingSpinnerComponent,\\n  FriggModalComponent,\\n  FriggIntegrationCardComponent,\\n  FriggAlertsPanelComponent\\n} from '../components';\\n\\n// Plugin\\nimport { AngularPlugin, createAngularPlugin } from '../plugins/angular-plugin';\\n\\n// Configuration interfaces\\nexport interface FriggUiConfig {\\n  apiBaseUrl?: string;\\n  authToken?: string;\\n  toastPosition?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\\n  theme?: 'light' | 'dark' | 'auto';\\n}\\n\\nexport const FRIGG_UI_CONFIG = new InjectionToken<FriggUiConfig>('FRIGG_UI_CONFIG');\\n\\n// All components that should be exported\\nconst COMPONENTS = [\\n  FriggToastComponent,\\n  FriggToastContainerComponent,\\n  FriggLoadingSpinnerComponent,\\n  FriggModalComponent,\\n  FriggIntegrationCardComponent,\\n  FriggAlertsPanelComponent\\n];\\n\\n@NgModule({\\n  declarations: [],\\n  imports: [\\n    CommonModule,\\n    HttpClientModule,\\n    ...COMPONENTS // Import standalone components\\n  ],\\n  exports: [\\n    ...COMPONENTS // Export all components\\n  ]\\n})\\nexport class FriggUiModule {\\n  /**\\n   * Configure the module with providers\\n   */\\n  static forRoot(config?: FriggUiConfig): ModuleWithProviders<FriggUiModule> {\\n    return {\\n      ngModule: FriggUiModule,\\n      providers: [\\n        {\\n          provide: FRIGG_UI_CONFIG,\\n          useValue: config || {}\\n        },\\n        ToastService,\\n        ApiService,\\n        AlertsService,\\n        CloudWatchService,\\n        {\\n          provide: AngularPlugin,\\n          useFactory: createAngularPlugin,\\n          deps: ['$injector', 'ngZone']\\n        }\\n      ]\\n    };\\n  }\\n\\n  /**\\n   * Import module without providers (for feature modules)\\n   */\\n  static forChild(): ModuleWithProviders<FriggUiModule> {\\n    return {\\n      ngModule: FriggUiModule,\\n      providers: []\\n    };\\n  }\\n}\",\"/**\\n * Angular providers for standalone usage\\n * Provides configuration for applications using standalone components\\n */\\n\\nimport { \\n  Provider, \\n  EnvironmentProviders, \\n  makeEnvironmentProviders,\\n  InjectionToken,\\n  inject\\n} from '@angular/core';\\nimport { HttpClient } from '@angular/common/http';\\n\\n// Services\\nimport { \\n  ToastService,\\n  ApiService,\\n  AlertsService,\\n  CloudWatchService\\n} from '../services';\\n\\n// Plugin\\nimport { AngularPlugin, createAngularPlugin } from '../plugins/angular-plugin';\\n\\n// Configuration\\nexport interface FriggProviderConfig {\\n  apiBaseUrl?: string;\\n  authToken?: string;\\n  enableDevTools?: boolean;\\n}\\n\\nexport const FRIGG_PROVIDER_CONFIG = new InjectionToken<FriggProviderConfig>('FRIGG_PROVIDER_CONFIG');\\n\\n/**\\n * Factory function to initialize ApiService with configuration\\n */\\nexport function apiServiceFactory(\\n  http: HttpClient,\\n  config: FriggProviderConfig\\n): ApiService {\\n  const service = new ApiService(http);\\n  \\n  if (config.apiBaseUrl) {\\n    service.setBaseUrl(config.apiBaseUrl);\\n  }\\n  \\n  if (config.authToken) {\\n    service.setAuthToken(config.authToken);\\n  }\\n  \\n  return service;\\n}\\n\\n/**\\n * Provide Frigg UI services for standalone components\\n */\\nexport function provideFriggUi(\\n  config?: FriggProviderConfig\\n): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: FRIGG_PROVIDER_CONFIG,\\n      useValue: config || {}\\n    },\\n    ToastService,\\n    {\\n      provide: ApiService,\\n      useFactory: apiServiceFactory,\\n      deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\\n    },\\n    AlertsService,\\n    CloudWatchService,\\n    {\\n      provide: AngularPlugin,\\n      useFactory: createAngularPlugin,\\n      deps: ['$injector', 'ngZone']\\n    }\\n  ]);\\n}\\n\\n/**\\n * Individual service providers for selective imports\\n */\\nexport const TOAST_PROVIDERS: Provider[] = [\\n  ToastService\\n];\\n\\nexport const API_PROVIDERS: Provider[] = [\\n  {\\n    provide: ApiService,\\n    useFactory: apiServiceFactory,\\n    deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\\n  }\\n];\\n\\nexport const ALERTS_PROVIDERS: Provider[] = [\\n  AlertsService,\\n  {\\n    provide: ApiService,\\n    useFactory: apiServiceFactory,\\n    deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\\n  }\\n];\\n\\nexport const CLOUDWATCH_PROVIDERS: Provider[] = [\\n  CloudWatchService,\\n  {\\n    provide: ApiService,\\n    useFactory: apiServiceFactory,\\n    deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\\n  }\\n];\\n\\n/**\\n * Helper function to configure API service in application\\n */\\nexport function configureFriggApi(\\n  baseUrl: string,\\n  authToken?: string\\n): Provider[] {\\n  return [\\n    {\\n      provide: FRIGG_PROVIDER_CONFIG,\\n      useValue: { apiBaseUrl: baseUrl, authToken }\\n    },\\n    {\\n      provide: ApiService,\\n      useFactory: apiServiceFactory,\\n      deps: [HttpClient, FRIGG_PROVIDER_CONFIG]\\n    }\\n  ];\\n}\",\"/**\\n * Public API Surface of @friggframework/ui-angular\\n * This file defines all exports for the Angular package\\n */\\n\\n// Services\\nexport * from './services/toast.service';\\nexport * from './services/api.service';\\nexport * from './services/alerts.service';\\nexport * from './services/cloudwatch.service';\\n\\n// Components\\nexport * from './components/toast/toast.component';\\nexport * from './components/toast/toast-container.component';\\nexport * from './components/loading/loading-spinner.component';\\nexport * from './components/modal/modal.component';\\nexport { \\n  FriggIntegrationCardComponent,\\n  Integration as IntegrationCardData,\\n  IntegrationEntity \\n} from './components/integration/integration-card.component';\\nexport * from './components/alerts/alerts-panel.component';\\n\\n// Plugin\\nexport * from './plugins/angular-plugin';\\n\\n// Module\\nexport * from './lib/frigg-ui.module';\\n\\n// Providers for standalone components\\nexport * from './lib/providers';\\n\\n// Re-export commonly used types from ui-core\\nexport { AlertsService as CoreAlertsService } from '@friggframework/ui-core';\\nexport { CloudWatchService as CoreCloudWatchService } from '@friggframework/ui-core';\\nexport { ToastManager } from '@friggframework/ui-core';\\nexport type { FrameworkPlugin, FrameworkAdapter } from '@friggframework/ui-core';\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"CoreAlertsService\",\"i1.ApiService\",\"CoreCloudWatchService\",\"i1\",\"i1.ToastService\",\"i1.AlertsService\",\"COMPONENTS\"],\"mappings\":\"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\"}","type":"asset"}]}