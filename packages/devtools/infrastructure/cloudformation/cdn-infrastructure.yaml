AWSTemplateFormatVersion: '2010-09-09'
Description: 'Frigg Phase 3 CDN Infrastructure - CloudFront distribution for multi-framework UI packages and assets'

Parameters:
  ServiceName:
    Type: String
    Default: frigg
    Description: Name of the Frigg service
  
  Stage:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Deployment stage
  
  DomainName:
    Type: String
    Description: Custom domain name for CDN (optional)
    Default: ''
  
  CertificateArn:
    Type: String
    Description: SSL Certificate ARN for custom domain (required if DomainName is provided)
    Default: ''
  
  EnableLogging:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable CloudFront access logging

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  EnableCustomDomain: !And [!Condition HasCustomDomain, !Condition HasCertificate]
  EnableAccessLogging: !Equals [!Ref EnableLogging, 'true']

Resources:
  # S3 Bucket for UI Package Distribution
  UIDistributionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ServiceName}-${Stage}-ui-distribution-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicReadWrite: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref UIDistributionLogGroup
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: !Ref ServiceName
        - Key: Purpose
          Value: UI-Distribution

  # S3 Bucket for CloudFront Access Logs
  CDNLogsBucket:
    Type: AWS::S3::Bucket
    Condition: EnableAccessLogging
    Properties:
      BucketName: !Sub '${ServiceName}-${Stage}-cdn-logs-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicReadWrite: true

  # Origin Access Control for CloudFront
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ServiceName}-${Stage}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  UIDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'Frigg ${Stage} UI Package Distribution'
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        
        # Origins
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt UIDistributionBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        
        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
        
        # Cache Behaviors for specific paths
        CacheBehaviors:
          # Framework-specific packages
          - PathPattern: '/packages/*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Long cache for versioned packages
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          
          # API documentation
          - PathPattern: '/docs/*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimizedForUncompressedObjects
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          
          # CDN edge for API requests (pass-through)
          - PathPattern: '/api/*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
        
        # Custom Domain Configuration
        Aliases: !If
          - EnableCustomDomain
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        
        ViewerCertificate: !If
          - EnableCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        
        # Logging Configuration
        Logging: !If
          - EnableAccessLogging
          - Bucket: !GetAtt CDNLogsBucket.DomainName
            Prefix: 'access-logs/'
            IncludeCookies: false
          - !Ref AWS::NoValue
        
        # Error Pages
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/404.html'
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
            ErrorCachingMinTTL: 300
        
        Tags:
          - Key: Environment
            Value: !Ref Stage
          - Key: Service
            Value: !Ref ServiceName
          - Key: Purpose
            Value: UI-Distribution

  # S3 Bucket Policy for CloudFront OAC
  UIDistributionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UIDistributionBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${UIDistributionBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${UIDistribution}'

  # CloudWatch Log Group for Distribution Events
  UIDistributionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ServiceName}-${Stage}-ui-distribution'
      RetentionInDays: 30

  # Lambda Function for UI Package Deployment
  UIPackageDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-${Stage}-ui-package-deploy'
      Runtime: nodejs20.x
      Handler: index.handler
      Timeout: 300
      MemorySize: 512
      Role: !GetAtt UIPackageDeployRole.Arn
      Environment:
        Variables:
          DISTRIBUTION_BUCKET: !Ref UIDistributionBucket
          CLOUDFRONT_DISTRIBUTION_ID: !Ref UIDistribution
          STAGE: !Ref Stage
          SERVICE_NAME: !Ref ServiceName
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const cloudfront = new AWS.CloudFront();
          
          exports.handler = async (event) => {
              console.log('UI Package Deploy Event:', JSON.stringify(event, null, 2));
              
              try {
                  const { action, package: pkg, version, files } = event;
                  
                  switch (action) {
                      case 'deploy':
                          return await deployPackage(pkg, version, files);
                      case 'invalidate':
                          return await invalidateCache(event.paths || ['/*']);
                      case 'list':
                          return await listPackages();
                      default:
                          throw new Error(`Unknown action: ${action}`);
                  }
              } catch (error) {
                  console.error('Deployment error:', error);
                  throw error;
              }
          };
          
          async function deployPackage(packageName, version, files) {
              const bucket = process.env.DISTRIBUTION_BUCKET;
              const uploads = [];
              
              for (const file of files) {
                  const key = `packages/${packageName}/${version}/${file.path}`;
                  
                  const uploadParams = {
                      Bucket: bucket,
                      Key: key,
                      Body: file.content,
                      ContentType: file.contentType || 'application/octet-stream',
                      CacheControl: 'public, max-age=31536000', // 1 year for versioned files
                      Metadata: {
                          package: packageName,
                          version: version,
                          deployedAt: new Date().toISOString()
                      }
                  };
                  
                  uploads.push(s3.upload(uploadParams).promise());
              }
              
              await Promise.all(uploads);
              
              // Update latest version pointer
              await s3.putObject({
                  Bucket: bucket,
                  Key: `packages/${packageName}/latest.json`,
                  Body: JSON.stringify({ version, deployedAt: new Date().toISOString() }),
                  ContentType: 'application/json',
                  CacheControl: 'public, max-age=300' // 5 minutes for latest pointer
              }).promise();
              
              return { success: true, packageName, version, filesUploaded: files.length };
          }
          
          async function invalidateCache(paths) {
              const distributionId = process.env.CLOUDFRONT_DISTRIBUTION_ID;
              
              const params = {
                  DistributionId: distributionId,
                  InvalidationBatch: {
                      Paths: {
                          Quantity: paths.length,
                          Items: paths
                      },
                      CallerReference: `ui-deploy-${Date.now()}`
                  }
              };
              
              const result = await cloudfront.createInvalidation(params).promise();
              return { success: true, invalidationId: result.Invalidation.Id };
          }
          
          async function listPackages() {
              const bucket = process.env.DISTRIBUTION_BUCKET;
              
              const params = {
                  Bucket: bucket,
                  Prefix: 'packages/',
                  Delimiter: '/'
              };
              
              const result = await s3.listObjectsV2(params).promise();
              const packages = result.CommonPrefixes?.map(prefix => 
                  prefix.Prefix.replace('packages/', '').replace('/', '')
              ) || [];
              
              return { packages };
          }

  # IAM Role for UI Package Deploy Function
  UIPackageDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Stage}-ui-deploy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UIDeploymentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${UIDistributionBucket}/*'
                  - !Ref UIDistributionBucket
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:GetInvalidation
                  - cloudfront:ListInvalidations
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${UIDistribution}'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # API Gateway for UI Package Management
  UIPackageAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServiceName}-${Stage}-ui-package-api'
      Description: 'API for managing UI package deployments'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - '*/*'

  UIPackageAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UIPackageAPIMethodDeploy
      - UIPackageAPIMethodInvalidate
      - UIPackageAPIMethodList
    Properties:
      RestApiId: !Ref UIPackageAPI
      StageName: !Ref Stage

  # API Gateway Resources and Methods
  UIPackageAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UIPackageAPI
      ParentId: !GetAtt UIPackageAPI.RootResourceId
      PathPart: packages

  UIPackageAPIMethodDeploy:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UIPackageAPI
      ResourceId: !Ref UIPackageAPIResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UIPackageDeployFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  UIPackageAPIMethodInvalidate:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UIPackageAPI
      ResourceId: !Ref UIPackageAPIResource
      HttpMethod: PUT
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UIPackageDeployFunction.Arn}/invocations'

  UIPackageAPIMethodList:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UIPackageAPI
      ResourceId: !Ref UIPackageAPIResource
      HttpMethod: GET
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UIPackageDeployFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  UIPackageAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UIPackageDeployFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UIPackageAPI}/*/*/*'

Outputs:
  UIDistributionBucket:
    Description: S3 bucket for UI package distribution
    Value: !Ref UIDistributionBucket
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-distribution-bucket'

  UIDistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt UIDistribution.DomainName
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-distribution-domain'

  UIDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref UIDistribution
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-distribution-id'

  UIDistributionURL:
    Description: CDN URL for UI packages
    Value: !If
      - EnableCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${UIDistribution.DomainName}'
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-distribution-url'

  UIPackageAPIEndpoint:
    Description: API Gateway endpoint for UI package management
    Value: !Sub 'https://${UIPackageAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-package-api-endpoint'

  UIPackageDeployFunctionArn:
    Description: Lambda function ARN for UI package deployment
    Value: !GetAtt UIPackageDeployFunction.Arn
    Export:
      Name: !Sub '${ServiceName}-${Stage}-ui-deploy-function-arn'